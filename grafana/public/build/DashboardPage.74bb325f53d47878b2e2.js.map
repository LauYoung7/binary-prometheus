{"version":3,"file":"DashboardPage.74bb325f53d47878b2e2.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/getAlertingValidationMessage.ts","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/RuleLocation.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleActionsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleConfigStatus.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts","webpack://grafana/./public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/actions.ts","webpack://grafana/./public/app/features/dashboard/components/SaveDashboard/UnsavedChangesModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPrompt/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/SupportSnapshotService.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/HelpWizard.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts","webpack://grafana/./public/app/features/inspector/InspectMetadataTab.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/InspectContent.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/hooks.ts","webpack://grafana/./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack://grafana/./public/app/features/variables/pickers/PickerRenderer.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenuItems.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/utils.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/AngularPanelOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/DynamicConfigValueEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OverrideCategoryTitle.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getFieldOverrideElements.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelInfo/LibraryPanelInfo.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getLibraryPanelOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/getPanelFrameOptions.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/OptionSearchEngine.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/getRecentOptions.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPaneOptions.tsx","webpack://grafana/./public/app/features/dashboard/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationButton.tsx","webpack://grafana/./public/app/features/library-panels/components/ChangeLibraryPanelModal/ChangeLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx","webpack://grafana/./public/app/features/panel/state/getAllSuggestions.ts","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VisualizationSuggestionCard.tsx","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VisualizationSuggestions.tsx","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VizTypePickerPlugin.tsx","webpack://grafana/./public/app/features/panel/components/VizTypePicker/VizTypePicker.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationSelectPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelNotSupported.tsx","webpack://grafana/./public/app/features/alerting/StateHistory.tsx","webpack://grafana/./public/app/features/alerting/TestRuleResult.tsx","webpack://grafana/./public/app/features/alerting/AlertTab.tsx","webpack://grafana/./public/app/features/alerting/unified/components/panel-alerts-tab/NewRuleFromPanelButton.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/usePanelCombinedRules.ts","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTabContent.tsx","webpack://grafana/./public/app/features/alerting/AlertTabIndex.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTab.tsx","webpack://grafana/./public/app/core/utils/docsLinks.ts","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationFilter.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationOperationRow.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationOperationRows.tsx","webpack://grafana/./public/app/features/dashboard/components/TransformationsEditor/TransformationsEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTabs.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/AnnotationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/Annotations.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinksDashboard.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinks.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenu.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/NewDashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/NewDashboardWithDS.tsx","webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx","webpack://grafana/./public/app/plugins/panel/geomap/editor/FrameSelectionEditor.tsx"],"sourcesContent":["import { DataQuery, DataSourceRef, DataTransformerConfig } from '@grafana/data';\nimport { DataSourceSrv } from '@grafana/runtime';\n\nexport const getDefaultCondition = () => ({\n  type: 'query',\n  query: { params: ['A', '5m', 'now'] },\n  reducer: { type: 'avg', params: [] as any[] },\n  evaluator: { type: 'gt', params: [null] as any[] },\n  operator: { type: 'and' },\n});\n\nexport const getAlertingValidationMessage = async (\n  transformations: DataTransformerConfig[] | undefined,\n  targets: DataQuery[],\n  datasourceSrv: DataSourceSrv,\n  datasource: DataSourceRef | null\n): Promise<string> => {\n  if (targets.length === 0) {\n    return 'Could not find any metric queries';\n  }\n\n  if (transformations && transformations.length) {\n    return 'Transformations are not supported in alert queries';\n  }\n\n  let alertingNotSupported = 0;\n  let templateVariablesNotSupported = 0;\n\n  for (const target of targets) {\n    const dsRef = target.datasource || datasource;\n    const ds = await datasourceSrv.get(dsRef);\n    if (!ds.meta.alerting) {\n      alertingNotSupported++;\n    } else if (ds.targetContainsTemplate && ds.targetContainsTemplate(target)) {\n      templateVariablesNotSupported++;\n    }\n  }\n\n  if (alertingNotSupported === targets.length) {\n    return 'The datasource does not support alerting queries';\n  }\n\n  if (templateVariablesNotSupported === targets.length) {\n    return 'Template variables are not supported in alert queries';\n  }\n\n  return '';\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\ninterface RuleLocationProps {\n  namespace: string;\n  group?: string;\n}\n\nconst RuleLocation: FC<RuleLocationProps> = ({ namespace, group }) => {\n  if (!group) {\n    return <>{namespace}</>;\n  }\n\n  return (\n    <>\n      {namespace} <Icon name=\"angle-right\" /> {group}\n    </>\n  );\n};\n\nexport { RuleLocation };\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Button, ClipboardButton, ConfirmModal, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\n\nimport { useIsRuleEditable } from '../../hooks/useIsRuleEditable';\nimport { deleteRuleAction } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { createViewLink } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { createUrl } from '../../utils/url';\n\nimport { CloneRuleButton } from './CloneRuleButton';\nexport const matchesWidth = (width: number) => window.matchMedia(`(max-width: ${width}px)`).matches;\n\ninterface Props {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n}\n\nexport const RuleActionsButtons: FC<Props> = ({ rule, rulesSource }) => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const notifyApp = useAppNotification();\n  const style = useStyles2(getStyles);\n  const { namespace, group, rulerRule } = rule;\n  const [ruleToDelete, setRuleToDelete] = useState<CombinedRule>();\n\n  const rulesSourceName = getRulesSourceName(rulesSource);\n\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  const buttons: JSX.Element[] = [];\n\n  const isFederated = isFederatedRuleGroup(group);\n  const { isEditable, isRemovable } = useIsRuleEditable(rulesSourceName, rulerRule);\n  const returnTo = location.pathname + location.search;\n  const isViewMode = inViewMode(location.pathname);\n\n  const deleteRule = () => {\n    if (ruleToDelete && ruleToDelete.rulerRule) {\n      const identifier = ruleId.fromRulerRule(\n        getRulesSourceName(ruleToDelete.namespace.rulesSource),\n        ruleToDelete.namespace.name,\n        ruleToDelete.group.name,\n        ruleToDelete.rulerRule\n      );\n\n      dispatch(deleteRuleAction(identifier, { navigateTo: isViewMode ? '/alerting/list' : undefined }));\n      setRuleToDelete(undefined);\n    }\n  };\n\n  const buildShareUrl = () => {\n    if (isCloudRulesSource(rulesSource)) {\n      const { appUrl, appSubUrl } = config;\n      const baseUrl = appSubUrl !== '' ? `${appUrl}${appSubUrl}/` : config.appUrl;\n      const ruleUrl = `${encodeURIComponent(rulesSource.name)}/${encodeURIComponent(rule.name)}`;\n      return `${baseUrl}alerting/${ruleUrl}/find`;\n    }\n\n    return window.location.href.split('?')[0];\n  };\n\n  const sourceName = getRulesSourceName(rulesSource);\n\n  if (!isViewMode) {\n    buttons.push(\n      <Tooltip placement=\"top\" content={'View'}>\n        <LinkButton\n          className={style.button}\n          title=\"View\"\n          size=\"sm\"\n          key=\"view\"\n          variant=\"secondary\"\n          icon=\"eye\"\n          href={createViewLink(rulesSource, rule, returnTo)}\n        ></LinkButton>\n      </Tooltip>\n    );\n  }\n\n  if (isEditable && rulerRule && !isFederated) {\n    const identifier = ruleId.fromRulerRule(sourceName, namespace.name, group.name, rulerRule);\n\n    if (!isProvisioned) {\n      const editURL = createUrl(`/alerting/${encodeURIComponent(ruleId.stringifyIdentifier(identifier))}/edit`, {\n        returnTo,\n      });\n\n      if (isViewMode) {\n        buttons.push(\n          <ClipboardButton\n            key=\"copy\"\n            icon=\"copy\"\n            onClipboardError={(copiedText) => {\n              notifyApp.error('Error while copying URL', copiedText);\n            }}\n            className={style.button}\n            size=\"sm\"\n            getText={buildShareUrl}\n          >\n            Copy link to rule\n          </ClipboardButton>\n        );\n      }\n\n      buttons.push(\n        <Tooltip placement=\"top\" content={'Edit'}>\n          <LinkButton\n            title=\"Edit\"\n            className={style.button}\n            size=\"sm\"\n            key=\"edit\"\n            variant=\"secondary\"\n            icon=\"pen\"\n            href={editURL}\n          />\n        </Tooltip>\n      );\n    }\n\n    buttons.push(\n      <Tooltip placement=\"top\" content=\"Copy\">\n        <CloneRuleButton ruleIdentifier={identifier} isProvisioned={isProvisioned} className={style.button} />\n      </Tooltip>\n    );\n  }\n\n  if (isRemovable && rulerRule && !isFederated && !isProvisioned) {\n    buttons.push(\n      <Tooltip placement=\"top\" content={'Delete'}>\n        <Button\n          title=\"Delete\"\n          className={style.button}\n          size=\"sm\"\n          type=\"button\"\n          key=\"delete\"\n          variant=\"secondary\"\n          icon=\"trash-alt\"\n          onClick={() => setRuleToDelete(rule)}\n        />\n      </Tooltip>\n    );\n  }\n\n  if (buttons.length) {\n    return (\n      <>\n        <Stack gap={1}>\n          {buttons.map((button, index) => (\n            <React.Fragment key={index}>{button}</React.Fragment>\n          ))}\n        </Stack>\n        {!!ruleToDelete && (\n          <ConfirmModal\n            isOpen={true}\n            title=\"Delete rule\"\n            body=\"Deleting this rule will permanently remove it from your alert rule list. Are you sure you want to delete this rule?\"\n            confirmText=\"Yes, delete\"\n            icon=\"exclamation-triangle\"\n            onConfirm={deleteRule}\n            onDismiss={() => setRuleToDelete(undefined)}\n          />\n        )}\n      </>\n    );\n  }\n\n  return null;\n};\n\nfunction inViewMode(pathname: string): boolean {\n  return pathname.endsWith('/view');\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    padding: 0 ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { config } from '@grafana/runtime/src';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui/src';\n\nimport { CombinedRule } from '../../../../../types/unified-alerting';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\n\ninterface RuleConfigStatusProps {\n  rule: CombinedRule;\n}\n\nexport function RuleConfigStatus({ rule }: RuleConfigStatusProps) {\n  const styles = useStyles2(getStyles);\n\n  const { exceedsLimit } = useMemo(\n    () => checkEvaluationIntervalGlobalLimit(rule.group.interval),\n    [rule.group.interval]\n  );\n\n  if (!exceedsLimit) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      theme=\"error\"\n      content={\n        <div>\n          A minimum evaluation interval of{' '}\n          <span className={styles.globalLimitValue}>{config.unifiedAlerting.minInterval}</span> has been configured in\n          Grafana and will be used instead of the {rule.group.interval} interval configured for the Rule Group.\n        </div>\n      }\n    >\n      <Icon name=\"stopwatch-slash\" className={styles.icon} />\n    </Tooltip>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    globalLimitValue: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    icon: css`\n      fill: ${theme.colors.warning.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { isRecordingRulerRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\n\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\n// The limit is set to 15 in order to upkeep the good performance\n// and to encourage users to go to the rule details page to see the rest of the instances\n// We don't want to paginate the instances list on the alert list page\nconst INSTANCES_DISPLAY_LIMIT = 15;\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} isViewMode={false} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {<EvaluationBehaviorSummary rule={rule} />}\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances rule={rule} itemsDisplayLimit={INSTANCES_DISPLAY_LIMIT} />\n    </div>\n  );\n};\n\ninterface EvaluationBehaviorSummaryProps {\n  rule: CombinedRule;\n}\n\nconst EvaluationBehaviorSummary = ({ rule }: EvaluationBehaviorSummaryProps) => {\n  let forDuration: string | undefined;\n  let every = rule.group.interval;\n\n  // recording rules don't have a for duration\n  if (!isRecordingRulerRule(rule.rulerRule)) {\n    forDuration = rule.rulerRule?.for;\n  }\n\n  return (\n    <>\n      {every && (\n        <DetailsField label=\"Evaluate\" horizontal={true}>\n          Every {every}\n        </DetailsField>\n      )}\n      {forDuration && (\n        <DetailsField label=\"For\" horizontal={true}>\n          {forDuration}\n        </DetailsField>\n      )}\n    </>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { RuleLocation } from '../RuleLocation';\nimport { Tokenize } from '../Tokenize';\n\nimport { RuleActionsButtons } from './RuleActionsButtons';\nimport { RuleConfigStatus } from './RuleConfigStatus';\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    return rules.map((rule, ruleIdx) => {\n      return {\n        id: `${rule.namespace.name}-${rule.group.name}-${rule.name}-${ruleIdx}`,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n        pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n        paginationStyles={styles.pagination}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  pagination: css`\n    display: flex;\n    margin: 0;\n    padding-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(0.25)};\n    justify-content: center;\n    border-left: 1px solid ${theme.colors.border.strong};\n    border-right: 1px solid ${theme.colors.border.strong};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n\n          const isDeleting = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && rulerRule && !promRule);\n          const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n          const isPaused = isGrafanaManagedRule && Boolean(rulerRule.grafana_alert.is_paused);\n\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} isPaused={isPaused} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const rulerRule = rule.rulerRule;\n          const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n\n          if (!isGrafanaManagedRule) {\n            return null;\n          }\n\n          const provenance = rulerRule.grafana_alert.provenance;\n          return provenance ? <ProvisioningBadge /> : null;\n        },\n        size: '100px',\n      },\n      {\n        id: 'warnings',\n        label: '',\n        renderCell: ({ data: combinedRule }) => <RuleConfigStatus rule={combinedRule} />,\n        size: '45px',\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule, group } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          return <Tokenize input={rule.annotations[Annotation.summary] ?? ''} />;\n        },\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          // ungrouped rules are rules that are in the \"default\" group name\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? (\n            <RuleLocation namespace={namespace.name} />\n          ) : (\n            <RuleLocation namespace={namespace.name} group={group.name} />\n          );\n\n          return groupName;\n        },\n        size: 5,\n      });\n    }\n    columns.push({\n      id: 'actions',\n      label: 'Actions',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({ data: rule }) => {\n        return <RuleActionsButtons rule={rule} rulesSource={rule.namespace.rulesSource} />;\n      },\n      size: '200px',\n    });\n\n    return columns;\n  }, [showSummaryColumn, showGroupColumn, hasRuler, rulerRulesLoaded]);\n}\n","import { useCallback } from 'react';\n\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler() {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const hasRuler = useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n\n  const rulerRulesLoaded = useCallback(\n    (rulesSource: RulesSource) => {\n      const rulesSourceName = getRulesSourceName(rulesSource);\n      const result = rulerRules[rulesSourceName]?.result;\n\n      return Boolean(result);\n    },\n    [rulerRules]\n  );\n\n  return { hasRuler, rulerRulesLoaded };\n}\n","import React, { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderUid: string;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderUid,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}: Props) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles2(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta?.connectedDashboards}{' '}\n            {panel.libraryPanel.meta?.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search affected dashboards\"\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>Loading connected dashboards...</p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>Dashboard name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              Discard\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderUid).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            Update all\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n","import { pick } from 'lodash';\n\nimport store from 'app/core/store';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { panelModelAndPluginReady } from 'app/features/panel/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../../state';\n\nimport {\n  closeEditor,\n  PANEL_EDITOR_UI_STATE_STORAGE_KEY,\n  PanelEditorUIState,\n  setDiscardChanges,\n  setPanelEditorUIState,\n  updateEditorInitState,\n} from './reducers';\n\nexport function initPanelEditor(sourcePanel: PanelModel, dashboard: DashboardModel): ThunkResult<void> {\n  return async (dispatch) => {\n    const panel = dashboard.initEditPanel(sourcePanel);\n\n    dispatch(\n      updateEditorInitState({\n        panel,\n        sourcePanel,\n      })\n    );\n  };\n}\n\nexport function discardPanelChanges(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { getPanel } = getStore().panelEditor;\n    getPanel().configRev = 0;\n    dispatch(setDiscardChanges(true));\n  };\n}\n\nexport function updateDuplicateLibraryPanels(\n  modifiedPanel: PanelModel,\n  dashboard: DashboardModel | null\n): ThunkResult<void> {\n  return (dispatch) => {\n    if (modifiedPanel.libraryPanel?.uid === undefined || !dashboard) {\n      return;\n    }\n\n    const modifiedSaveModel = modifiedPanel.getSaveModel();\n    for (const panel of dashboard.panels) {\n      if (skipPanelUpdate(modifiedPanel, panel)) {\n        continue;\n      }\n\n      panel.restoreModel({\n        ...modifiedSaveModel,\n        ...pick(panel, 'gridPos', 'id'),\n      });\n\n      // Loaded plugin is not included in the persisted properties\n      // So is not handled by restoreModel\n      const pluginChanged = panel.plugin?.meta.id !== modifiedPanel.plugin?.meta.id;\n      panel.plugin = modifiedPanel.plugin;\n      panel.configRev++;\n\n      if (pluginChanged) {\n        panel.generateNewKey();\n\n        dispatch(panelModelAndPluginReady({ key: panel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        panel.getQueryRunner().useLastResultFrom(modifiedPanel.getQueryRunner());\n      }, 20);\n    }\n\n    if (modifiedPanel.repeat) {\n      // We skip any repeated library panels so we need to update them by calling processRepeats\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => dashboard.processRepeats(), 20);\n    }\n  };\n}\n\nexport function skipPanelUpdate(modifiedPanel: PanelModel, panelToUpdate: PanelModel): boolean {\n  // don't update library panels that aren't of the same type\n  if (panelToUpdate.libraryPanel?.uid !== modifiedPanel.libraryPanel!.uid) {\n    return true;\n  }\n\n  // don't update the modifiedPanel twice\n  if (panelToUpdate.id && panelToUpdate.id === modifiedPanel.id) {\n    return true;\n  }\n\n  // don't update library panels that are repeated\n  if (panelToUpdate.repeatPanelId) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function exitPanelEditor(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard.getModel();\n    const { getPanel, getSourcePanel, shouldDiscardChanges } = getStore().panelEditor;\n    const panel = getPanel();\n\n    if (dashboard) {\n      dashboard.exitPanelEditor();\n    }\n\n    if (hasPanelChangedInPanelEdit(panel) && !shouldDiscardChanges) {\n      const modifiedSaveModel = panel.getSaveModel();\n      const sourcePanel = getSourcePanel();\n      const panelTypeChanged = sourcePanel.type !== panel.type;\n\n      dispatch(updateDuplicateLibraryPanels(panel, dashboard));\n\n      sourcePanel.restoreModel(modifiedSaveModel);\n      sourcePanel.configRev++; // force check the configs\n\n      if (panelTypeChanged) {\n        // Loaded plugin is not included in the persisted properties so is not handled by restoreModel\n        sourcePanel.plugin = panel.plugin;\n        sourcePanel.generateNewKey();\n\n        await dispatch(panelModelAndPluginReady({ key: sourcePanel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        sourcePanel.getQueryRunner().useLastResultFrom(panel.getQueryRunner());\n        sourcePanel.render();\n\n        // If all changes where saved then reset configRev after applying changes\n        if (panel.hasSavedPanelEditChange && !panel.hasChanged) {\n          sourcePanel.configRev = 0;\n        }\n      }, 20);\n    }\n\n    dispatch(cleanUpPanelState(panel.key));\n    dispatch(closeEditor());\n  };\n}\n\nfunction hasPanelChangedInPanelEdit(panel: PanelModel) {\n  return panel.hasChanged || panel.hasSavedPanelEditChange || panel.isAngularPlugin();\n}\n\nexport function updatePanelEditorUIState(uiState: Partial<PanelEditorUIState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().panelEditor.ui, ...uiState };\n    dispatch(setPanelEditorUIState(nextState));\n    try {\n      store.setObject(PANEL_EDITOR_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Button, Modal } from '@grafana/ui';\n\nimport { DashboardModel } from '../../state';\n\nimport { SaveDashboardButton } from './SaveDashboardButton';\n\ninterface UnsavedChangesModalProps {\n  dashboard: DashboardModel;\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveSuccess?: () => void;\n}\n\nexport const UnsavedChangesModal: React.FC<UnsavedChangesModalProps> = ({\n  dashboard,\n  onSaveSuccess,\n  onDiscard,\n  onDismiss,\n}) => {\n  return (\n    <Modal\n      isOpen={true}\n      title=\"Unsaved changes\"\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={css`\n        width: 500px;\n      `}\n    >\n      <h5>Do you want to save your changes?</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard\n        </Button>\n        <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onSaveSuccess} />\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { each, find } from 'lodash';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { ModalsContext } from '@grafana/ui';\nimport { appEvents } from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { useDispatch } from 'app/types';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { discardPanelChanges, exitPanelEditor } from '../PanelEditor/state/actions';\nimport { UnsavedChangesModal } from '../SaveDashboard/UnsavedChangesModal';\n\nexport interface Props {\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  original: object | null;\n  originalPath?: string;\n}\n\nexport const DashboardPrompt = React.memo(({ dashboard }: Props) => {\n  const [state, setState] = useState<State>({ original: null });\n  const dispatch = useDispatch();\n  const { original, originalPath } = state;\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    // This timeout delay is to wait for panels to load and migrate scheme before capturing the original state\n    // This is to minimize unsaved changes warnings due to automatic schema migrations\n    const timeoutId = setTimeout(() => {\n      const originalPath = locationService.getLocation().pathname;\n      const original = dashboard.getSaveModelClone();\n      setState({ originalPath, original });\n    }, 1000);\n\n    const savedEventUnsub = appEvents.subscribe(DashboardSavedEvent, () => {\n      const original = dashboard.getSaveModelClone();\n      setState({ originalPath, original });\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      savedEventUnsub.unsubscribe();\n    };\n  }, [dashboard, originalPath]);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, original)) {\n        return;\n      }\n      if (hasChanges(dashboard, original)) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard, original]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelInEdit = dashboard.panelInEdit;\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n      showModal(SaveLibraryPanelModal, {\n        isUnsavedPrompt: true,\n        panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n        folderUid: dashboard.meta.folderUid ?? '',\n        onConfirm: () => {\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          dispatch(discardPanelChanges());\n          moveToBlockedLocationAfterReactStateUpdate(location);\n          hideModal();\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname || !original) {\n      // This is here due to timing reasons we want the exit panel editor state changes to happen before router update\n      if (panelInEdit && !search.has('editPanel')) {\n        dispatch(exitPanelEditor());\n      }\n\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, original)) {\n      return true;\n    }\n\n    if (!hasChanges(dashboard, original)) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard: dashboard,\n      onSaveSuccess: () => {\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDiscard: () => {\n        setState({ ...state, original: null });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardModel | null, original: object | null) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n\n/**\n * Remove stuff that should not count in diff\n */\nfunction cleanDashboardFromIgnoredChanges(dashData: Dashboard) {\n  // need to new up the domain model class to get access to expand / collapse row logic\n  const model = new DashboardModel(dashData);\n\n  // Expand all rows before making comparison. This is required because row expand / collapse\n  // change order of panel array and panel positions.\n  model.expandRows();\n\n  const dash = model.getSaveModelClone();\n\n  // ignore time and refresh\n  dash.time = 0;\n  dash.refresh = '';\n  dash.schemaVersion = 0;\n  dash.timezone = 0;\n\n  dash.panels = [];\n\n  // ignore template variable values\n  each(dash.getVariables(), (variable: any) => {\n    variable.current = null;\n    variable.options = null;\n    variable.filters = null;\n  });\n\n  return dash;\n}\n\n// TODO: Adapt original to be Dashboard type instead\nexport function hasChanges(current: DashboardModel, original: unknown) {\n  if (current.hasUnsavedChanges()) {\n    return true;\n  }\n  // TODO: Make getSaveModelClone return Dashboard type instead\n  const currentClean = cleanDashboardFromIgnoredChanges(current.getSaveModelClone() as unknown as Dashboard);\n  const originalClean = cleanDashboardFromIgnoredChanges(original as Dashboard);\n\n  const currentTimepicker = find((currentClean as any).nav, { type: 'timepicker' });\n  const originalTimepicker = find((originalClean as any).nav, { type: 'timepicker' });\n\n  if (currentTimepicker && originalTimepicker) {\n    currentTimepicker.now = originalTimepicker.now;\n  }\n\n  const currentJson = JSON.stringify(currentClean, null);\n  const originalJson = JSON.stringify(originalClean, null);\n\n  return currentJson !== originalJson;\n}\n","import saveAs from 'file-saver';\n\nimport { dateTimeFormat, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { PanelModel } from '../../state';\nimport { setDashboardToFetchFromLocalStorage } from '../../state/initDashboard';\n\nimport { Randomize } from './randomizer';\nimport { getDebugDashboard, getGithubMarkdown } from './utils';\n\ninterface SupportSnapshotState {\n  currentTab: SnapshotTab;\n  showMessage: ShowMessage;\n  options: Array<SelectableValue<ShowMessage>>;\n  snapshotText: string;\n  markdownText: string;\n  snapshotSize?: string;\n  randomize: Randomize;\n  iframeLoading?: boolean;\n  loading?: boolean;\n  error?: {\n    title: string;\n    message: string;\n  };\n  panel: PanelModel;\n  panelTitle: string;\n\n  // eslint-disable-next-line\n  snapshot?: any;\n  snapshotUpdate: number;\n}\n\nexport enum SnapshotTab {\n  Support,\n  Data,\n}\n\nexport enum ShowMessage {\n  PanelSnapshot,\n  GithubComment,\n}\n\nexport class SupportSnapshotService extends StateManagerBase<SupportSnapshotState> {\n  constructor(panel: PanelModel) {\n    super({\n      panel,\n      panelTitle: panel.replaceVariables(panel.title, undefined, 'text') || 'Panel',\n      currentTab: SnapshotTab.Support,\n      showMessage: ShowMessage.GithubComment,\n      snapshotText: '',\n      markdownText: '',\n      randomize: {},\n      snapshotUpdate: 0,\n      options: [\n        {\n          label: 'GitHub comment',\n          description: 'Copy and paste this message into a GitHub issue or comment',\n          value: ShowMessage.GithubComment,\n        },\n        {\n          label: 'Panel support snapshot',\n          description: 'Dashboard JSON used to help troubleshoot visualization issues',\n          value: ShowMessage.PanelSnapshot,\n        },\n      ],\n    });\n  }\n\n  async buildDebugDashboard() {\n    const { panel, randomize, snapshotUpdate, iframeLoading, currentTab } = this.state;\n    const snapshot = await getDebugDashboard(panel, randomize, getTimeSrv().timeRange());\n    const snapshotText = JSON.stringify(snapshot, null, 2);\n    const markdownText = getGithubMarkdown(panel, snapshotText);\n    const snapshotSize = formattedValueToString(getValueFormat('bytes')(snapshotText?.length ?? 0));\n\n    if (iframeLoading && currentTab === SnapshotTab.Support) {\n      setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: snapshot });\n    }\n\n    this.setState({ snapshot, snapshotText, markdownText, snapshotSize, snapshotUpdate: snapshotUpdate + 1 });\n  }\n\n  onCurrentTabChange = (value: SnapshotTab) => {\n    this.setState({ currentTab: value });\n  };\n\n  onShowMessageChange = (value: SelectableValue<ShowMessage>) => {\n    this.setState({ showMessage: value.value! });\n  };\n\n  onGetMarkdownForClipboard = () => {\n    const { markdownText } = this.state;\n    const maxLen = Math.pow(1024, 2) * 1.5; // 1.5MB\n\n    if (markdownText.length > maxLen) {\n      this.setState({\n        error: {\n          title: 'Copy to clipboard failed',\n          message: 'Snapshot is too large, consider download and attaching a file instead',\n        },\n      });\n\n      return '';\n    }\n\n    return markdownText;\n  };\n\n  onDownloadDashboard = () => {\n    const { snapshotText, panelTitle } = this.state;\n    const blob = new Blob([snapshotText], {\n      type: 'text/plain',\n    });\n    const fileName = `debug-${panelTitle}-${dateTimeFormat(new Date())}.json.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onSetSnapshotText = (snapshotText: string) => {\n    this.setState({ snapshotText });\n  };\n\n  onToggleRandomize = (k: keyof Randomize) => {\n    const { randomize } = this.state;\n    this.setState({ randomize: { ...randomize, [k]: !randomize[k] } });\n  };\n\n  onPreviewDashboard = () => {\n    const { snapshot } = this.state;\n    if (snapshot) {\n      setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: snapshot });\n      global.open(config.appUrl + 'dashboard/new', '_blank');\n    }\n  };\n\n  subscribeToIframeLoadingMessage() {\n    const handleEvent = (evt: MessageEvent<string>) => {\n      if (evt.data === 'GrafanaAppInit') {\n        setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: this.state.snapshot });\n        this.setState({ iframeLoading: true });\n      }\n    };\n    window.addEventListener('message', handleEvent, false);\n\n    return function cleanup() {\n      window.removeEventListener('message', handleEvent);\n    };\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { PanelPlugin, GrafanaTheme2, FeatureState } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport {\n  Drawer,\n  Tab,\n  TabsBar,\n  CodeEditor,\n  useStyles2,\n  Field,\n  HorizontalGroup,\n  InlineSwitch,\n  Button,\n  Spinner,\n  Alert,\n  FeatureBadge,\n  Select,\n  ClipboardButton,\n  Icon,\n} from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nimport { ShowMessage, SnapshotTab, SupportSnapshotService } from './SupportSnapshotService';\n\ninterface Props {\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  onClose: () => void;\n}\n\nexport function HelpWizard({ panel, plugin, onClose }: Props) {\n  const styles = useStyles2(getStyles);\n  const service = useMemo(() => new SupportSnapshotService(panel), [panel]);\n\n  const {\n    currentTab,\n    loading,\n    error,\n    iframeLoading,\n    options,\n    showMessage,\n    snapshotSize,\n    markdownText,\n    snapshotText,\n    randomize,\n    panelTitle,\n    snapshotUpdate,\n  } = service.useState();\n\n  useEffect(() => {\n    service.buildDebugDashboard();\n  }, [service, plugin, randomize]);\n\n  useEffect(() => {\n    // Listen for messages from loaded iframe\n    return service.subscribeToIframeLoadingMessage();\n  }, [service]);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const tabs = [\n    { label: 'Snapshot', value: SnapshotTab.Support },\n    { label: 'Data', value: SnapshotTab.Data },\n  ];\n\n  return (\n    <Drawer\n      title={`Get help with this panel`}\n      width=\"90%\"\n      onClose={onClose}\n      expandable\n      scrollableContent\n      subtitle={\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <FeatureBadge featureState={FeatureState.beta} />\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/troubleshooting/\"\n              target=\"blank\"\n              className=\"external-link\"\n              rel=\"noopener noreferrer\"\n            >\n              Troubleshooting docs <Icon name=\"external-link-alt\" />\n            </a>\n          </Stack>\n          <span className=\"muted\">\n            To request troubleshooting help, send a snapshot of this panel to Grafana Labs Technical Support. The\n            snapshot contains query response data and panel settings.\n          </span>\n        </Stack>\n      }\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === currentTab}\n              onChangeTab={() => service.onCurrentTabChange(t.value!)}\n            />\n          ))}\n        </TabsBar>\n      }\n    >\n      {loading && <Spinner />}\n      {error && <Alert title={error.title}>{error.message}</Alert>}\n\n      {currentTab === SnapshotTab.Data && (\n        <div className={styles.code}>\n          <div className={styles.opts}>\n            <Field label=\"Template\" className={styles.field}>\n              <Select options={options} value={showMessage} onChange={service.onShowMessageChange} />\n            </Field>\n\n            {showMessage === ShowMessage.GithubComment ? (\n              <ClipboardButton icon=\"copy\" getText={service.onGetMarkdownForClipboard}>\n                Copy to clipboard\n              </ClipboardButton>\n            ) : (\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Download ({snapshotSize})\n              </Button>\n            )}\n          </div>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language={showMessage === ShowMessage.GithubComment ? 'markdown' : 'json'}\n                showLineNumbers={true}\n                showMiniMap={true}\n                value={showMessage === ShowMessage.GithubComment ? markdownText : snapshotText}\n                readOnly={false}\n                onBlur={service.onSetSnapshotText}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n      {currentTab === SnapshotTab.Support && (\n        <>\n          <Field\n            label=\"Randomize data\"\n            description=\"Modify the original data to hide sensitve information.  Note the lengths will stay the same, and duplicate values will be equal.\"\n          >\n            <HorizontalGroup>\n              <InlineSwitch\n                label=\"Labels\"\n                id=\"randomize-labels\"\n                showLabel={true}\n                value={Boolean(randomize.labels)}\n                onChange={() => service.onToggleRandomize('labels')}\n              />\n              <InlineSwitch\n                label=\"Field names\"\n                id=\"randomize-field-names\"\n                showLabel={true}\n                value={Boolean(randomize.names)}\n                onChange={() => service.onToggleRandomize('names')}\n              />\n              <InlineSwitch\n                label=\"String values\"\n                id=\"randomize-string-values\"\n                showLabel={true}\n                value={Boolean(randomize.values)}\n                onChange={() => service.onToggleRandomize('values')}\n              />\n            </HorizontalGroup>\n          </Field>\n\n          <Field label=\"Support snapshot\" description={`Panel: ${panelTitle}`}>\n            <Stack>\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Dashboard ({snapshotSize})\n              </Button>\n              <ClipboardButton\n                icon=\"github\"\n                getText={service.onGetMarkdownForClipboard}\n                title=\"Copy a complete GitHub comment to the clipboard\"\n              >\n                Copy to clipboard\n              </ClipboardButton>\n              <Button\n                onClick={service.onPreviewDashboard}\n                variant=\"secondary\"\n                title=\"Open support snapshot dashboard in a new tab\"\n              >\n                Preview\n              </Button>\n            </Stack>\n          </Field>\n\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <>\n                <iframe\n                  title=\"Support snapshot preview\"\n                  src={`${config.appUrl}dashboard/new?orgId=${contextSrv.user.orgId}&kiosk&${snapshotUpdate}`}\n                  width=\"100%\"\n                  height={height - 100}\n                  frameBorder=\"0\"\n                  style={{\n                    display: iframeLoading ? 'block' : 'none',\n                    marginTop: 16,\n                  }}\n                />\n                {!iframeLoading && <div>&nbsp;</div>}\n              </>\n            )}\n          </AutoSizer>\n        </>\n      )}\n    </Drawer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    flex-grow: 1;\n    height: 100%;\n    overflow: scroll;\n  `,\n  field: css`\n    width: 100%;\n  `,\n  opts: css`\n    display: flex;\n    display: flex;\n    width: 100%;\n    flex-grow: 0;\n    align-items: center;\n    justify-content: flex-end;\n\n    button {\n      margin-left: 8px;\n    }\n  `,\n});\n","import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { DataQueryError, LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  error?: DataQueryError;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      .getData(options)\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withFieldConfig, options.withTransforms]);\n\n  return {\n    data: latestData,\n    error: latestData && latestData.error,\n    isLoading: latestData ? latestData.state === LoadingState.Loading : true,\n    hasSeries: latestData ? !!latestData.series : false,\n  };\n};\n","import React from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\n\ninterface InspectMetadataTabProps {\n  data: PanelData;\n  metadataDatasource?: DataSourceApi;\n}\nexport const InspectMetadataTab = ({ data, metadataDatasource }: InspectMetadataTabProps) => {\n  if (!metadataDatasource || !metadataDatasource.components?.MetadataInspector) {\n    return <Trans i18nKey=\"dashboard.inspect-meta.no-inspector\">No Metadata Inspector</Trans>;\n  }\n  return <metadataDatasource.components.MetadataInspector datasource={metadataDatasource} data={data.series} />;\n};\n","import React, { useState } from 'react';\n\nimport { CoreApp, DataSourceApi, formattedValueToString, getValueFormat, PanelData, PanelPlugin } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}: Props) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const error = data?.error;\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const panelTitle = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text') || 'Panel';\n  const title = t('dashboard.inspect.title', 'Inspect: {{panelTitle}}', { panelTitle });\n\n  return (\n    <Drawer\n      title={title}\n      subtitle={data && formatStats(data)}\n      width=\"50%\"\n      onClose={onClose}\n      expandable\n      scrollableContent\n      tabs={\n        <TabsBar>\n          {tabs.map((tab, index) => {\n            return (\n              <Tab\n                key={`${tab.value}-${index}`}\n                label={tab.label}\n                active={tab.value === activeTab}\n                onChangeTab={() => setCurrentTab(tab.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          panel={panel}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab error={error} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && (\n        <QueryInspector panel={panel} data={data.series} onRefreshQuery={() => panel.refresh()} />\n      )}\n    </Drawer>\n  );\n};\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n  if (!request) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return (\n    <Trans i18nKey=\"dashboard.inspect.subtitle\">\n      {{ queryCount }} queries with total query time of {{ formatted }}\n    </Trans>\n  );\n}\n","import { useMemo } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataQueryError, DataSourceApi, PanelData, PanelPlugin } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { t } from 'app/core/internationalization';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { supportsDataQuery } from '../PanelEditor/utils';\n\nimport { PanelInspectActionSupplier } from './PanelInspectActions';\n\n/**\n * Given PanelData return first data source supporting metadata inspector\n */\nexport const useDatasourceMetadata = (data?: PanelData) => {\n  const state = useAsync(async () => {\n    const targets = data?.request?.targets || [];\n\n    if (data && data.series && targets.length) {\n      for (const frame of data.series) {\n        if (frame.meta && frame.meta.custom) {\n          // get data source from first query\n          const dataSource = await getDataSourceSrv().get(targets[0].datasource);\n          if (dataSource && dataSource.components?.MetadataInspector) {\n            return dataSource;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }, [data]);\n  return state.value;\n};\n\n/**\n * Configures tabs for PanelInspector\n */\nexport const useInspectTabs = (\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  plugin: PanelPlugin | undefined | null,\n  error?: DataQueryError,\n  metaDs?: DataSourceApi\n) => {\n  return useMemo(() => {\n    const tabs = [];\n    if (supportsDataQuery(plugin)) {\n      tabs.push({ label: t('dashboard.inspect.data-tab', 'Data'), value: InspectTab.Data });\n      tabs.push({ label: t('dashboard.inspect.stats-tab', 'Stats'), value: InspectTab.Stats });\n    }\n\n    if (metaDs) {\n      tabs.push({ label: t('dashboard.inspect.meta-tab', 'Meta Data'), value: InspectTab.Meta });\n    }\n\n    tabs.push({ label: t('dashboard.inspect.json-tab', 'JSON'), value: InspectTab.JSON });\n\n    if (error && error.message) {\n      tabs.push({ label: t('dashboard.inspect.error-tab', 'Error'), value: InspectTab.Error });\n    }\n\n    // This is a quick internal hack to allow custom actions in inspect\n    // For 8.1, something like this should be exposed through grafana/runtime\n    const supplier = (window as any).grafanaPanelInspectActionSupplier as PanelInspectActionSupplier;\n    if (supplier && supplier.getActions(panel)?.length) {\n      tabs.push({\n        label: t('dashboard.inspect.actions-tab', 'Actions'),\n        value: InspectTab.Actions,\n      });\n    }\n\n    if (dashboard.meta.canEdit && supportsDataQuery(plugin)) {\n      tabs.push({ label: t('dashboard.inspect.query-tab', 'Query'), value: InspectTab.Query });\n    }\n    return tabs;\n  }, [panel, plugin, metaDs, dashboard, error]);\n};\n","import React, { useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { HelpWizard } from '../HelpWizard/HelpWizard';\nimport { usePanelLatestData } from '../PanelEditor/usePanelLatestData';\n\nimport { InspectContent } from './InspectContent';\nimport { useDatasourceMetadata, useInspectTabs } from './hooks';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nconst PanelInspectorUnconnected = ({ panel, dashboard, plugin }: Props) => {\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: false,\n    withFieldConfig: true,\n  });\n\n  const location = useLocation();\n  const { data, isLoading, error } = usePanelLatestData(panel, dataOptions, true);\n  const metaDs = useDatasourceMetadata(data);\n  const tabs = useInspectTabs(panel, dashboard, plugin, error, metaDs);\n  const defaultTab = new URLSearchParams(location.search).get('inspectTab') as InspectTab;\n\n  const onClose = () => {\n    locationService.partial({\n      inspect: null,\n      inspectTab: null,\n    });\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  if (defaultTab === InspectTab.Help) {\n    return <HelpWizard panel={panel} plugin={plugin} onClose={onClose} />;\n  }\n\n  return (\n    <InspectContent\n      dashboard={dashboard}\n      panel={panel}\n      plugin={plugin}\n      defaultTab={defaultTab}\n      tabs={tabs}\n      data={data}\n      isDataLoading={isLoading}\n      dataOptions={dataOptions}\n      onDataOptionsChange={setDataOptions}\n      metadataDatasource={metaDs}\n      onClose={onClose}\n    />\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = getPanelStateForModel(state, props.panel);\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import React, { FunctionComponent, PropsWithChildren, ReactElement, useMemo } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\n\nimport { variableAdapters } from '../adapters';\nimport { VariableHide, VariableModel } from '../types';\n\ninterface Props {\n  variable: VariableModel;\n  readOnly?: boolean;\n}\n\nexport const PickerRenderer: FunctionComponent<Props> = (props) => {\n  const PickerToRender = useMemo(() => variableAdapters.get(props.variable.type).picker, [props.variable]);\n\n  if (!props.variable) {\n    return <div>Couldn&apos;t load variable</div>;\n  }\n\n  return (\n    <div className=\"gf-form\">\n      <PickerLabel variable={props.variable} />\n      {props.variable.hide !== VariableHide.hideVariable && PickerToRender && (\n        <PickerToRender variable={props.variable} readOnly={props.readOnly ?? false} />\n      )}\n    </div>\n  );\n};\n\nfunction PickerLabel({ variable }: PropsWithChildren<Props>): ReactElement | null {\n  const labelOrName = useMemo(() => variable.label || variable.name, [variable]);\n\n  if (variable.hide !== VariableHide.dontHide) {\n    return null;\n  }\n\n  const elementId = `var-${variable.id}`;\n  if (variable.description) {\n    return (\n      <Tooltip content={variable.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { PickerRenderer } from '../../../variables/pickers/PickerRenderer';\nimport { VariableHide, VariableModel } from '../../../variables/types';\n\ninterface Props {\n  variables: VariableModel[];\n  readOnly?: boolean;\n}\n\nexport const SubMenuItems: FunctionComponent<Props> = ({ variables, readOnly }) => {\n  const [visibleVariables, setVisibleVariables] = useState<VariableModel[]>([]);\n\n  useEffect(() => {\n    setVisibleVariables(variables.filter((state) => state.hide !== VariableHide.hideVariable));\n  }, [variables]);\n\n  if (visibleVariables.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleVariables.map((variable) => {\n        return (\n          <div\n            key={variable.id}\n            className=\"submenu-item gf-form-inline\"\n            data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}\n          >\n            <PickerRenderer variable={variable} readOnly={readOnly} />\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import store from 'app/core/store';\n\nexport function saveSectionOpenState(id: string, isOpen: boolean) {\n  store.set(`panel-edit-section-${id}`, isOpen ? 'true' : 'false');\n}\n\nexport function getSectionOpenState(id: string, defaultValue: boolean) {\n  return store.getBool(`panel-edit-section-${id}`, defaultValue);\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { PanelPlugin, PanelPluginMeta } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { PanelModel, DashboardModel } from '../../state';\n\nimport { getSectionOpenState, saveSectionOpenState } from './state/utils';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => ({\n  angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n});\n\nconst mapDispatchToProps = { changePanelPlugin };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class AngularPanelOptionsUnconnected extends PureComponent<Props> {\n  element?: HTMLElement | null;\n  angularOptions?: AngularComponent | null;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.loadAngularOptions();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.plugin !== prevProps.plugin ||\n      this.props.angularPanelComponent !== prevProps.angularPanelComponent\n    ) {\n      this.cleanUpAngularOptions();\n    }\n\n    this.loadAngularOptions();\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularOptions();\n  }\n\n  cleanUpAngularOptions() {\n    if (this.angularOptions) {\n      this.angularOptions.destroy();\n      this.angularOptions = null;\n    }\n  }\n\n  loadAngularOptions() {\n    const { panel, angularPanelComponent, changePanelPlugin } = this.props;\n\n    if (!this.element || !angularPanelComponent || this.angularOptions) {\n      return;\n    }\n\n    const scope = angularPanelComponent.getScope();\n\n    // When full page reloading in edit mode the angular panel has on fully compiled and instantiated yet\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    panelCtrl.initEditMode();\n    panelCtrl.onPluginTypeChange = (plugin: PanelPluginMeta) => {\n      changePanelPlugin({ panel, pluginId: plugin.id });\n    };\n\n    let template = '';\n    for (let i = 0; i < panelCtrl.editorTabs.length; i++) {\n      const tab = panelCtrl.editorTabs[i];\n      tab.isOpen = getSectionOpenState(tab.title, i === 0);\n\n      template += `\n      <div class=\"panel-options-group\" ng-cloak>\n        <div class=\"panel-options-group__header\" ng-click=\"toggleOptionGroup(${i})\" aria-label=\"${tab.title} section\">\n          <div class=\"panel-options-group__icon\">\n            <icon name=\"ctrl.editorTabs[${i}].isOpen ? 'angle-down' : 'angle-right'\"></icon>\n          </div>\n          <div class=\"panel-options-group__title\">${tab.title}</div>\n        </div>\n        <div class=\"panel-options-group__body\" ng-if=\"ctrl.editorTabs[${i}].isOpen\">\n          <panel-editor-tab editor-tab=\"ctrl.editorTabs[${i}]\" ctrl=\"ctrl\"></panel-editor-tab>\n        </div>\n      </div>\n      `;\n    }\n\n    const loader = getAngularLoader();\n    const scopeProps = {\n      ctrl: panelCtrl,\n      toggleOptionGroup: (index: number) => {\n        const tab = panelCtrl.editorTabs[index];\n        tab.isOpen = !tab.isOpen;\n        saveSectionOpenState(tab.title, Boolean(tab.isOpen));\n      },\n    };\n\n    this.angularOptions = loader.load(this.element, scopeProps, template);\n    this.angularOptions.digest();\n  }\n\n  render() {\n    return <div ref={(elem) => (this.element = elem)} />;\n  }\n}\n\nexport const AngularPanelOptions = connect(mapStateToProps, mapDispatchToProps)(AngularPanelOptionsUnconnected);\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport {\n  DynamicConfigValue,\n  FieldConfigOptionsRegistry,\n  FieldConfigProperty,\n  FieldOverrideContext,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { Counter, Field, HorizontalGroup, IconButton, Label, useStyles2 } from '@grafana/ui';\n\nimport { OptionsPaneCategory } from './OptionsPaneCategory';\n\ninterface DynamicConfigValueEditorProps {\n  property: DynamicConfigValue;\n  registry: FieldConfigOptionsRegistry;\n  onChange: (value: DynamicConfigValue) => void;\n  context: FieldOverrideContext;\n  onRemove: () => void;\n  isSystemOverride?: boolean;\n  searchQuery: string;\n}\n\nexport const DynamicConfigValueEditor: React.FC<DynamicConfigValueEditorProps> = ({\n  property,\n  context,\n  registry,\n  onChange,\n  onRemove,\n  isSystemOverride,\n  searchQuery,\n}) => {\n  const styles = useStyles2(getStyles);\n  const item = registry?.getIfExists(property.id);\n\n  if (!item) {\n    return null;\n  }\n\n  const isCollapsible =\n    Array.isArray(property.value) ||\n    property.id === FieldConfigProperty.Thresholds ||\n    property.id === FieldConfigProperty.Links ||\n    property.id === FieldConfigProperty.Mappings;\n\n  const labelCategory = item.category?.filter((c) => c !== item.name);\n  let editor;\n\n  /* eslint-disable react/display-name */\n  const renderLabel =\n    (includeDescription = true, includeCounter = false) =>\n    (isExpanded = false) =>\n      (\n        <HorizontalGroup justify=\"space-between\">\n          <Label category={labelCategory} description={includeDescription ? item.description : undefined}>\n            <Highlighter\n              textToHighlight={item.name}\n              searchWords={[searchQuery]}\n              highlightClassName={'search-fragment-highlight'}\n            />\n            {!isExpanded && includeCounter && item.getItemsCount && (\n              <Counter value={item.getItemsCount(property.value)} />\n            )}\n          </Label>\n          {!isSystemOverride && (\n            <div>\n              <IconButton name=\"times\" onClick={onRemove} />\n            </div>\n          )}\n        </HorizontalGroup>\n      );\n  /* eslint-enable react/display-name */\n\n  if (isCollapsible) {\n    editor = (\n      <OptionsPaneCategory\n        id={item.name}\n        renderTitle={renderLabel(false, true)}\n        className={css`\n          padding-left: 0;\n          padding-right: 0;\n        `}\n        isNested\n        isOpenDefault={property.value !== undefined}\n      >\n        <item.override\n          value={property.value}\n          onChange={(value) => {\n            onChange(value);\n          }}\n          item={item}\n          context={context}\n        />\n      </OptionsPaneCategory>\n    );\n  } else {\n    editor = (\n      <div>\n        <Field label={renderLabel()()} description={item.description}>\n          <item.override\n            value={property.value}\n            onChange={(value) => {\n              onChange(value);\n            }}\n            item={item}\n            context={context}\n          />\n        </Field>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cx(\n        isCollapsible && styles.collapsibleOverrideEditor,\n        !isCollapsible && 'dynamicConfigValueEditor--nonCollapsible'\n      )}\n    >\n      {editor}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapsibleOverrideEditor: css`\n      label: collapsibleOverrideEditor;\n      & + .dynamicConfigValueEditor--nonCollapsible {\n        margin-top: ${theme.spacing(1)};\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { FieldConfigOptionsRegistry, GrafanaTheme2, ConfigOverrideRule } from '@grafana/data';\nimport { HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { FieldMatcherUIRegistryItem } from '@grafana/ui/src/components/MatchersUI/types';\n\ninterface OverrideCategoryTitleProps {\n  isExpanded: boolean;\n  registry: FieldConfigOptionsRegistry;\n  matcherUi: FieldMatcherUIRegistryItem<any>;\n  override: ConfigOverrideRule;\n  overrideName: string;\n  onOverrideRemove: () => void;\n}\nexport const OverrideCategoryTitle: FC<OverrideCategoryTitleProps> = ({\n  isExpanded,\n  registry,\n  matcherUi,\n  overrideName,\n  override,\n  onOverrideRemove,\n}) => {\n  const styles = useStyles2(getStyles);\n  const properties = override.properties.map((p) => registry.getIfExists(p.id)).filter((prop) => !!prop);\n  const propertyNames = properties.map((p) => p?.name).join(', ');\n  const matcherOptions = matcherUi.optionsToLabel(override.matcher.options);\n\n  return (\n    <div>\n      <HorizontalGroup justify=\"space-between\">\n        <div>{overrideName}</div>\n        <IconButton name=\"trash-alt\" onClick={onOverrideRemove} title=\"Remove override\" />\n      </HorizontalGroup>\n      {!isExpanded && (\n        <div className={styles.overrideDetails}>\n          <div className={styles.options} title={matcherOptions}>\n            {matcherOptions} <Icon name=\"angle-right\" /> {propertyNames}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nOverrideCategoryTitle.displayName = 'OverrideTitle';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    matcherUi: css`\n      padding: ${theme.spacing(1)};\n    `,\n    propertyPickerWrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    overrideDetails: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      font-weight: ${theme.typography.fontWeightRegular};\n    `,\n    options: css`\n      overflow: hidden;\n      padding-right: ${theme.spacing(4)};\n    `,\n    unknownLabel: css`\n      margin-bottom: 0;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\n\nimport {\n  FieldConfigOptionsRegistry,\n  SelectableValue,\n  isSystemOverride as isSystemOverrideGuard,\n  VariableSuggestionsScope,\n  DynamicConfigValue,\n  ConfigOverrideRule,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { fieldMatchersUI, useStyles2, ValuePicker } from '@grafana/ui';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { DynamicConfigValueEditor } from './DynamicConfigValueEditor';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OverrideCategoryTitle } from './OverrideCategoryTitle';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getFieldOverrideCategories(\n  props: OptionPaneRenderProps,\n  searchQuery: string\n): OptionsPaneCategoryDescriptor[] {\n  const categories: OptionsPaneCategoryDescriptor[] = [];\n  const currentFieldConfig = props.panel.fieldConfig;\n  const registry = props.plugin.fieldConfigRegistry;\n  const data = props.data?.series ?? [];\n\n  if (registry.isEmpty()) {\n    return [];\n  }\n\n  const onOverrideChange = (index: number, override: ConfigOverrideRule) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides[index] = override;\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideRemove = (overrideIndex: number) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides.splice(overrideIndex, 1);\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideAdd = (value: SelectableValue<string>) => {\n    props.onFieldConfigsChange({\n      ...currentFieldConfig,\n      overrides: [\n        ...currentFieldConfig.overrides,\n        {\n          matcher: {\n            id: value.value!,\n          },\n          properties: [],\n        },\n      ],\n    });\n  };\n\n  const context = {\n    data,\n    getSuggestions: (scope?: VariableSuggestionsScope) => getDataLinksVariableSuggestions(data, scope),\n    isOverride: true,\n  };\n\n  /**\n   * Main loop through all override rules\n   */\n  for (let idx = 0; idx < currentFieldConfig.overrides.length; idx++) {\n    const override = currentFieldConfig.overrides[idx];\n    const overrideName = `Override ${idx + 1}`;\n    const matcherUi = fieldMatchersUI.get(override.matcher.id);\n    const configPropertiesOptions = getOverrideProperties(registry);\n    const isSystemOverride = isSystemOverrideGuard(override);\n    // A way to force open new override categories\n    const forceOpen = override.properties.length === 0 ? 1 : 0;\n\n    const category = new OptionsPaneCategoryDescriptor({\n      title: overrideName,\n      id: overrideName,\n      forceOpen,\n      renderTitle: function renderOverrideTitle(isExpanded: boolean) {\n        return (\n          <OverrideCategoryTitle\n            override={override}\n            isExpanded={isExpanded}\n            registry={registry}\n            overrideName={overrideName}\n            matcherUi={matcherUi}\n            onOverrideRemove={() => onOverrideRemove(idx)}\n          />\n        );\n      },\n    });\n\n    const onMatcherConfigChange = (options: any) => {\n      override.matcher.options = options;\n      onOverrideChange(idx, override);\n    };\n\n    const onDynamicConfigValueAdd = (o: ConfigOverrideRule, value: SelectableValue<string>) => {\n      const registryItem = registry.get(value.value!);\n      const propertyConfig: DynamicConfigValue = {\n        id: registryItem.id,\n        value: registryItem.defaultValue,\n      };\n\n      if (override.properties) {\n        o.properties.push(propertyConfig);\n      } else {\n        o.properties = [propertyConfig];\n      }\n\n      onOverrideChange(idx, o);\n    };\n\n    /**\n     * Add override matcher UI element\n     */\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: matcherUi.name,\n        render: function renderMatcherUI() {\n          return (\n            <matcherUi.component\n              id={`${matcherUi.matcher.id}-${idx}`}\n              matcher={matcherUi.matcher}\n              data={props.data?.series ?? []}\n              options={override.matcher.options}\n              onChange={onMatcherConfigChange}\n            />\n          );\n        },\n      })\n    );\n\n    /**\n     * Loop through all override properties\n     */\n    for (let propIdx = 0; propIdx < override.properties.length; propIdx++) {\n      const property = override.properties[propIdx];\n      const registryItemForProperty = registry.getIfExists(property.id);\n\n      if (!registryItemForProperty) {\n        continue;\n      }\n\n      const onPropertyChange = (value: any) => {\n        override.properties[propIdx].value = value;\n        onOverrideChange(idx, override);\n      };\n\n      const onPropertyRemove = () => {\n        override.properties.splice(propIdx, 1);\n        onOverrideChange(idx, override);\n      };\n\n      /**\n       * Add override property item\n       */\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: registryItemForProperty.name,\n          skipField: true,\n          render: function renderPropertyEditor() {\n            return (\n              <DynamicConfigValueEditor\n                key={`${property.id}/${propIdx}`}\n                isSystemOverride={isSystemOverride}\n                onChange={onPropertyChange}\n                onRemove={onPropertyRemove}\n                property={property}\n                registry={registry}\n                context={context}\n                searchQuery={searchQuery}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    /**\n     * Add button that adds new overrides\n     */\n    if (!isSystemOverride && override.matcher.options) {\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: '----------',\n          skipField: true,\n          render: function renderAddPropertyButton() {\n            return (\n              <ValuePicker\n                key=\"Add override property\"\n                label=\"Add override property\"\n                variant=\"secondary\"\n                isFullWidth={true}\n                icon=\"plus\"\n                menuPlacement=\"auto\"\n                options={configPropertiesOptions}\n                onChange={(v) => onDynamicConfigValueAdd(override, v)}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    categories.push(category);\n  }\n\n  categories.push(\n    new OptionsPaneCategoryDescriptor({\n      title: 'add button',\n      id: 'add button',\n      customRender: function renderAddButton() {\n        return (\n          <AddOverrideButtonContainer key=\"Add override\">\n            <ValuePicker\n              icon=\"plus\"\n              label=\"Add field override\"\n              variant=\"secondary\"\n              menuPlacement=\"auto\"\n              isFullWidth={true}\n              size=\"md\"\n              options={fieldMatchersUI\n                .list()\n                .filter((o) => !o.excludeFromPicker)\n                .map<SelectableValue<string>>((i) => ({ label: i.name, value: i.id, description: i.description }))}\n              onChange={(value) => onOverrideAdd(value)}\n            />\n          </AddOverrideButtonContainer>\n        );\n      },\n    })\n  );\n\n  return categories;\n}\n\nfunction getOverrideProperties(registry: FieldConfigOptionsRegistry) {\n  return registry\n    .list()\n    .filter((o) => !o.hideFromOverrides)\n    .map((item) => {\n      let label = item.name;\n      if (item.category) {\n        label = [...item.category, item.name].join(' > ');\n      }\n      return {\n        label,\n        value: item.id,\n        description: item.description,\n      };\n    });\n}\n\nfunction AddOverrideButtonContainer({ children }: { children: React.ReactNode }) {\n  const styles = useStyles2(getBorderTopStyles);\n  return <div className={styles}>{children}</div>;\n}\n\nfunction getBorderTopStyles(theme: GrafanaTheme2) {\n  return css({\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(2)}`,\n    display: 'flex',\n  });\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DateTimeInput, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PanelModelWithLibraryPanel } from '../../types';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  formatDate?: (dateString: DateTimeInput, format?: string) => string;\n}\n\nexport const LibraryPanelInformation = ({ panel, formatDate }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const meta = panel.libraryPanel?.meta;\n  if (!meta) {\n    return null;\n  }\n\n  return (\n    <div className={styles.info}>\n      <div className={styles.libraryPanelInfo}>\n        {`Used on ${meta.connectedDashboards} `}\n        {meta.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}\n      </div>\n      <div className={styles.libraryPanelInfo}>\n        Last edited on {formatDate?.(meta.updated, 'L') ?? meta.updated} by\n        {meta.updatedBy.avatarUrl && (\n          <img\n            width=\"22\"\n            height=\"22\"\n            className={styles.userAvatar}\n            src={meta.updatedBy.avatarUrl}\n            alt={`Avatar for ${meta.updatedBy.name}`}\n          />\n        )}\n        {meta.updatedBy.name}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    info: css`\n      line-height: 1;\n    `,\n    libraryPanelInfo: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    `,\n    userAvatar: css`\n      border-radius: 50%;\n      box-sizing: content-box;\n      width: 22px;\n      height: 22px;\n      padding-left: ${theme.spacing(1)};\n      padding-right: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Input } from '@grafana/ui';\nimport { LibraryPanelInformation } from 'app/features/library-panels/components/LibraryPanelInfo/LibraryPanelInfo';\n\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\n\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getLibraryPanelOptionsCategory(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor {\n  const { panel, onPanelConfigChange, dashboard } = props;\n  const descriptor = new OptionsPaneCategoryDescriptor({\n    title: 'Library panel options',\n    id: 'Library panel options',\n    isOpenDefault: true,\n  });\n\n  if (isPanelModelLibraryPanel(panel)) {\n    descriptor\n      .addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Name',\n          value: panel.libraryPanel.name,\n          popularRank: 1,\n          render: function renderName() {\n            return (\n              <Input\n                id=\"LibraryPanelFrameName\"\n                defaultValue={panel.libraryPanel.name}\n                onBlur={(e) =>\n                  onPanelConfigChange('libraryPanel', { ...panel.libraryPanel, name: e.currentTarget.value })\n                }\n              />\n            );\n          },\n        })\n      )\n      .addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Information',\n          render: function renderLibraryPanelInformation() {\n            return <LibraryPanelInformation panel={panel} formatDate={dashboard.formatDate} />;\n          },\n        })\n      );\n  }\n\n  return descriptor;\n}\n","import React from 'react';\n\nimport { DataLinksInlineEditor, Input, RadioButtonGroup, Select, Switch, TextArea } from '@grafana/ui';\nimport { getPanelLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { RepeatRowSelect } from '../RepeatRowSelect/RepeatRowSelect';\n\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getPanelFrameCategory(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor {\n  const { panel, onPanelConfigChange } = props;\n  const descriptor = new OptionsPaneCategoryDescriptor({\n    title: 'Panel options',\n    id: 'Panel options',\n    isOpenDefault: true,\n  });\n\n  return descriptor\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Title',\n        value: panel.title,\n        popularRank: 1,\n        render: function renderTitle() {\n          return (\n            <Input\n              id=\"PanelFrameTitle\"\n              defaultValue={panel.title}\n              onBlur={(e) => onPanelConfigChange('title', e.currentTarget.value)}\n            />\n          );\n        },\n      })\n    )\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Description',\n        description: panel.description,\n        value: panel.description,\n        render: function renderDescription() {\n          return (\n            <TextArea\n              id=\"description-text-area\"\n              defaultValue={panel.description}\n              onBlur={(e) => onPanelConfigChange('description', e.currentTarget.value)}\n            />\n          );\n        },\n      })\n    )\n    .addItem(\n      new OptionsPaneItemDescriptor({\n        title: 'Transparent background',\n        render: function renderTransparent() {\n          return (\n            <Switch\n              value={panel.transparent}\n              id=\"transparent-background\"\n              onChange={(e) => onPanelConfigChange('transparent', e.currentTarget.checked)}\n            />\n          );\n        },\n      })\n    )\n    .addCategory(\n      new OptionsPaneCategoryDescriptor({\n        title: 'Panel links',\n        id: 'Panel links',\n        isOpenDefault: false,\n        itemsCount: panel.links?.length,\n      }).addItem(\n        new OptionsPaneItemDescriptor({\n          title: 'Panel links',\n          render: function renderLinks() {\n            return (\n              <DataLinksInlineEditor\n                links={panel.links}\n                onChange={(links) => onPanelConfigChange('links', links)}\n                getSuggestions={getPanelLinksVariableSuggestions}\n                data={[]}\n              />\n            );\n          },\n        })\n      )\n    )\n    .addCategory(\n      new OptionsPaneCategoryDescriptor({\n        title: 'Repeat options',\n        id: 'Repeat options',\n        isOpenDefault: false,\n      })\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Repeat by variable',\n            description:\n              'Repeat this panel for each value in the selected variable. This is not visible while in edit mode. You need to go back to dashboard and then update the variable or reload the dashboard.',\n            render: function renderRepeatOptions() {\n              return (\n                <RepeatRowSelect\n                  id=\"repeat-by-variable-select\"\n                  repeat={panel.repeat}\n                  onChange={(value?: string | null) => {\n                    onPanelConfigChange('repeat', value);\n                  }}\n                />\n              );\n            },\n          })\n        )\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Repeat direction',\n            showIf: () => !!panel.repeat,\n            render: function renderRepeatOptions() {\n              const directionOptions = [\n                { label: 'Horizontal', value: 'h' },\n                { label: 'Vertical', value: 'v' },\n              ];\n\n              return (\n                <RadioButtonGroup\n                  options={directionOptions}\n                  value={panel.repeatDirection || 'h'}\n                  onChange={(value) => onPanelConfigChange('repeatDirection', value)}\n                />\n              );\n            },\n          })\n        )\n        .addItem(\n          new OptionsPaneItemDescriptor({\n            title: 'Max per row',\n            showIf: () => Boolean(panel.repeat && panel.repeatDirection === 'h'),\n            render: function renderOption() {\n              const maxPerRowOptions = [2, 3, 4, 6, 8, 12].map((value) => ({ label: value.toString(), value }));\n              return (\n                <Select\n                  options={maxPerRowOptions}\n                  value={panel.maxPerRow}\n                  onChange={(value) => onPanelConfigChange('maxPerRow', value.value)}\n                />\n              );\n            },\n          })\n        )\n    );\n}\n","import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from '../OptionsPaneItemDescriptor';\n\nexport interface OptionSearchResults {\n  optionHits: OptionsPaneItemDescriptor[];\n  overrideHits: OptionsPaneCategoryDescriptor[];\n  totalCount: number;\n}\n\nexport class OptionSearchEngine {\n  constructor(\n    private categories: OptionsPaneCategoryDescriptor[],\n    private overrides: OptionsPaneCategoryDescriptor[]\n  ) {}\n\n  search(query: string): OptionSearchResults {\n    const searchRegex = new RegExp(query, 'i');\n\n    const optionHits = this.collectHits(this.categories, searchRegex, []);\n    const sortedHits = optionHits.sort(compareHit).map((x) => x.item);\n\n    const overrideHits = this.collectHits(this.overrides, searchRegex, []);\n    const sortedOverridesHits = overrideHits.sort(compareHit).map((x) => x.item);\n\n    return {\n      optionHits: sortedHits,\n      overrideHits: this.buildOverrideHitCategories(sortedOverridesHits),\n      totalCount: this.getAllOptionsCount(this.categories),\n    };\n  }\n\n  private collectHits(categories: OptionsPaneCategoryDescriptor[], searchRegex: RegExp, hits: SearchHit[]) {\n    for (const category of categories) {\n      const categoryNameMatch = searchRegex.test(category.props.title);\n\n      for (const item of category.items) {\n        if (searchRegex.test(item.props.title)) {\n          hits.push({ item: item, rank: 1 });\n          continue;\n        }\n        if (item.props.description && searchRegex.test(item.props.description)) {\n          hits.push({ item: item, rank: 2 });\n          continue;\n        }\n        if (categoryNameMatch) {\n          hits.push({ item: item, rank: 3 });\n        }\n      }\n\n      if (category.categories.length > 0) {\n        this.collectHits(category.categories, searchRegex, hits);\n      }\n    }\n\n    return hits;\n  }\n\n  getAllOptionsCount(categories: OptionsPaneCategoryDescriptor[]) {\n    let total = 0;\n\n    for (const category of categories) {\n      total += category.items.length;\n\n      if (category.categories.length > 0) {\n        total += this.getAllOptionsCount(category.categories);\n      }\n    }\n\n    return total;\n  }\n\n  buildOverrideHitCategories(hits: OptionsPaneItemDescriptor[]): OptionsPaneCategoryDescriptor[] {\n    const categories: Record<string, OptionsPaneCategoryDescriptor> = {};\n\n    for (const hit of hits) {\n      let category = categories[hit.parent.props.title];\n\n      if (!category) {\n        category = categories[hit.parent.props.title] = new OptionsPaneCategoryDescriptor(hit.parent.props);\n        // Add matcher item as that should always be shown\n        category.addItem(hit.parent.items[0]);\n      }\n\n      // Prevent adding matcher twice since it's automatically added for every override\n      if (category.items[0].props.title !== hit.props.title) {\n        category.addItem(hit);\n      }\n    }\n\n    return Object.values(categories);\n  }\n}\n\ninterface SearchHit {\n  item: OptionsPaneItemDescriptor;\n  rank: number;\n}\n\nfunction compareHit(left: SearchHit, right: SearchHit) {\n  return left.rank - right.rank;\n}\n","import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from '../OptionsPaneItemDescriptor';\n\nexport function getRecentOptions(allOptions: OptionsPaneCategoryDescriptor[]) {\n  const popularOptions: OptionsPaneItemDescriptor[] = [];\n\n  for (const category of allOptions) {\n    for (const item of category.items) {\n      if (item.props.title === 'Unit') {\n        item.props.popularRank = 2;\n      }\n      if (item.props.title === 'Min') {\n        item.props.popularRank = 3;\n      }\n      if (item.props.title === 'Max') {\n        item.props.popularRank = 4;\n      }\n      if (item.props.title === 'Display name') {\n        item.props.popularRank = 5;\n      }\n\n      if (item.props.popularRank) {\n        popularOptions.push(item);\n      }\n    }\n  }\n\n  return popularOptions.sort((left, right) => left.props.popularRank! - right.props.popularRank!);\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\n\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\n\nimport { AngularPanelOptions } from './AngularPanelOptions';\nimport { OptionsPaneCategory } from './OptionsPaneCategory';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { getFieldOverrideCategories } from './getFieldOverrideElements';\nimport { getLibraryPanelOptionsCategory } from './getLibraryPanelOptions';\nimport { getPanelFrameCategory } from './getPanelFrameOptions';\nimport { getVisualizationOptions } from './getVisualizationOptions';\nimport { OptionSearchEngine } from './state/OptionSearchEngine';\nimport { getRecentOptions } from './state/getRecentOptions';\nimport { OptionPaneRenderProps } from './types';\n\nexport const OptionsPaneOptions: React.FC<OptionPaneRenderProps> = (props) => {\n  const { plugin, dashboard, panel } = props;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [listMode, setListMode] = useState(OptionFilter.All);\n  const styles = useStyles2(getStyles);\n\n  const [panelFrameOptions, vizOptions, libraryPanelOptions] = useMemo(\n    () => [getPanelFrameCategory(props), getVisualizationOptions(props), getLibraryPanelOptionsCategory(props)],\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panel.configRev, props.data, props.instanceState, searchQuery]\n  );\n\n  const justOverrides = useMemo(\n    () => getFieldOverrideCategories(props, searchQuery),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panel.configRev, props.data, props.instanceState, searchQuery]\n  );\n\n  const mainBoxElements: React.ReactNode[] = [];\n  const isSearching = searchQuery.length > 0;\n  const optionRadioFilters = useMemo(getOptionRadioFilters, []);\n\n  const allOptions = isPanelModelLibraryPanel(panel)\n    ? [libraryPanelOptions, panelFrameOptions, ...vizOptions]\n    : [panelFrameOptions, ...vizOptions];\n\n  if (isSearching) {\n    mainBoxElements.push(renderSearchHits(allOptions, justOverrides, searchQuery));\n\n    // If searching for angular panel, then we need to add notice that results are limited\n    if (props.plugin.angularPanelCtrl) {\n      mainBoxElements.push(\n        <div className={styles.searchNotice} key=\"Search notice\">\n          This is an old visualization type that does not support searching all options.\n        </div>\n      );\n    }\n  } else {\n    switch (listMode) {\n      case OptionFilter.All:\n        if (isPanelModelLibraryPanel(panel)) {\n          // Library Panel options first\n          mainBoxElements.push(libraryPanelOptions.render());\n        }\n        // Panel frame options second\n        mainBoxElements.push(panelFrameOptions.render());\n        // If angular add those options next\n        if (props.plugin.angularPanelCtrl) {\n          mainBoxElements.push(\n            <AngularPanelOptions plugin={plugin} dashboard={dashboard} panel={panel} key=\"AngularOptions\" />\n          );\n        }\n        // Then add all panel and field defaults\n        for (const item of vizOptions) {\n          mainBoxElements.push(item.render());\n        }\n\n        for (const item of justOverrides) {\n          mainBoxElements.push(item.render());\n        }\n        break;\n      case OptionFilter.Overrides:\n        for (const override of justOverrides) {\n          mainBoxElements.push(override.render());\n        }\n        break;\n      case OptionFilter.Recent:\n        mainBoxElements.push(\n          <OptionsPaneCategory id=\"Recent options\" title=\"Recent options\" key=\"Recent options\" forceOpen={1}>\n            {getRecentOptions(allOptions).map((item) => item.render())}\n          </OptionsPaneCategory>\n        );\n        break;\n    }\n  }\n\n  // only show radio buttons if we are searching or if the plugin has field config\n  const showSearchRadioButtons = !isSearching && !plugin.fieldConfigRegistry.isEmpty();\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.formRow}>\n          <FilterInput width={0} value={searchQuery} onChange={setSearchQuery} placeholder={'Search options'} />\n        </div>\n        {showSearchRadioButtons && (\n          <div className={styles.formRow}>\n            <RadioButtonGroup options={optionRadioFilters} value={listMode} fullWidth onChange={setListMode} />\n          </div>\n        )}\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.mainBox}>{mainBoxElements}</div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nfunction getOptionRadioFilters(): Array<SelectableValue<OptionFilter>> {\n  return [\n    { label: OptionFilter.All, value: OptionFilter.All },\n    { label: OptionFilter.Overrides, value: OptionFilter.Overrides },\n  ];\n}\n\nexport enum OptionFilter {\n  All = 'All',\n  Overrides = 'Overrides',\n  Recent = 'Recent',\n}\n\nfunction renderSearchHits(\n  allOptions: OptionsPaneCategoryDescriptor[],\n  overrides: OptionsPaneCategoryDescriptor[],\n  searchQuery: string\n) {\n  const engine = new OptionSearchEngine(allOptions, overrides);\n  const { optionHits, totalCount, overrideHits } = engine.search(searchQuery);\n\n  return (\n    <div key=\"search results\">\n      <OptionsPaneCategory\n        id=\"Found options\"\n        title={`Matched ${optionHits.length}/${totalCount} options`}\n        key=\"Normal options\"\n        forceOpen={1}\n      >\n        {optionHits.map((hit) => hit.render(searchQuery))}\n      </OptionsPaneCategory>\n      {overrideHits.map((override) => override.render(searchQuery))}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 0;\n\n    .search-fragment-highlight {\n      color: ${theme.colors.warning.text};\n      background: transparent;\n    }\n  `,\n  searchBox: css`\n    display: flex;\n    flex-direction: column;\n    min-height: 0;\n  `,\n  formRow: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  formBox: css`\n    padding: ${theme.spacing(1)};\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.components.panel.borderColor};\n    border-top-left-radius: ${theme.shape.borderRadius(1.5)};\n    border-bottom: none;\n  `,\n  closeButton: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  searchHits: css`\n    padding: ${theme.spacing(1, 1, 0, 1)};\n  `,\n  scrollWrapper: css`\n    flex-grow: 1;\n    min-height: 0;\n  `,\n  searchNotice: css`\n    font-size: ${theme.typography.size.sm};\n    color: ${theme.colors.text.secondary};\n    padding: ${theme.spacing(1)};\n    text-align: center;\n  `,\n  mainBox: css`\n    background: ${theme.colors.background.primary};\n    border: 1px solid ${theme.components.panel.borderColor};\n    border-top: none;\n    flex-grow: 1;\n  `,\n});\n","import { PanelPlugin } from '@grafana/data';\nimport { StoreState } from 'app/types';\n\nimport { getPanelPluginNotFound } from '../../panel/components/PanelPluginError';\n\nexport const getPanelPluginWithFallback =\n  (panelType: string) =>\n  (state: StoreState): PanelPlugin => {\n    const plugin = state.plugins.panels[panelType];\n    return plugin || getPanelPluginNotFound(`Panel plugin not found (${panelType})`, true);\n  };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, ButtonGroup } from '@grafana/ui';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { PanelModel } from '../../state';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { updatePanelEditorUIState } from './state/actions';\nimport { toggleVizPicker } from './state/reducers';\n\ntype Props = {\n  panel: PanelModel;\n};\n\nexport const VisualizationButton = ({ panel }: Props) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const isPanelOptionsVisible = useSelector((state) => state.panelEditor.ui.isPanelOptionsVisible);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n\n  const onToggleOpen = () => {\n    dispatch(toggleVizPicker(!isVizPickerOpen));\n  };\n\n  const onToggleOptionsPane = () => {\n    dispatch(updatePanelEditorUIState({ isPanelOptionsVisible: !isPanelOptionsVisible }));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ButtonGroup>\n        <ToolbarButton\n          className={styles.vizButton}\n          tooltip=\"Click to change visualization\"\n          imgSrc={plugin.meta.info.logos.small}\n          isOpen={isVizPickerOpen}\n          onClick={onToggleOpen}\n          aria-label={selectors.components.PanelEditor.toggleVizPicker}\n          variant=\"canvas\"\n          fullWidth\n        >\n          {plugin.meta.name}\n        </ToolbarButton>\n        <ToolbarButton\n          tooltip={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n          icon={isPanelOptionsVisible ? 'angle-right' : 'angle-left'}\n          onClick={onToggleOptionsPane}\n          variant=\"canvas\"\n          aria-label={selectors.components.PanelEditor.toggleVizOptions}\n        />\n      </ButtonGroup>\n    </div>\n  );\n};\n\nVisualizationButton.displayName = 'VisualizationTab';\n\nconst styles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  vizButton: css`\n    text-align: left;\n  `,\n};\n","import React from 'react';\n\nimport { ConfirmModal } from '@grafana/ui';\n\nimport { PanelModel } from '../../../dashboard/state';\nimport { isPanelModelLibraryPanel } from '../../guard';\n\nexport interface ChangeLibraryPanelModalProps {\n  panel: PanelModel;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const ChangeLibraryPanelModal = ({ onConfirm, onDismiss, panel }: ChangeLibraryPanelModalProps): JSX.Element => {\n  const isLibraryPanel = isPanelModelLibraryPanel(panel);\n  const title = `${isLibraryPanel ? 'Changing' : 'Replace with'} library panel`;\n  const body = `${\n    isLibraryPanel ? 'Changing' : 'Replacing with a'\n  } library panel will remove any changes since last save.`;\n  return (\n    <ConfirmModal\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      confirmText={isLibraryPanel ? 'Change' : 'Replace'}\n      title={title}\n      body={body}\n      dismissText=\"Cancel\"\n      isOpen={true}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useCallback, useState } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { useDispatch } from 'app/types';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n}\n\nexport const PanelLibraryOptionsGroup: FC<Props> = ({ panel, searchQuery }) => {\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => setShowingAddPanelModal(true);\n  const onDismissChangeToPanel = () => setChangeToPanel(undefined);\n\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            Create new library panel\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={setChangeToPanel}\n          showSecondaryActions\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderUid={dashboard?.meta.folderUid}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst styles = {\n  libraryPanelsView: css`\n    width: 100%;\n  `,\n};\n","import {\n  PanelData,\n  VisualizationSuggestion,\n  VisualizationSuggestionsBuilder,\n  PanelModel,\n  VisualizationSuggestionScore,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { importPanelPlugin } from 'app/features/plugins/importPanelPlugin';\n\nexport const panelsToCheckFirst = [\n  'timeseries',\n  'barchart',\n  'gauge',\n  'stat',\n  'piechart',\n  'bargauge',\n  'table',\n  'state-timeline',\n  'status-history',\n  'logs',\n  'candlestick',\n];\n\nexport async function getAllSuggestions(data?: PanelData, panel?: PanelModel): Promise<VisualizationSuggestion[]> {\n  const builder = new VisualizationSuggestionsBuilder(data, panel);\n\n  for (const pluginId of panelsToCheckFirst) {\n    const plugin = await importPanelPlugin(pluginId);\n    const supplier = plugin.getSuggestionsSupplier();\n\n    if (supplier) {\n      supplier.getSuggestionsForData(builder);\n    }\n  }\n\n  const list = builder.getList();\n\n  if (builder.dataSummary.fieldCount === 0) {\n    for (const plugin of Object.values(config.panels)) {\n      if (!plugin.skipDataQuery || plugin.hideFromList) {\n        continue;\n      }\n\n      list.push({\n        name: plugin.name,\n        pluginId: plugin.id,\n        description: plugin.info.description,\n        cardOptions: {\n          imgSrc: plugin.info.logos.small,\n        },\n      });\n    }\n  }\n\n  return list.sort((a, b) => {\n    return (b.score ?? VisualizationSuggestionScore.OK) - (a.score ?? VisualizationSuggestionScore.OK);\n  });\n}\n","import { css, cx } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2, PanelData, VisualizationSuggestion } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PanelRenderer } from '../PanelRenderer';\n\nimport { VizTypeChangeDetails } from './types';\n\nexport interface Props {\n  data: PanelData;\n  width: number;\n  suggestion: VisualizationSuggestion;\n  onChange: (details: VizTypeChangeDetails) => void;\n}\n\nexport function VisualizationSuggestionCard({ data, suggestion, onChange, width }: Props) {\n  const styles = useStyles2(getStyles);\n  const { innerStyles, outerStyles, renderWidth, renderHeight } = getPreviewDimensionsAndStyles(width);\n  const cardOptions = suggestion.cardOptions ?? {};\n\n  const commonButtonProps = {\n    'aria-label': suggestion.name,\n    className: styles.vizBox,\n    'data-testid': selectors.components.VisualizationPreview.card(suggestion.name),\n    style: outerStyles,\n    onClick: () => {\n      onChange({\n        pluginId: suggestion.pluginId,\n        options: suggestion.options,\n        fieldConfig: suggestion.fieldConfig,\n      });\n    },\n  };\n\n  if (cardOptions.imgSrc) {\n    return (\n      <Tooltip content={suggestion.description ?? suggestion.name}>\n        <button {...commonButtonProps} className={cx(styles.vizBox, styles.imgBox)}>\n          <div className={styles.name}>{suggestion.name}</div>\n          <img className={styles.img} src={cardOptions.imgSrc} alt={suggestion.name} />\n        </button>\n      </Tooltip>\n    );\n  }\n\n  let preview = suggestion;\n  if (suggestion.cardOptions?.previewModifier) {\n    preview = cloneDeep(suggestion);\n    suggestion.cardOptions.previewModifier(preview);\n  }\n\n  return (\n    <button {...commonButtonProps}>\n      <Tooltip content={suggestion.name}>\n        <div style={innerStyles} className={styles.renderContainer}>\n          <PanelRenderer\n            title=\"\"\n            data={data}\n            pluginId={suggestion.pluginId}\n            width={renderWidth}\n            height={renderHeight}\n            options={preview.options}\n            fieldConfig={preview.fieldConfig}\n          />\n          <div className={styles.hoverPane} />\n        </div>\n      </Tooltip>\n    </button>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hoverPane: css({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      borderRadius: theme.spacing(2),\n      bottom: 0,\n    }),\n    vizBox: css`\n      position: relative;\n      background: none;\n      border-radius: ${theme.shape.borderRadius(1)};\n      cursor: pointer;\n      border: 1px solid ${theme.colors.border.medium};\n\n      transition: ${theme.transitions.create(['background'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.background.secondary};\n      }\n    `,\n    imgBox: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      justify-self: center;\n      color: ${theme.colors.text.primary};\n      width: 100%;\n      display: flex;\n\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    `,\n    name: css`\n      padding-bottom: ${theme.spacing(0.5)};\n      margin-top: ${theme.spacing(-1)};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      white-space: nowrap;\n      overflow: hidden;\n      color: ${theme.colors.text.secondary};\n      font-weight: ${theme.typography.fontWeightMedium};\n      text-overflow: ellipsis;\n    `,\n    img: css`\n      max-width: ${theme.spacing(8)};\n      max-height: ${theme.spacing(8)};\n    `,\n    renderContainer: css`\n      position: absolute;\n      transform-origin: left top;\n      top: 6px;\n      left: 6px;\n    `,\n  };\n};\n\ninterface PreviewDimensionsAndStyles {\n  renderWidth: number;\n  renderHeight: number;\n  innerStyles: CSSProperties;\n  outerStyles: CSSProperties;\n}\n\nfunction getPreviewDimensionsAndStyles(width: number): PreviewDimensionsAndStyles {\n  const aspectRatio = 16 / 10;\n  const showWidth = width;\n  const showHeight = width * (1 / aspectRatio);\n  const renderWidth = 350;\n  const renderHeight = renderWidth * (1 / aspectRatio);\n\n  const padding = 6;\n  const widthFactor = (showWidth - padding * 2) / renderWidth;\n  const heightFactor = (showHeight - padding * 2) / renderHeight;\n\n  return {\n    renderHeight,\n    renderWidth,\n    outerStyles: { width: showWidth, height: showHeight },\n    innerStyles: {\n      width: renderWidth,\n      height: renderHeight,\n      transform: `scale(${widthFactor}, ${heightFactor})`,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2, PanelData, PanelPluginMeta, PanelModel, VisualizationSuggestion } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { getAllSuggestions } from '../../state/getAllSuggestions';\n\nimport { VisualizationSuggestionCard } from './VisualizationSuggestionCard';\nimport { VizTypeChangeDetails } from './types';\n\nexport interface Props {\n  current: PanelPluginMeta;\n  data?: PanelData;\n  panel?: PanelModel;\n  onChange: (options: VizTypeChangeDetails) => void;\n  searchQuery: string;\n  onClose: () => void;\n}\n\nexport function VisualizationSuggestions({ onChange, data, panel, searchQuery }: Props) {\n  const styles = useStyles2(getStyles);\n  const { value: suggestions } = useAsync(() => getAllSuggestions(data, panel), [data, panel]);\n  const filteredSuggestions = filterSuggestionsBySearch(searchQuery, suggestions);\n\n  return (\n    <AutoSizer disableHeight style={{ width: '100%', height: '100%' }}>\n      {({ width }) => {\n        if (!width) {\n          return null;\n        }\n\n        const columnCount = Math.floor(width / 170);\n        const spaceBetween = 8 * (columnCount! - 1);\n        const previewWidth = (width - spaceBetween) / columnCount!;\n\n        return (\n          <div>\n            <div className={styles.filterRow}>\n              <div className={styles.infoText}>Based on current data</div>\n            </div>\n            <div className={styles.grid} style={{ gridTemplateColumns: `repeat(auto-fill, ${previewWidth - 1}px)` }}>\n              {filteredSuggestions.map((suggestion, index) => (\n                <VisualizationSuggestionCard\n                  key={index}\n                  data={data!}\n                  suggestion={suggestion}\n                  onChange={onChange}\n                  width={previewWidth}\n                />\n              ))}\n              {searchQuery && filteredSuggestions.length === 0 && (\n                <div className={styles.infoText}>No results matched your query</div>\n              )}\n            </div>\n          </div>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nfunction filterSuggestionsBySearch(\n  searchQuery: string,\n  suggestions?: VisualizationSuggestion[]\n): VisualizationSuggestion[] {\n  if (!searchQuery || !suggestions) {\n    return suggestions || [];\n  }\n\n  const regex = new RegExp(searchQuery, 'i');\n\n  return suggestions.filter((s) => regex.test(s.name) || regex.test(s.pluginId));\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      ...theme.typography.h5,\n      margin: theme.spacing(0, 0.5, 1),\n    }),\n    filterRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      alignItems: 'center',\n      paddingBottom: '8px',\n    }),\n    infoText: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      fontStyle: 'italic',\n    }),\n    grid: css({\n      display: 'grid',\n      gridGap: theme.spacing(1),\n      gridTemplateColumns: 'repeat(auto-fill, 144px)',\n      marginBottom: theme.spacing(1),\n      justifyContent: 'space-evenly',\n    }),\n  };\n};\n","import React, { MouseEventHandler } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\n\nimport { PanelTypeCard } from './PanelTypeCard';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  onClick: MouseEventHandler<HTMLDivElement>;\n  disabled: boolean;\n}\n\nexport const VizTypePickerPlugin = ({ isCurrent, plugin, onClick, disabled }: Props) => {\n  return (\n    <PanelTypeCard\n      title={plugin.name}\n      plugin={plugin}\n      description={plugin.info.description}\n      onClick={onClick}\n      isCurrent={isCurrent}\n      disabled={disabled}\n      showBadge={true}\n    />\n  );\n};\n\nVizTypePickerPlugin.displayName = 'VizTypePickerPlugin';\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, PanelData, PanelPluginMeta } from '@grafana/data';\nimport { EmptySearchResult, useStyles2 } from '@grafana/ui';\n\nimport { filterPluginList, getAllPanelPluginMeta } from '../../state/util';\n\nimport { VizTypePickerPlugin } from './VizTypePickerPlugin';\nimport { VizTypeChangeDetails } from './types';\n\nexport interface Props {\n  current: PanelPluginMeta;\n  data?: PanelData;\n  onChange: (options: VizTypeChangeDetails) => void;\n  searchQuery: string;\n  onClose: () => void;\n}\n\nexport function VizTypePicker({ searchQuery, onChange, current, data }: Props) {\n  const styles = useStyles2(getStyles);\n  const pluginsList: PanelPluginMeta[] = useMemo(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n\n  const filteredPluginTypes = useMemo((): PanelPluginMeta[] => {\n    return filterPluginList(pluginsList, searchQuery, current);\n  }, [current, pluginsList, searchQuery]);\n\n  if (filteredPluginTypes.length === 0) {\n    return <EmptySearchResult>Could not find anything matching your query</EmptySearchResult>;\n  }\n\n  return (\n    <div className={styles.grid}>\n      {filteredPluginTypes.map((plugin, index) => (\n        <VizTypePickerPlugin\n          disabled={false}\n          key={plugin.id}\n          isCurrent={plugin.id === current.id}\n          plugin={plugin}\n          onClick={(e) =>\n            onChange({\n              pluginId: plugin.id,\n              withModKey: Boolean(e.metaKey || e.ctrlKey || e.altKey),\n            })\n          }\n        />\n      ))}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    grid: css`\n      max-width: 100%;\n      display: grid;\n      grid-gap: ${theme.spacing(0.5)};\n    `,\n    heading: css({\n      ...theme.typography.h5,\n      margin: theme.spacing(0, 0.5, 1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useCallback, useRef, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { Field } from '@grafana/ui/src/components/Forms/Field';\nimport { LS_VISUALIZATION_SELECT_TAB_KEY } from 'app/core/constants';\nimport { PanelLibraryOptionsGroup } from 'app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup';\nimport { VisualizationSuggestions } from 'app/features/panel/components/VizTypePicker/VisualizationSuggestions';\nimport { VizTypeChangeDetails } from 'app/features/panel/components/VizTypePicker/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { VizTypePicker } from '../../../panel/components/VizTypePicker/VizTypePicker';\nimport { changePanelPlugin } from '../../../panel/state/actions';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { toggleVizPicker } from './state/reducers';\nimport { VisualizationSelectPaneTab } from './types';\n\ninterface Props {\n  panel: PanelModel;\n  data?: PanelData;\n}\n\nexport const VisualizationSelectPane: FC<Props> = ({ panel, data }) => {\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const [searchQuery, setSearchQuery] = useState('');\n  const [listMode, setListMode] = useLocalStorage(\n    LS_VISUALIZATION_SELECT_TAB_KEY,\n    VisualizationSelectPaneTab.Visualizations\n  );\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  const onVizChange = useCallback(\n    (pluginChange: VizTypeChangeDetails) => {\n      dispatch(changePanelPlugin({ panel: panel, ...pluginChange }));\n\n      // close viz picker unless a mod key is pressed while clicking\n      if (!pluginChange.withModKey) {\n        dispatch(toggleVizPicker(false));\n      }\n    },\n    [dispatch, panel]\n  );\n\n  const onCloseVizPicker = () => {\n    dispatch(toggleVizPicker(false));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  const radioOptions: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Visualizations', value: VisualizationSelectPaneTab.Visualizations },\n    { label: 'Suggestions', value: VisualizationSelectPaneTab.Suggestions },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  return (\n    <div className={styles.openWrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.searchRow}>\n          <FilterInput\n            value={searchQuery}\n            onChange={setSearchQuery}\n            ref={searchRef}\n            autoFocus={true}\n            placeholder=\"Search for...\"\n          />\n          <Button\n            title=\"Close\"\n            variant=\"secondary\"\n            icon=\"angle-up\"\n            className={styles.closeButton}\n            aria-label={selectors.components.PanelEditor.toggleVizPicker}\n            onClick={onCloseVizPicker}\n          />\n        </div>\n        <Field className={styles.customFieldMargin}>\n          <RadioButtonGroup options={radioOptions} value={listMode} onChange={setListMode} fullWidth />\n        </Field>\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.scrollContent}>\n            {listMode === VisualizationSelectPaneTab.Visualizations && (\n              <VizTypePicker\n                current={plugin.meta}\n                onChange={onVizChange}\n                searchQuery={searchQuery}\n                data={data}\n                onClose={() => {}}\n              />\n            )}\n            {listMode === VisualizationSelectPaneTab.Suggestions && (\n              <VisualizationSuggestions\n                current={plugin.meta}\n                onChange={onVizChange}\n                searchQuery={searchQuery}\n                panel={panel}\n                data={data}\n                onClose={() => {}}\n              />\n            )}\n            {listMode === VisualizationSelectPaneTab.LibraryPanels && (\n              <PanelLibraryOptionsGroup searchQuery={searchQuery} panel={panel} key=\"Panel Library\" />\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nVisualizationSelectPane.displayName = 'VisualizationSelectPane';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css`\n      color: ${theme.v1.palette.gray33};\n    `,\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 0;\n      height: 100%;\n    `,\n    vizButton: css`\n      text-align: left;\n    `,\n    scrollWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    scrollContent: css`\n      padding: ${theme.spacing(1)};\n    `,\n    openWrapper: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 100%;\n      height: 100%;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n    `,\n    searchRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    closeButton: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    customFieldMargin: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    formBox: css`\n      padding: ${theme.spacing(1)};\n      padding-bottom: 0;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { useSelector } from 'app/types';\n\nimport { OptionsPaneOptions } from './OptionsPaneOptions';\nimport { VisualizationButton } from './VisualizationButton';\nimport { VisualizationSelectPane } from './VisualizationSelectPane';\nimport { OptionPaneRenderProps } from './types';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport const OptionsPane: React.FC<OptionPaneRenderProps> = ({\n  plugin,\n  panel,\n  onFieldConfigsChange,\n  onPanelOptionsChanged,\n  onPanelConfigChange,\n  dashboard,\n  instanceState,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, true);\n\n  return (\n    <div className={styles.wrapper} aria-label={selectors.components.PanelEditor.OptionsPane.content}>\n      {!isVizPickerOpen && (\n        <>\n          <div className={styles.vizButtonWrapper}>\n            <VisualizationButton panel={panel} />\n          </div>\n          <div className={styles.optionsWrapper}>\n            <OptionsPaneOptions\n              panel={panel}\n              dashboard={dashboard}\n              plugin={plugin}\n              instanceState={instanceState}\n              data={data}\n              onFieldConfigsChange={onFieldConfigsChange}\n              onPanelOptionsChanged={onPanelOptionsChanged}\n              onPanelConfigChange={onPanelConfigChange}\n            />\n          </div>\n        </>\n      )}\n      {isVizPickerOpen && <VisualizationSelectPane panel={panel} data={data} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      height: 100%;\n      width: 100%;\n      display: flex;\n      flex: 1 1 0;\n      flex-direction: column;\n      padding: 0;\n    `,\n    optionsWrapper: css`\n      flex-grow: 1;\n      min-height: 0;\n    `,\n    vizButtonWrapper: css`\n      padding: 0 ${theme.spacing(2, 2)} 0;\n    `,\n    legacyOptions: css`\n      label: legacy-options;\n      .panel-options-grid {\n        display: flex;\n        flex-direction: column;\n      }\n      .panel-options-group {\n        margin-bottom: 0;\n      }\n      .panel-options-group__body {\n        padding: ${theme.spacing(2)} 0;\n      }\n\n      .section {\n        display: block;\n        margin: ${theme.spacing(2)} 0;\n\n        &:first-child {\n          margin-top: 0;\n        }\n      }\n    `,\n  };\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\n\nimport PanelHeaderCorner from '../../dashgrid/PanelHeader/PanelHeaderCorner';\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport interface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n      panel.runAllPanelQueries({\n        dashboardId: dashboard.id,\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={data?.error?.message} />\n          <PanelRenderer\n            title=\"Raw data\"\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n","import React, { useCallback } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { Layout } from '@grafana/ui/src/components/Layout/Layout';\n\nimport { PanelEditorTabId } from './types';\n\nexport interface Props {\n  message: string;\n}\n\nexport function PanelNotSupported({ message }: Props): JSX.Element {\n  const onBackToQueries = useCallback(() => {\n    locationService.partial({ tab: PanelEditorTabId.Query });\n  }, []);\n\n  return (\n    <Layout justify=\"center\" style={{ marginTop: '100px' }}>\n      <VerticalGroup spacing=\"md\">\n        <h2>{message}</h2>\n        <div>\n          <Button size=\"md\" variant=\"secondary\" icon=\"arrow-left\" onClick={onBackToQueries}>\n            Go back to Queries\n          </Button>\n        </div>\n      </VerticalGroup>\n    </Layout>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Icon, ConfirmButton, Button } from '@grafana/ui';\n\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\n\nimport alertDef from './state/alertDef';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panelId: number;\n  onRefresh: () => void;\n}\n\ninterface State {\n  stateHistoryItems: any[];\n}\n\nclass StateHistory extends PureComponent<Props, State> {\n  state: State = {\n    stateHistoryItems: [],\n  };\n\n  componentDidMount(): void {\n    const { dashboard, panelId } = this.props;\n\n    getBackendSrv()\n      .get(\n        `/api/annotations?dashboardId=${dashboard.id}&panelId=${panelId}&limit=50&type=alert`,\n        {},\n        `state-history-${dashboard.id}-${panelId}`\n      )\n      .then((data) => {\n        const items = data.map((item: any) => {\n          return {\n            stateModel: alertDef.getStateDisplayModel(item.newState),\n            time: dashboard.formatDate(item.time, 'MMM D, YYYY HH:mm:ss'),\n            info: alertDef.getAlertAnnotationInfo(item),\n          };\n        });\n\n        this.setState({\n          stateHistoryItems: items,\n        });\n      });\n  }\n\n  clearHistory = async () => {\n    const { dashboard, panelId, onRefresh } = this.props;\n\n    await getBackendSrv().post('/api/annotations/mass-delete', {\n      dashboardId: dashboard.id,\n      panelId: panelId,\n    });\n\n    this.setState({ stateHistoryItems: [] });\n    onRefresh();\n  };\n\n  render() {\n    const { stateHistoryItems } = this.state;\n\n    return (\n      <div>\n        {stateHistoryItems.length > 0 && (\n          <div className=\"p-b-1\">\n            <span className=\"muted\">Last 50 state changes</span>\n            <ConfirmButton onConfirm={this.clearHistory} confirmVariant=\"destructive\" confirmText=\"Clear\">\n              <Button\n                className={css`\n                  direction: ltr;\n                `}\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n              >\n                Clear history\n              </Button>\n            </ConfirmButton>\n          </div>\n        )}\n        <ol className=\"alert-rule-list\">\n          {stateHistoryItems.length > 0 ? (\n            stateHistoryItems.map((item, index) => {\n              return (\n                <li className=\"alert-rule-item\" key={`${item.time}-${index}`}>\n                  <div className={`alert-rule-item__icon ${item.stateModel.stateClass}`}>\n                    <Icon name={item.stateModel.iconClass} size=\"xl\" />\n                  </div>\n                  <div className=\"alert-rule-item__body\">\n                    <div className=\"alert-rule-item__header\">\n                      <p className=\"alert-rule-item__name\">{item.alertName}</p>\n                      <div className=\"alert-rule-item__text\">\n                        <span className={`${item.stateModel.stateClass}`}>{item.stateModel.text}</span>\n                      </div>\n                    </div>\n                    {item.info}\n                  </div>\n                  <div className=\"alert-rule-item__time\">{item.time}</div>\n                </li>\n              );\n            })\n          ) : (\n            <i>No state changes recorded</i>\n          )}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default StateHistory;\n","import React, { PureComponent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder, JSONFormatter, Icon, HorizontalGroup, ClipboardButton } from '@grafana/ui';\n\nimport { DashboardModel, PanelModel } from '../dashboard/state';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface State {\n  isLoading: boolean;\n  allNodesExpanded: boolean | null;\n  testRuleResponse: {};\n}\n\nexport class TestRuleResult extends PureComponent<Props, State> {\n  readonly state: State = {\n    isLoading: false,\n    allNodesExpanded: null,\n    testRuleResponse: {},\n  };\n\n  formattedJson: any;\n  clipboard: any;\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const { dashboard, panel } = this.props;\n\n    // dashboard save model\n    const model = dashboard.getSaveModelClone();\n\n    // now replace panel to get current edits\n    model.panels = model.panels.map((dashPanel) => {\n      return dashPanel.id === panel.id ? panel.getSaveModel() : dashPanel;\n    });\n\n    const payload = { dashboard: model, panelId: panel.id };\n\n    this.setState({ isLoading: true });\n    const testRuleResponse = await getBackendSrv().post(`/api/alerts/test`, payload);\n    this.setState({ isLoading: false, testRuleResponse });\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <Icon name=\"minus-circle\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <Icon name=\"plus-circle\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { testRuleResponse, isLoading } = this.state;\n\n    if (isLoading === true) {\n      return <LoadingPlaceholder text=\"Evaluating rule\" />;\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <HorizontalGroup spacing=\"md\">\n            <div onClick={this.onToggleExpand}>{this.renderExpandCollapse()}</div>\n            <ClipboardButton getText={this.getTextForClipboard} icon=\"copy\">\n              Copy to Clipboard\n            </ClipboardButton>\n          </HorizontalGroup>\n        </div>\n\n        <JSONFormatter json={testRuleResponse} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, config, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Container, CustomScrollbar, HorizontalGroup, Modal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { AppNotificationSeverity, StoreState } from 'app/types';\n\nimport { AlertState } from '../../plugins/datasource/alertmanager/types';\nimport { PanelNotSupported } from '../dashboard/components/PanelEditor/PanelNotSupported';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { PanelModel } from '../dashboard/state/PanelModel';\n\nimport StateHistory from './StateHistory';\nimport { TestRuleResult } from './TestRuleResult';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\n\ninterface AngularPanelController {\n  _enableAlert: () => void;\n  alertState: AlertState | null;\n  render: () => void;\n  refresh: () => void;\n}\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface ConnectedProps {\n  angularPanelComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  validationMessage: string;\n  showStateHistory: boolean;\n  showDeleteConfirmation: boolean;\n  showTestRule: boolean;\n}\n\nclass UnConnectedAlertTab extends PureComponent<Props, State> {\n  element?: HTMLDivElement | null;\n  component?: AngularComponent;\n  panelCtrl?: AngularPanelController;\n\n  state: State = {\n    validationMessage: '',\n    showStateHistory: false,\n    showDeleteConfirmation: false,\n    showTestRule: false,\n  };\n\n  async componentDidMount() {\n    if (config.angularSupportEnabled) {\n      await import(/* webpackChunkName: \"AlertTabCtrl\" */ 'app/features/alerting/AlertTabCtrl');\n      this.loadAlertTab();\n    } else {\n      // TODO probably need to migrate AlertTab to react\n      alert('Angular support disabled, legacy alerting cannot function without angular support');\n    }\n  }\n\n  onAngularPanelUpdated = () => {\n    this.forceUpdate();\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    this.loadAlertTab();\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const { panel, angularPanelComponent } = this.props;\n\n    if (!this.element || this.component) {\n      return;\n    }\n\n    if (angularPanelComponent) {\n      const scope = angularPanelComponent.getScope();\n\n      // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n      if (!scope.$$childHead) {\n        setTimeout(() => {\n          this.forceUpdate();\n        });\n        return;\n      }\n\n      this.panelCtrl = scope.$$childHead.ctrl;\n    } else {\n      this.panelCtrl = this.getReactAlertPanelCtrl();\n    }\n\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n    const scopeProps = { ctrl: this.panelCtrl };\n\n    this.component = loader.load(this.element, scopeProps, template);\n\n    const validationMessage = await getAlertingValidationMessage(\n      panel.transformations,\n      panel.targets,\n      getDataSourceSrv(),\n      panel.datasource\n    );\n\n    if (validationMessage) {\n      this.setState({ validationMessage });\n    }\n  }\n\n  getReactAlertPanelCtrl() {\n    return {\n      panel: this.props.panel,\n      events: new EventBusSrv(),\n      render: () => {\n        this.props.panel.render();\n      },\n    } as any;\n  }\n\n  onAddAlert = () => {\n    this.panelCtrl?._enableAlert();\n    this.component?.digest();\n    this.forceUpdate();\n  };\n\n  onToggleModal = (prop: keyof Omit<State, 'validationMessage'>) => {\n    const value = this.state[prop];\n    this.setState({ ...this.state, [prop]: !value });\n  };\n\n  renderTestRule = () => {\n    if (!this.state.showTestRule) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showTestRule');\n\n    return (\n      <Modal isOpen={true} icon=\"bug\" title=\"Testing rule\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <TestRuleResult panel={panel} dashboard={dashboard} />\n      </Modal>\n    );\n  };\n\n  renderDeleteConfirmation = () => {\n    if (!this.state.showDeleteConfirmation) {\n      return null;\n    }\n\n    const { panel } = this.props;\n    const onDismiss = () => this.onToggleModal('showDeleteConfirmation');\n\n    return (\n      <ConfirmModal\n        isOpen={true}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={\n          <div>\n            Are you sure you want to delete this alert rule?\n            <br />\n            <small>You need to save dashboard for the delete to take effect.</small>\n          </div>\n        }\n        confirmText=\"Delete alert\"\n        onDismiss={onDismiss}\n        onConfirm={() => {\n          delete panel.alert;\n          panel.thresholds = [];\n          if (this.panelCtrl) {\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n          }\n          this.component?.digest();\n          onDismiss();\n        }}\n      />\n    );\n  };\n\n  renderStateHistory = () => {\n    if (!this.state.showStateHistory) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showStateHistory');\n\n    return (\n      <Modal isOpen={true} icon=\"history\" title=\"State history\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <StateHistory dashboard={dashboard} panelId={panel.id} onRefresh={() => this.panelCtrl?.refresh()} />\n      </Modal>\n    );\n  };\n\n  render() {\n    const { alert, transformations } = this.props.panel;\n    const { validationMessage } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validationMessage) {\n      return <PanelNotSupported message={validationMessage} />;\n    }\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'bell' as const,\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert',\n    };\n\n    return (\n      <>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <Container padding=\"md\">\n            <div aria-label={selectors.components.AlertTab.content}>\n              {alert && hasTransformations && (\n                <Alert\n                  severity={AppNotificationSeverity.Error}\n                  title=\"Transformations are not supported in alert queries\"\n                />\n              )}\n\n              <div ref={(element) => (this.element = element)} />\n              {alert && (\n                <HorizontalGroup>\n                  <Button onClick={() => this.onToggleModal('showStateHistory')} variant=\"secondary\">\n                    State history\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showTestRule')} variant=\"secondary\">\n                    Test rule\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showDeleteConfirmation')} variant=\"destructive\">\n                    Delete\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!alert && !validationMessage && <EmptyListCTA {...model} />}\n            </div>\n          </Container>\n        </CustomScrollbar>\n\n        {this.renderTestRule()}\n        {this.renderDeleteConfirmation()}\n        {this.renderStateHistory()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {};\n\nexport const AlertTab = connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab);\n","import React, { FC } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useSelector } from 'app/types';\n\nimport { LogMessages } from '../../Analytics';\nimport { panelToRuleFormValues } from '../../utils/rule-form';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  className?: string;\n}\n\nexport const NewRuleFromPanelButton: FC<Props> = ({ dashboard, panel, className }) => {\n  const templating = useSelector((state) => {\n    return state.templating;\n  });\n\n  const location = useLocation();\n\n  const { loading, value: formValues } = useAsync(\n    () => panelToRuleFormValues(panel, dashboard),\n    // Templating variables are required to update formValues on each variable's change. It's used implicitly by the templating engine\n    [panel, dashboard, templating]\n  );\n\n  if (loading) {\n    return <Button disabled={true}>Create alert rule from this panel</Button>;\n  }\n\n  if (!formValues) {\n    return (\n      <Alert severity=\"info\" title=\"No alerting capable query found\">\n        Cannot create alerts from this panel because no query to an alerting capable datasource is found.\n      </Alert>\n    );\n  }\n\n  const ruleFormUrl = urlUtil.renderUrl('alerting/new', {\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  return (\n    <LinkButton\n      icon=\"bell\"\n      onClick={() => logInfo(LogMessages.alertRuleFromPanel)}\n      href={ruleFormUrl}\n      className={className}\n      data-testid=\"create-alert-rule-button\"\n    >\n      Create alert rule from this panel\n    </LinkButton>\n  );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\nimport { useEffect, useMemo } from 'react';\n\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useDispatch } from 'app/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { Annotation, RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface Options {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n\n  poll?: boolean;\n}\n\ninterface ReturnBag {\n  errors: SerializedError[];\n  rules: CombinedRule[];\n\n  loading?: boolean;\n}\n\nexport function usePanelCombinedRules({ dashboard, panel, poll = false }: Options): ReturnBag {\n  const dispatch = useDispatch();\n\n  const promRuleRequest =\n    useUnifiedAlertingSelector((state) => state.promRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n  const rulerRuleRequest =\n    useUnifiedAlertingSelector((state) => state.rulerRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    const fetch = () => {\n      dispatch(\n        fetchPromRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n      dispatch(\n        fetchRulerRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n    };\n    fetch();\n    if (poll) {\n      const interval = setInterval(fetch, RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n    return () => {};\n  }, [dispatch, poll, panel.id, dashboard.uid]);\n\n  const loading = promRuleRequest.loading || rulerRuleRequest.loading;\n  const errors = [promRuleRequest.error, rulerRuleRequest.error].filter(\n    (err: SerializedError | undefined): err is SerializedError => !!err\n  );\n\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n\n  // filter out rules that are relevant to this panel\n  const rules = useMemo(\n    (): CombinedRule[] =>\n      combinedNamespaces\n        .flatMap((ns) => ns.groups)\n        .flatMap((group) => group.rules)\n        .filter(\n          (rule) =>\n            rule.annotations[Annotation.dashboardUID] === dashboard.uid &&\n            rule.annotations[Annotation.panelID] === String(panel.id)\n        ),\n    [combinedNamespaces, dashboard, panel]\n  );\n\n  return {\n    rules,\n    errors,\n    loading,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent: FC<Props> = ({ dashboard, panel }) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboard,\n    panel,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert title=\"Errors loading rules\" severity=\"error\">\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {error.message || 'Unknown error.'}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text=\"Loading rules...\" />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!!dashboard.uid && (\n        <>\n          <p>There are no alert rules linked to this panel.</p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {!dashboard.uid && !!dashboard.meta.canSave && (\n        <Alert severity=\"info\" title=\"Dashboard not saved\">\n          Dashboard must be saved before alerts can be added.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  innerWrapper: css`\n    padding: ${theme.spacing(2)};\n  `,\n  noRulesWrapper: css`\n    margin: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(3)};\n  `,\n});\n","import { config } from '@grafana/runtime';\n\nimport { AlertTab } from './AlertTab';\nimport { PanelAlertTabContent } from './unified/PanelAlertTabContent';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.unifiedAlertingEnabled ? PanelAlertTabContent : AlertTab;\n","import React, { FC } from 'react';\n\nimport { Tab, TabProps } from '@grafana/ui/src/components/Tabs/Tab';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\n\ninterface Props extends Omit<TabProps, 'counter' | 'ref'> {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\n// it will load rule count from backend\nexport const PanelAlertTab: FC<Props> = ({ panel, dashboard, ...otherProps }) => {\n  const { rules, loading } = usePanelCombinedRules({ panel, dashboard });\n  return <Tab {...otherProps} counter={loading ? null : rules.length} />;\n};\n","import { DocsId } from '@grafana/data';\n\n// TODO: Documentation links\nconst DOCS_LINKS: Record<DocsId, string> = {\n  [DocsId.Transformations]: 'https://grafana.com/docs/grafana/latest/panels/transformations',\n  [DocsId.FieldConfig]: 'https://grafana.com/docs/grafana/latest/panels/field-configuration-options/',\n  [DocsId.FieldConfigOverrides]:\n    'https://grafana.com/docs/grafana/latest/panels/field-configuration-options/#override-a-field',\n};\n\nexport const getDocsLink = (id: DocsId) => DOCS_LINKS[id];\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { mergeMap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  GrafanaTheme2,\n  transformDataFrame,\n  TransformerRegistryItem,\n  getFrameMatchers,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, JSONFormatter, useStyles2 } from '@grafana/ui';\n\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationEditorProps {\n  debugMode?: boolean;\n  index: number;\n  data: DataFrame[];\n  uiConfig: TransformerRegistryItem<any>;\n  configs: TransformationsEditorTransformation[];\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationEditor = ({\n  debugMode,\n  index,\n  data,\n  uiConfig,\n  configs,\n  onChange,\n}: TransformationEditorProps) => {\n  const styles = useStyles2(getStyles);\n  const [input, setInput] = useState<DataFrame[]>([]);\n  const [output, setOutput] = useState<DataFrame[]>([]);\n  const config = useMemo(() => configs[index], [configs, index]);\n\n  useEffect(() => {\n    const config = configs[index].transformation;\n    const matcher = config.filter?.options ? getFrameMatchers(config.filter) : undefined;\n    const inputTransforms = configs.slice(0, index).map((t) => t.transformation);\n    const outputTransforms = configs.slice(index, index + 1).map((t) => t.transformation);\n    const inputSubscription = transformDataFrame(inputTransforms, data).subscribe((v) => {\n      if (matcher) {\n        v = data.filter((v) => matcher(v));\n      }\n      setInput(v);\n    });\n    const outputSubscription = transformDataFrame(inputTransforms, data)\n      .pipe(mergeMap((before) => transformDataFrame(outputTransforms, before)))\n      .subscribe(setOutput);\n\n    return function unsubscribe() {\n      inputSubscription.unsubscribe();\n      outputSubscription.unsubscribe();\n    };\n  }, [index, data, configs]);\n\n  const editor = useMemo(\n    () =>\n      React.createElement(uiConfig.editor, {\n        options: { ...uiConfig.transformation.defaultOptions, ...config.transformation.options },\n        input,\n        onChange: (opts) => {\n          onChange(index, {\n            ...config.transformation,\n            options: opts,\n          });\n        },\n      }),\n    [uiConfig.editor, uiConfig.transformation.defaultOptions, config.transformation, input, onChange, index]\n  );\n\n  return (\n    <div className={styles.editor} aria-label={selectors.components.TransformTab.transformationEditor(uiConfig.name)}>\n      {editor}\n      {debugMode && (\n        <div\n          className={styles.debugWrapper}\n          aria-label={selectors.components.TransformTab.transformationEditorDebugger(uiConfig.name)}\n        >\n          <div className={styles.debug}>\n            <div className={styles.debugTitle}>Transformation input data</div>\n            <div className={styles.debugJson}>\n              <JSONFormatter json={input} />\n            </div>\n          </div>\n          <div className={styles.debugSeparator}>\n            <Icon name=\"arrow-right\" />\n          </div>\n          <div className={styles.debug}>\n            <div className={styles.debugTitle}>Transformation output data</div>\n            <div className={styles.debugJson}>{output && <JSONFormatter json={output} />}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const debugBorder = theme.isLight ? theme.v1.palette.gray85 : theme.v1.palette.gray15;\n\n  return {\n    title: css`\n      display: flex;\n      padding: 4px 8px 4px 8px;\n      position: relative;\n      height: 35px;\n      border-radius: 4px 4px 0 0;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n    `,\n    name: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.primary.text};\n    `,\n    iconRow: css`\n      display: flex;\n    `,\n    icon: css`\n      background: transparent;\n      border: none;\n      box-shadow: none;\n      cursor: pointer;\n      color: ${theme.colors.text.secondary};\n      margin-left: ${theme.spacing(1)};\n      &:hover {\n        color: ${theme.colors.text};\n      }\n    `,\n    editor: css``,\n    debugWrapper: css`\n      display: flex;\n      flex-direction: row;\n    `,\n    debugSeparator: css`\n      width: 48px;\n      min-height: 300px;\n      display: flex;\n      align-items: center;\n      align-self: stretch;\n      justify-content: center;\n      margin: 0 ${theme.spacing(0.5)};\n      color: ${theme.colors.primary.text};\n    `,\n    debugTitle: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(0.25)};\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text};\n      border-bottom: 1px solid ${debugBorder};\n      flex-grow: 0;\n      flex-shrink: 1;\n    `,\n\n    debug: css`\n      margin-top: ${theme.spacing(1)};\n      padding: 0 ${theme.spacing(1, 1, 1)};\n      border: 1px solid ${debugBorder};\n      background: ${theme.isLight ? theme.v1.palette.white : theme.v1.palette.gray05};\n      border-radius: ${theme.shape.borderRadius(1)};\n      width: 100%;\n      min-height: 300px;\n      display: flex;\n      flex-direction: column;\n      align-self: stretch;\n    `,\n    debugJson: css`\n      flex-grow: 1;\n      height: 100%;\n      overflow: hidden;\n      padding: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  GrafanaTheme2,\n  StandardEditorContext,\n  StandardEditorsRegistryItem,\n} from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { FrameSelectionEditor } from 'app/plugins/panel/geomap/editor/FrameSelectionEditor';\n\ninterface TransformationFilterProps {\n  index: number;\n  config: DataTransformerConfig;\n  data: DataFrame[];\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationFilter = ({ index, data, config, onChange }: TransformationFilterProps) => {\n  const styles = useStyles2(getStyles);\n  const context = useMemo(() => {\n    // eslint-disable-next-line\n    return { data } as StandardEditorContext<unknown>;\n  }, [data]);\n\n  return (\n    <div className={styles.wrapper}>\n      <h5>Apply tranformation to</h5>\n      <FrameSelectionEditor\n        value={config.filter!}\n        context={context}\n        // eslint-disable-next-line\n        item={{} as StandardEditorsRegistryItem}\n        onChange={(filter) => onChange(index, { ...config, filter })}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const borderRadius = theme.shape.borderRadius();\n\n  return {\n    wrapper: css`\n      padding: ${theme.spacing(2)};\n      border: 2px solid ${theme.colors.background.secondary};\n      border-top: none;\n      border-radius: 0 0 ${borderRadius} ${borderRadius};\n      position: relative;\n      top: -4px;\n    `,\n  };\n};\n","import React, { useCallback } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { DataFrame, DataTransformerConfig, TransformerRegistryItem, FrameMatcherID } from '@grafana/data';\nimport { HorizontalGroup } from '@grafana/ui';\nimport { OperationRowHelp } from 'app/core/components/QueryOperationRow/OperationRowHelp';\nimport { QueryOperationAction } from 'app/core/components/QueryOperationRow/QueryOperationAction';\nimport {\n  QueryOperationRow,\n  QueryOperationRowRenderProps,\n} from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nimport { TransformationEditor } from './TransformationEditor';\nimport { TransformationFilter } from './TransformationFilter';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationOperationRowProps {\n  id: string;\n  index: number;\n  data: DataFrame[];\n  uiConfig: TransformerRegistryItem<any>;\n  configs: TransformationsEditorTransformation[];\n  onRemove: (index: number) => void;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationOperationRow = ({\n  onRemove,\n  index,\n  id,\n  data,\n  configs,\n  uiConfig,\n  onChange,\n}: TransformationOperationRowProps) => {\n  const [showDebug, toggleDebug] = useToggle(false);\n  const [showHelp, toggleHelp] = useToggle(false);\n  const disabled = configs[index].transformation.disabled;\n  const filter = configs[index].transformation.filter != null;\n  const showFilter = filter || data.length > 1;\n\n  const onDisableToggle = useCallback(\n    (index: number) => {\n      const current = configs[index].transformation;\n      onChange(index, {\n        ...current,\n        disabled: current.disabled ? undefined : true,\n      });\n    },\n    [onChange, configs]\n  );\n\n  // Adds or removes the frame filter\n  const toggleFilter = useCallback(() => {\n    let current = { ...configs[index].transformation };\n    if (current.filter) {\n      delete current.filter;\n    } else {\n      current.filter = {\n        id: FrameMatcherID.byRefId,\n        options: '', // empty string will not do anything\n      };\n    }\n    onChange(index, current);\n  }, [onChange, index, configs]);\n\n  const renderActions = ({ isOpen }: QueryOperationRowRenderProps) => {\n    return (\n      <HorizontalGroup align=\"center\" width=\"auto\">\n        {uiConfig.state && <PluginStateInfo state={uiConfig.state} />}\n        <QueryOperationAction\n          title=\"Show/hide transform help\"\n          icon=\"info-circle\"\n          onClick={toggleHelp}\n          active={showHelp}\n        />\n        {showFilter && <QueryOperationAction title=\"Filter\" icon=\"filter\" onClick={toggleFilter} active={filter} />}\n        <QueryOperationAction title=\"Debug\" disabled={!isOpen} icon=\"bug\" onClick={toggleDebug} active={showDebug} />\n        <QueryOperationAction\n          title=\"Disable/Enable transformation\"\n          icon={disabled ? 'eye-slash' : 'eye'}\n          onClick={() => onDisableToggle(index)}\n          active={disabled}\n        />\n        <QueryOperationAction title=\"Remove\" icon=\"trash-alt\" onClick={() => onRemove(index)} />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <QueryOperationRow\n      id={id}\n      index={index}\n      title={uiConfig.name}\n      draggable\n      actions={renderActions}\n      disabled={disabled}\n    >\n      {showHelp && <OperationRowHelp markdown={prepMarkdown(uiConfig)} />}\n      {filter && (\n        <TransformationFilter index={index} config={configs[index].transformation} data={data} onChange={onChange} />\n      )}\n      <TransformationEditor\n        debugMode={showDebug}\n        index={index}\n        data={data}\n        configs={configs}\n        uiConfig={uiConfig}\n        onChange={onChange}\n      />\n    </QueryOperationRow>\n  );\n};\n\nfunction prepMarkdown(uiConfig: TransformerRegistryItem<any>) {\n  let helpMarkdown = uiConfig.help ?? uiConfig.description;\n\n  return `\n${helpMarkdown}\n\nGo the <a href=\"https://grafana.com/docs/grafana/latest/panels/transformations/?utm_source=grafana\" target=\"_blank\" rel=\"noreferrer\">\ntransformation documentation\n</a> for more.\n`;\n}\n","import React from 'react';\n\nimport { DataFrame, DataTransformerConfig, standardTransformersRegistry } from '@grafana/data';\n\nimport { TransformationOperationRow } from './TransformationOperationRow';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationOperationRowsProps {\n  data: DataFrame[];\n  configs: TransformationsEditorTransformation[];\n  onRemove: (index: number) => void;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationOperationRows: React.FC<TransformationOperationRowsProps> = ({\n  data,\n  onChange,\n  onRemove,\n  configs,\n}) => {\n  return (\n    <>\n      {configs.map((t, i) => {\n        const uiConfig = standardTransformersRegistry.getIfExists(t.transformation.id);\n        if (!uiConfig) {\n          return null;\n        }\n\n        return (\n          <TransformationOperationRow\n            index={i}\n            id={`${t.id}`}\n            key={`${t.id}`}\n            data={data}\n            configs={configs}\n            uiConfig={uiConfig}\n            onRemove={onRemove}\n            onChange={onChange}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  DocsId,\n  GrafanaTheme2,\n  PanelData,\n  SelectableValue,\n  standardTransformersRegistry,\n  TransformerRegistryItem,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Alert,\n  Button,\n  Container,\n  CustomScrollbar,\n  Themeable,\n  VerticalGroup,\n  withTheme,\n  Input,\n  IconButton,\n  useStyles2,\n  Card,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { getDocsLink } from 'app/core/utils/docsLinks';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nimport { AppNotificationSeverity } from '../../../../types';\nimport { PanelModel } from '../../state';\nimport { PanelNotSupported } from '../PanelEditor/PanelNotSupported';\n\nimport { TransformationOperationRows } from './TransformationOperationRows';\nimport { TransformationsEditorTransformation } from './types';\n\nconst LOCAL_STORAGE_KEY = 'dashboard.components.TransformationEditor.featureInfoBox.isDismissed';\n\ninterface TransformationsEditorProps extends Themeable {\n  panel: PanelModel;\n}\n\ninterface State {\n  data: DataFrame[];\n  transformations: TransformationsEditorTransformation[];\n  search: string;\n  showPicker?: boolean;\n}\n\nclass UnThemedTransformationsEditor extends React.PureComponent<TransformationsEditorProps, State> {\n  subscription?: Unsubscribable;\n\n  constructor(props: TransformationsEditorProps) {\n    super(props);\n    const transformations = props.panel.transformations || [];\n\n    const ids = this.buildTransformationIds(transformations);\n    this.state = {\n      transformations: transformations.map((t, i) => ({\n        transformation: t,\n        id: ids[i],\n      })),\n      data: [],\n      search: '',\n    };\n  }\n\n  onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n  };\n\n  onSearchKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      const { search } = this.state;\n      if (search) {\n        const lower = search.toLowerCase();\n        const filtered = standardTransformersRegistry.list().filter((t) => {\n          const txt = (t.name + t.description).toLowerCase();\n          return txt.indexOf(lower) >= 0;\n        });\n        if (filtered.length > 0) {\n          this.onTransformationAdd({ value: filtered[0].id });\n        }\n      }\n    } else if (event.keyCode === 27) {\n      // Escape key\n      this.setState({ search: '', showPicker: false });\n      event.stopPropagation(); // don't exit the editor\n    }\n  };\n\n  buildTransformationIds(transformations: DataTransformerConfig[]) {\n    const transformationCounters: Record<string, number> = {};\n    const transformationIds: string[] = [];\n\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      if (transformationCounters[transformation.id] === undefined) {\n        transformationCounters[transformation.id] = 0;\n      } else {\n        transformationCounters[transformation.id] += 1;\n      }\n      transformationIds.push(`${transformations[i].id}-${transformationCounters[transformations[i].id]}`);\n    }\n    return transformationIds;\n  }\n\n  componentDidMount() {\n    this.subscription = this.props.panel\n      .getQueryRunner()\n      .getData({ withTransforms: false, withFieldConfig: false })\n      .subscribe({\n        next: (panelData: PanelData) => this.setState({ data: panelData.series }),\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  onChange(transformations: TransformationsEditorTransformation[]) {\n    this.setState({ transformations });\n    this.props.panel.setTransformations(transformations.map((t) => t.transformation));\n  }\n\n  // Transformation UIDs are stored in a name-X form. name is NOT unique hence we need to parse the IDs and increase X\n  // for transformations with the same name\n  getTransformationNextId = (name: string) => {\n    const { transformations } = this.state;\n    let nextId = 0;\n    const existingIds = transformations.filter((t) => t.id.startsWith(name)).map((t) => t.id);\n\n    if (existingIds.length !== 0) {\n      nextId = Math.max(...existingIds.map((i) => parseInt(i.match(/\\d+/)![0], 10))) + 1;\n    }\n\n    return `${name}-${nextId}`;\n  };\n\n  onTransformationAdd = (selectable: SelectableValue<string>) => {\n    const { transformations } = this.state;\n\n    const nextId = this.getTransformationNextId(selectable.value!);\n    this.setState({ search: '', showPicker: false });\n    this.onChange([\n      ...transformations,\n      {\n        id: nextId,\n        transformation: {\n          id: selectable.value as string,\n          options: {},\n        },\n      },\n    ]);\n  };\n\n  onTransformationChange = (idx: number, config: DataTransformerConfig) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    next[idx].transformation = config;\n    this.onChange(next);\n  };\n\n  onTransformationRemove = (idx: number) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    next.splice(idx, 1);\n    this.onChange(next);\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { transformations } = this.state;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n    const update = Array.from(transformations);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    this.onChange(update);\n  };\n\n  renderTransformationEditors = () => {\n    const { data, transformations } = this.state;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <TransformationOperationRows\n                  configs={transformations}\n                  data={data}\n                  onRemove={this.onTransformationRemove}\n                  onChange={this.onTransformationChange}\n                />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  };\n\n  renderTransformsPicker() {\n    const { transformations, search } = this.state;\n    let suffix: React.ReactNode = null;\n    let xforms = standardTransformersRegistry.list().sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0));\n\n    if (search) {\n      const lower = search.toLowerCase();\n      const filtered = xforms.filter((t) => {\n        const txt = (t.name + t.description).toLowerCase();\n        return txt.indexOf(lower) >= 0;\n      });\n\n      suffix = (\n        <>\n          {filtered.length} / {xforms.length} &nbsp;&nbsp;\n          <IconButton\n            name=\"times\"\n            onClick={() => {\n              this.setState({ search: '' });\n            }}\n          />\n        </>\n      );\n\n      xforms = filtered;\n    }\n\n    const noTransforms = !transformations?.length;\n    const showPicker = noTransforms || this.state.showPicker;\n\n    if (!suffix && showPicker && !noTransforms) {\n      suffix = (\n        <IconButton\n          name=\"times\"\n          onClick={() => {\n            this.setState({ showPicker: false });\n          }}\n        />\n      );\n    }\n\n    return (\n      <>\n        {noTransforms && (\n          <Container grow={1}>\n            <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n              {(isDismissed, onDismiss) => {\n                if (isDismissed) {\n                  return null;\n                }\n\n                return (\n                  <Alert\n                    title=\"Transformations\"\n                    severity=\"info\"\n                    onRemove={() => {\n                      onDismiss(true);\n                    }}\n                  >\n                    <p>\n                      Transformations allow you to join, calculate, re-order, hide, and rename your query results before\n                      they are visualized. <br />\n                      Many transforms are not suitable if you&apos;re using the Graph visualization, as it currently\n                      only supports time series data. <br />\n                      It can help to switch to the Table visualization to understand what a transformation is doing.{' '}\n                    </p>\n                    <a\n                      href={getDocsLink(DocsId.Transformations)}\n                      className=\"external-link\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      Read more\n                    </a>\n                  </Alert>\n                );\n              }}\n            </LocalStorageValueProvider>\n          </Container>\n        )}\n        {showPicker ? (\n          <VerticalGroup>\n            <Input\n              aria-label={selectors.components.Transforms.searchInput}\n              value={search ?? ''}\n              autoFocus={!noTransforms}\n              placeholder=\"Add transformation\"\n              onChange={this.onSearchChange}\n              onKeyDown={this.onSearchKeyDown}\n              suffix={suffix}\n            />\n\n            {xforms.map((t) => {\n              return (\n                <TransformationCard\n                  key={t.name}\n                  transform={t}\n                  onClick={() => {\n                    this.onTransformationAdd({ value: t.id });\n                  }}\n                />\n              );\n            })}\n          </VerticalGroup>\n        ) : (\n          <Button\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              this.setState({ showPicker: true });\n            }}\n          >\n            Add transformation\n          </Button>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    const {\n      panel: { alert },\n    } = this.props;\n    const { transformations } = this.state;\n\n    const hasTransforms = transformations.length > 0;\n\n    if (!hasTransforms && alert) {\n      return <PanelNotSupported message=\"Transformations can't be used on a panel with existing alerts\" />;\n    }\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <Container padding=\"md\">\n          <div aria-label={selectors.components.TransformTab.content}>\n            {hasTransforms && alert ? (\n              <Alert\n                severity={AppNotificationSeverity.Error}\n                title=\"Transformations can't be used on a panel with alerts\"\n              />\n            ) : null}\n            {hasTransforms && this.renderTransformationEditors()}\n            {this.renderTransformsPicker()}\n          </div>\n        </Container>\n      </CustomScrollbar>\n    );\n  }\n}\n\ninterface TransformationCardProps {\n  transform: TransformerRegistryItem<any>;\n  onClick: () => void;\n}\n\nfunction TransformationCard({ transform, onClick }: TransformationCardProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Card\n      className={styles.card}\n      aria-label={selectors.components.TransformTab.newTransform(transform.name)}\n      onClick={onClick}\n    >\n      <Card.Heading>{transform.name}</Card.Heading>\n      <Card.Description>{transform.description}</Card.Description>\n      {transform.state && (\n        <Card.Tags>\n          <PluginStateInfo state={transform.state} />\n        </Card.Tags>\n      )}\n    </Card>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      margin: 0;\n      padding: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const TransformationsEditor = withTheme(UnThemedTransformationsEditor);\n","import React, { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { PanelModel } from '../../state';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        type: datasourceSettings?.type,\n        uid: datasourceSettings?.uid,\n      },\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      savedQueryUid: panel.savedQueryLink?.ref.uid ?? null, // Used by experimental feature queryLibrary\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      const ds = getDatasourceSrv().getInstanceSettings(null);\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { FC, useEffect } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Tab, TabContent, TabsBar, toIconName, useForceUpdate, useStyles2 } from '@grafana/ui';\nimport AlertTabIndex from 'app/features/alerting/AlertTabIndex';\nimport { PanelAlertTab } from 'app/features/alerting/unified/PanelAlertTab';\nimport { PanelQueriesChangedEvent, PanelTransformationsChangedEvent } from 'app/types/events';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { TransformationsEditor } from '../TransformationsEditor/TransformationsEditor';\n\nimport { PanelEditorQueries } from './PanelEditorQueries';\nimport { PanelEditorTab, PanelEditorTabId } from './types';\n\ninterface PanelEditorTabsProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  tabs: PanelEditorTab[];\n  onChangeTab: (tab: PanelEditorTab) => void;\n}\n\nexport const PanelEditorTabs: FC<PanelEditorTabsProps> = React.memo(({ panel, dashboard, tabs, onChangeTab }) => {\n  const forceUpdate = useForceUpdate();\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const eventSubs = new Subscription();\n    eventSubs.add(panel.events.subscribe(PanelQueriesChangedEvent, forceUpdate));\n    eventSubs.add(panel.events.subscribe(PanelTransformationsChangedEvent, forceUpdate));\n    return () => eventSubs.unsubscribe();\n  }, [panel, dashboard, forceUpdate]);\n\n  const activeTab = tabs.find((item) => item.active)!;\n\n  if (tabs.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar className={styles.tabBar} hideBorder>\n        {tabs.map((tab) => {\n          if (tab.id === PanelEditorTabId.Alert) {\n            return renderAlertTab(tab, panel, dashboard, onChangeTab);\n          }\n          return (\n            <Tab\n              key={tab.id}\n              label={tab.text}\n              active={tab.active}\n              onChangeTab={() => onChangeTab(tab)}\n              icon={toIconName(tab.icon)}\n              counter={getCounter(panel, tab)}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTab.id === PanelEditorTabId.Query && <PanelEditorQueries panel={panel} queries={panel.targets} />}\n        {activeTab.id === PanelEditorTabId.Alert && <AlertTabIndex panel={panel} dashboard={dashboard} />}\n        {activeTab.id === PanelEditorTabId.Transform && <TransformationsEditor panel={panel} />}\n      </TabContent>\n    </div>\n  );\n});\n\nPanelEditorTabs.displayName = 'PanelEditorTabs';\n\nfunction getCounter(panel: PanelModel, tab: PanelEditorTab) {\n  switch (tab.id) {\n    case PanelEditorTabId.Query:\n      return panel.targets.length;\n    case PanelEditorTabId.Alert:\n      return panel.alert ? 1 : 0;\n    case PanelEditorTabId.Transform:\n      const transformations = panel.getTransformations() ?? [];\n      return transformations.length;\n  }\n\n  return null;\n}\n\nfunction renderAlertTab(\n  tab: PanelEditorTab,\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  onChangeTab: (tab: PanelEditorTab) => void\n) {\n  const alertingDisabled = !config.alertingEnabled && !config.unifiedAlertingEnabled;\n\n  if (alertingDisabled) {\n    return null;\n  }\n\n  if (config.unifiedAlertingEnabled) {\n    return (\n      <PanelAlertTab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        panel={panel}\n        dashboard={dashboard}\n      />\n    );\n  }\n\n  if (config.alertingEnabled) {\n    return (\n      <Tab\n        key={tab.id}\n        label={tab.text}\n        active={tab.active}\n        onChangeTab={() => onChangeTab(tab)}\n        icon={toIconName(tab.icon)}\n        counter={getCounter(panel, tab)}\n      />\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    `,\n    tabBar: css`\n      padding-left: ${theme.spacing(2)};\n    `,\n    tabContent: css`\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      flex-grow: 1;\n      min-height: 0;\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      border-left: none;\n      border-bottom: none;\n      border-top-right-radius: ${theme.shape.borderRadius(1.5)};\n    `,\n  };\n};\n","import memoizeOne from 'memoize-one';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getRulesPermissions } from 'app/features/alerting/unified/utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\nimport { PanelEditorTab, PanelEditorTabId } from '../types';\n\nexport const getPanelEditorTabs = memoizeOne((tab?: string, plugin?: PanelPlugin) => {\n  const tabs: PanelEditorTab[] = [];\n\n  if (!plugin) {\n    return tabs;\n  }\n\n  let defaultTab = PanelEditorTabId.Visualize;\n\n  if (plugin.meta.skipDataQuery) {\n    return [];\n  }\n\n  if (!plugin.meta.skipDataQuery) {\n    defaultTab = PanelEditorTabId.Query;\n\n    tabs.push({\n      id: PanelEditorTabId.Query,\n      text: 'Query',\n      icon: 'database',\n      active: false,\n    });\n\n    tabs.push({\n      id: PanelEditorTabId.Transform,\n      text: 'Transform',\n      icon: 'process',\n      active: false,\n    });\n  }\n\n  const { alertingEnabled, unifiedAlertingEnabled } = getConfig();\n  const hasRuleReadPermissions = contextSrv.hasPermission(getRulesPermissions(GRAFANA_RULES_SOURCE_NAME).read);\n  const isAlertingAvailable = alertingEnabled || (unifiedAlertingEnabled && hasRuleReadPermissions);\n\n  const isGraph = plugin.meta.id === 'graph';\n  const isTimeseries = plugin.meta.id === 'timeseries';\n\n  if ((isAlertingAvailable && isGraph) || isTimeseries) {\n    tabs.push({\n      id: PanelEditorTabId.Alert,\n      text: 'Alert',\n      icon: 'bell',\n      active: false,\n    });\n  }\n\n  const activeTab = tabs.find((item) => item.id === (tab || defaultTab)) ?? tabs[0];\n  activeTab.active = true;\n\n  return tabs;\n});\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2, NavModel, NavModelItem, PageLayoutType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { config, locationService } from '@grafana/runtime';\nimport {\n  Button,\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  PageToolbar,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  ToolbarButtonRow,\n  withTheme2,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../library-panels/components/UnlinkModal/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { PanelEditorUIState, toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  className?: string;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: any) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: any) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(uiState: PanelEditorUIState, styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return <div className={styles.onlyPanel}>{panelPane}</div>;\n    }\n\n    return (\n      <SplitPaneWrapper\n        splitOrientation=\"horizontal\"\n        maxSize={-200}\n        paneSize={uiState.topPaneSize}\n        primary=\"first\"\n        secondaryPaneStyle={{ minHeight: 0 }}\n        onDragFinished={(size) => {\n          if (size) {\n            updatePanelEditorUIState({ topPaneSize: size / window.innerHeight });\n          }\n        }}\n      >\n        {panelPane}\n        <div\n          className={styles.tabsWrapper}\n          aria-label={selectors.components.PanelEditor.DataPane.content}\n          key=\"panel-editor-tabs\"\n        >\n          <PanelEditorTabs\n            key={panel.key}\n            panel={panel}\n            dashboard={dashboard}\n            tabs={tabs}\n            onChangeTab={this.onChangeTab}\n          />\n        </div>\n      </SplitPaneWrapper>\n    );\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <Stack gap={1}>\n            <InlineSwitch\n              label=\"Table view\"\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              aria-label={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} isOnCanvas={true} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </Stack>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    const size = config.featureToggles.topnav ? 'sm' : 'md';\n    let editorActions = [\n      <Button\n        onClick={this.onDiscard}\n        title=\"Undo all changes\"\n        key=\"discard\"\n        size={size}\n        variant=\"destructive\"\n        fill=\"outline\"\n      >\n        Discard\n      </Button>,\n      this.props.panel.libraryPanel ? (\n        <Button\n          onClick={this.onSaveLibraryPanel}\n          variant=\"primary\"\n          size={size}\n          title=\"Apply changes and save library panel\"\n          key=\"save-panel\"\n        >\n          Save library panel\n        </Button>\n      ) : (\n        <Button\n          onClick={this.onSaveDashboard}\n          title=\"Apply changes and save dashboard\"\n          key=\"save\"\n          size={size}\n          variant=\"secondary\"\n        >\n          Save\n        </Button>\n      ),\n      <Button\n        onClick={this.onBack}\n        variant=\"primary\"\n        title=\"Apply changes and go back to dashboard\"\n        data-testid={selectors.components.PanelEditor.applyButton}\n        key=\"apply\"\n        size={size}\n      >\n        Apply\n      </Button>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      this.props.panel.unlinkLibraryPanel();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                Unlink\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  renderToolbar() {\n    if (config.featureToggles.topnav) {\n      return (\n        <AppChromeUpdate\n          actions={<ToolbarButtonRow alignment=\"right\">{this.renderEditorActions()}</ToolbarButtonRow>}\n        />\n      );\n    }\n\n    return (\n      <PageToolbar title={this.props.dashboard.title} section=\"Edit Panel\" onGoBack={this.onGoBackToDashboard}>\n        {this.renderEditorActions()}\n      </PageToolbar>\n    );\n  }\n\n  render() {\n    const { initDone, uiState, theme, sectionNav, pageNav, className, updatePanelEditorUIState } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <Page\n        navModel={sectionNav}\n        pageNav={pageNav}\n        aria-label={selectors.components.PanelEditor.General.content}\n        layout={PageLayoutType.Custom}\n        toolbar={this.renderToolbar()}\n        className={className}\n      >\n        <div className={styles.wrapper}>\n          <div className={styles.verticalSplitPanesWrapper}>\n            {!uiState.isPanelOptionsVisible ? (\n              this.renderPanelAndEditor(uiState, styles)\n            ) : (\n              <SplitPaneWrapper\n                splitOrientation=\"vertical\"\n                maxSize={-300}\n                paneSize={uiState.rightPaneSize}\n                primary=\"second\"\n                onDragFinished={(size) => {\n                  if (size) {\n                    updatePanelEditorUIState({ rightPaneSize: size / window.innerWidth });\n                  }\n                }}\n              >\n                {this.renderPanelAndEditor(uiState, styles)}\n                {this.renderOptionsPane()}\n              </SplitPaneWrapper>\n            )}\n          </div>\n          {this.state.showSaveLibraryPanelModal && (\n            <SaveLibraryPanelModal\n              panel={this.props.panel as PanelModelWithLibraryPanel}\n              folderUid={this.props.dashboard.meta.folderUid ?? ''}\n              onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n              onDiscard={this.onDiscard}\n              onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n            />\n          )}\n        </div>\n      </Page>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      display: 'flex',\n      paddingTop: config.featureToggles.topnav ? theme.spacing(2) : 0,\n    }),\n    verticalSplitPanesWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      position: relative;\n    `,\n    mainPaneWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      padding-right: ${uiState.isPanelOptionsVisible ? 0 : paneSpacing};\n    `,\n    variablesWrapper: css`\n      label: variablesWrapper;\n      display: flex;\n      flex-grow: 1;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(1, 2)};\n    `,\n    panelWrapper: css`\n      flex: 1 1 0;\n      min-height: 0;\n      width: 100%;\n      padding-left: ${paneSpacing};\n    `,\n    tabsWrapper: css`\n      height: 100%;\n      width: 100%;\n    `,\n    panelToolbar: css`\n      display: flex;\n      padding: 0 0 ${paneSpacing} ${paneSpacing};\n      justify-content: space-between;\n      flex-wrap: wrap;\n    `,\n    toolbarLeft: css`\n      padding-left: ${theme.spacing(1)};\n    `,\n    centeringContainer: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n      flex-direction: column;\n    `,\n    onlyPanel: css`\n      height: 100%;\n      position: absolute;\n      overflow: hidden;\n      width: 100%;\n    `,\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, EventBus, GrafanaTheme2 } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { LoadingIndicator } from '@grafana/ui/src/components/PanelChrome/LoadingIndicator';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { getDashboardQueryRunner } from '../../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface AnnotationPickerProps {\n  events: EventBus;\n  annotation: AnnotationQuery;\n  onEnabledChanged: (annotation: AnnotationQuery) => void;\n}\n\nexport const AnnotationPicker = ({ annotation, events, onEnabledChanged }: AnnotationPickerProps): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const onCancel = () => getDashboardQueryRunner().cancel(annotation);\n\n  useEffect(() => {\n    const started = events.getStream(AnnotationQueryStarted).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(true);\n        }\n      },\n    });\n    const stopped = events.getStream(AnnotationQueryFinished).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(false);\n        }\n      },\n    });\n\n    return () => {\n      started.unsubscribe();\n      stopped.unsubscribe();\n    };\n  });\n\n  return (\n    <div key={annotation.name} className={styles.annotation}>\n      <InlineFieldRow>\n        <InlineField label={annotation.name} disabled={loading}>\n          <InlineSwitch value={annotation.enable} onChange={() => onEnabledChanged(annotation)} disabled={loading} />\n        </InlineField>\n        <div className={styles.indicator}>\n          <LoadingIndicator loading={loading} onCancel={onCancel} />\n        </div>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    annotation: css`\n      display: inline-block;\n      margin-right: ${theme.spacing(1)};\n\n      .fa-caret-down {\n        font-size: 75%;\n        padding-left: ${theme.spacing(1)};\n      }\n\n      .gf-form-inline .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n    indicator: css`\n      align-self: center;\n      padding: 0 ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { AnnotationQuery, DataQuery, EventBus } from '@grafana/data';\n\nimport { AnnotationPicker } from './AnnotationPicker';\n\ninterface Props {\n  events: EventBus;\n  annotations: AnnotationQuery[];\n  onAnnotationChanged: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\nexport const Annotations: FunctionComponent<Props> = ({ annotations, onAnnotationChanged, events }) => {\n  const [visibleAnnotations, setVisibleAnnotations] = useState<AnnotationQuery[]>([]);\n  useEffect(() => {\n    setVisibleAnnotations(annotations.filter((annotation) => annotation.hide !== true));\n  }, [annotations]);\n\n  if (visibleAnnotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleAnnotations.map((annotation) => (\n        <AnnotationPicker\n          events={events}\n          annotation={annotation}\n          onEnabledChanged={onAnnotationChanged}\n          key={annotation.name}\n        />\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { sanitize, sanitizeUrl } from '@grafana/data/src/text/sanitize';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, ToolbarButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchItem } from 'app/features/search/types';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardLink } from '../../state/DashboardModel';\n\ninterface Props {\n  link: DashboardLink;\n  linkInfo: { title: string; href: string };\n  dashboardUID: string;\n}\n\nexport const DashboardLinksDashboard = (props: Props) => {\n  const { link, linkInfo } = props;\n  const listRef = useRef<HTMLUListElement>(null);\n  const [dropdownCssClass, setDropdownCssClass] = useState('invisible');\n  const [opened, setOpened] = useState(0);\n  const resolvedLinks = useResolvedLinks(props, opened);\n  const styles = useStyles2(getStyles);\n\n  useLayoutEffect(() => {\n    setDropdownCssClass(getDropdownLocationCssClass(listRef.current));\n  }, [resolvedLinks]);\n\n  if (link.asDropdown) {\n    return (\n      <LinkElement link={link} key=\"dashlinks-dropdown\" data-testid={selectors.components.DashboardLinks.dropDown}>\n        <>\n          <ToolbarButton\n            onClick={() => setOpened(Date.now())}\n            className={cx('gf-form-label gf-form-label--dashlink', styles.button)}\n            data-placement=\"bottom\"\n            data-toggle=\"dropdown\"\n            aria-expanded={!!opened}\n            aria-controls=\"dropdown-list\"\n            aria-haspopup=\"menu\"\n          >\n            <Icon aria-hidden name=\"bars\" className={styles.iconMargin} />\n            <span>{linkInfo.title}</span>\n          </ToolbarButton>\n          <ul\n            id=\"dropdown-list\"\n            className={`dropdown-menu ${styles.dropdown} ${dropdownCssClass}`}\n            role=\"menu\"\n            ref={listRef}\n          >\n            {resolvedLinks.length > 0 &&\n              resolvedLinks.map((resolvedLink, index) => {\n                return (\n                  <li role=\"none\" key={`dashlinks-dropdown-item-${resolvedLink.uid}-${index}`}>\n                    <a\n                      role=\"menuitem\"\n                      href={resolvedLink.url}\n                      target={link.targetBlank ? '_blank' : undefined}\n                      rel=\"noreferrer\"\n                      data-testid={selectors.components.DashboardLinks.link}\n                      aria-label={`${resolvedLink.title} dashboard`}\n                    >\n                      {resolvedLink.title}\n                    </a>\n                  </li>\n                );\n              })}\n          </ul>\n        </>\n      </LinkElement>\n    );\n  }\n\n  return (\n    <>\n      {resolvedLinks.length > 0 &&\n        resolvedLinks.map((resolvedLink, index) => {\n          return (\n            <LinkElement\n              link={link}\n              key={`dashlinks-list-item-${resolvedLink.uid}-${index}`}\n              data-testid={selectors.components.DashboardLinks.container}\n            >\n              <a\n                className=\"gf-form-label gf-form-label--dashlink\"\n                href={resolvedLink.url}\n                target={link.targetBlank ? '_blank' : undefined}\n                rel=\"noreferrer\"\n                data-testid={selectors.components.DashboardLinks.link}\n                aria-label={`${resolvedLink.title} dashboard`}\n              >\n                <Icon aria-hidden name=\"apps\" style={{ marginRight: '4px' }} />\n                <span>{resolvedLink.title}</span>\n              </a>\n            </LinkElement>\n          );\n        })}\n    </>\n  );\n};\n\ninterface LinkElementProps {\n  link: DashboardLink;\n  key: string;\n  children: JSX.Element;\n}\n\nconst LinkElement: React.FC<LinkElementProps> = (props) => {\n  const { link, children, ...rest } = props;\n\n  return (\n    <div {...rest} className=\"gf-form\">\n      {link.tooltip && <Tooltip content={link.tooltip}>{children}</Tooltip>}\n      {!link.tooltip && <>{children}</>}\n    </div>\n  );\n};\n\nconst useResolvedLinks = ({ link, dashboardUID }: Props, opened: number): ResolvedLinkDTO[] => {\n  const { tags } = link;\n  const result = useAsync(() => searchForTags(tags), [tags, opened]);\n  if (!result.value) {\n    return [];\n  }\n  return resolveLinks(dashboardUID, link, result.value);\n};\n\ninterface ResolvedLinkDTO {\n  uid: string;\n  url: string;\n  title: string;\n}\n\nexport async function searchForTags(\n  tags: string[],\n  dependencies: { getBackendSrv: typeof getBackendSrv } = { getBackendSrv }\n): Promise<DashboardSearchItem[]> {\n  const limit = 100;\n  const searchHits: DashboardSearchItem[] = await dependencies.getBackendSrv().search({ tag: tags, limit });\n\n  return searchHits;\n}\n\nexport function resolveLinks(\n  dashboardUID: string,\n  link: DashboardLink,\n  searchHits: DashboardSearchItem[],\n  dependencies: { getLinkSrv: typeof getLinkSrv; sanitize: typeof sanitize; sanitizeUrl: typeof sanitizeUrl } = {\n    getLinkSrv,\n    sanitize,\n    sanitizeUrl,\n  }\n): ResolvedLinkDTO[] {\n  return searchHits\n    .filter((searchHit) => searchHit.uid !== dashboardUID)\n    .map((searchHit) => {\n      const uid = searchHit.uid;\n      const title = dependencies.sanitize(searchHit.title);\n      const resolvedLink = dependencies.getLinkSrv().getLinkUrl({ ...link, url: searchHit.url });\n      const url = dependencies.sanitizeUrl(resolvedLink);\n\n      return { uid, title, url };\n    });\n}\n\nfunction getDropdownLocationCssClass(element: HTMLElement | null) {\n  if (!element) {\n    return 'invisible';\n  }\n\n  const wrapperPos = element.parentElement!.getBoundingClientRect();\n  const pos = element.getBoundingClientRect();\n\n  if (pos.width === 0) {\n    return 'invisible';\n  }\n\n  if (wrapperPos.left + pos.width + 10 > window.innerWidth) {\n    return 'pull-left';\n  } else {\n    return 'pull-right';\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    iconMargin: css({\n      marginRight: theme.spacing(0.5),\n    }),\n    dropdown: css({\n      maxWidth: 'max(30vw, 300px)',\n      maxHeight: '70vh',\n      overflowY: 'auto',\n      a: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n    }),\n    button: css({\n      color: theme.colors.text.primary,\n    }),\n  };\n}\n","import React, { FC } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { sanitizeUrl } from '@grafana/data/src/text/sanitize';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { Icon, Tooltip, useForceUpdate } from '@grafana/ui';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardModel } from '../../state';\nimport { DashboardLink } from '../../state/DashboardModel';\nimport { linkIconMap } from '../LinksSettings/LinkSettingsEdit';\n\nimport { DashboardLinksDashboard } from './DashboardLinksDashboard';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n}\n\nexport const DashboardLinks: FC<Props> = ({ dashboard, links }) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    const sub = dashboard.events.subscribe(TimeRangeUpdatedEvent, forceUpdate);\n    return () => sub.unsubscribe();\n  });\n\n  if (!links.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {links.map((link: DashboardLink, index: number) => {\n        const linkInfo = getLinkSrv().getAnchorInfo(link);\n        const key = `${link.title}-$${index}`;\n\n        if (link.type === 'dashboards') {\n          return <DashboardLinksDashboard key={key} link={link} linkInfo={linkInfo} dashboardUID={dashboard.uid} />;\n        }\n\n        const icon = linkIconMap[link.icon];\n\n        const linkElement = (\n          <a\n            className=\"gf-form-label gf-form-label--dashlink\"\n            href={sanitizeUrl(linkInfo.href)}\n            target={link.targetBlank ? '_blank' : undefined}\n            rel=\"noreferrer\"\n            data-testid={selectors.components.DashboardLinks.link}\n          >\n            {icon && <Icon aria-hidden name={icon} style={{ marginRight: '4px' }} />}\n            <span>{linkInfo.title}</span>\n          </a>\n        );\n\n        return (\n          <div key={key} className=\"gf-form\" data-testid={selectors.components.DashboardLinks.container}>\n            {link.tooltip ? <Tooltip content={linkInfo.tooltip}>{linkElement}</Tooltip> : linkElement}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery, DataQuery } from '@grafana/data';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { VariableModel } from '../../../variables/types';\nimport { DashboardModel } from '../../state';\nimport { DashboardLink } from '../../state/DashboardModel';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: VariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: AnnotationQuery<DataQuery>) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations } = this.props;\n\n    if (!dashboard.isSubMenuVisible()) {\n      return null;\n    }\n\n    const readOnlyVariables = dashboard.meta.isSnapshot ?? false;\n\n    return (\n      <div className=\"submenu-controls\">\n        <form aria-label=\"Template variables\" className={styles}>\n          <SubMenuItems variables={variables} readOnly={readOnlyVariables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className=\"gf-form gf-form--grow\" />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst styles = css`\n  display: flex;\n  flex-wrap: wrap;\n  display: contents;\n`;\n\nexport const SubMenu = connect(mapStateToProps)(SubMenuUnConnected);\n\nSubMenu.displayName = 'SubMenu';\n","import { cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel, NavModelItem, TimeRange, PageLayoutType, locationUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, locationService } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { getPageNavFromSlug, getRootContentNavModel } from 'app/features/storage/StorageFolderPage';\nimport { DashboardRoutes, KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n  accessToken?: string;\n}\n\nexport type DashboardPageRouteSearchParams = {\n  tab?: string;\n  folderUid?: string;\n  editPanel?: string;\n  viewPanel?: string;\n  editview?: string;\n  shareView?: string;\n  panelType?: string;\n  inspect?: string;\n  from?: string;\n  to?: string;\n  refresh?: string;\n  kiosk?: string | true;\n};\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n  navIndex: state.navIndex,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 &\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  updateScrollTop?: number;\n  rememberScrollTop?: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: HTMLDivElement;\n  pageNav?: NavModelItem;\n  sectionNav?: NavModel;\n}\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, match, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderUid: queryParams.folderUid,\n      panelType: queryParams.panelType,\n      routeName: this.props.route.routeName,\n      fixUrl: true,\n      accessToken: match.params.accessToken,\n      keybindingSrv: this.context.keybindings,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, match, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    if (\n      prevProps.match.params.uid !== match.params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    const updatedState = { ...state };\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (panel) {\n        if (dashboard.canEditPanel(panel)) {\n          updatedState.editPanel = panel;\n          updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        } else {\n          updatedState.editPanelAccessDenied = true;\n        }\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      updatedState.editPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (panel) {\n        // This mutable state feels wrong to have in getDerivedStateFromProps\n        // Should move this state out of dashboard in the future\n        dashboard.initViewPanel(panel);\n        updatedState.viewPanel = panel;\n        updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        updatedState.updateScrollTop = 0;\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      updatedState.viewPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      updatedState.panelNotFound = false;\n      updatedState.editPanelAccessDenied = false;\n    }\n\n    return updateStatePageNavFromProps(props, updatedState);\n  }\n\n  onAddPanel = () => {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // Return if the \"Add panel\" exists already\n    if (dashboard.panels.length > 0 && dashboard.panels[0].type === 'add-panel') {\n      return;\n    }\n\n    // Move all panels down by the height of the \"add panel\" widget.\n    // This is to work around an issue with react-grid-layout that can mess up the layout\n    // in certain configurations. (See https://github.com/react-grid-layout/react-grid-layout/issues/1787)\n    const addPanelWidgetHeight = 8;\n    for (const panel of dashboard.panelIterator()) {\n      panel.gridPos.y += addPanelWidgetHeight;\n    }\n\n    dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: { x: 0, y: 0, w: 12, h: addPanelWidgetHeight },\n      title: 'Panel Title',\n    });\n\n    // scroll to top after adding panel\n    this.setState({ updateScrollTop: 0 });\n  };\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  render() {\n    const { dashboard, initError, queryParams } = this.props;\n    const { editPanel, viewPanel, updateScrollTop, pageNav, sectionNav } = this.state;\n    const kioskMode = getKioskMode(this.props.queryParams);\n\n    if (!dashboard || !pageNav || !sectionNav) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const showSubMenu = !editPanel && !kioskMode && !this.props.queryParams.editview;\n\n    const toolbar = kioskMode !== KioskMode.Full && !queryParams.editview && (\n      <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n        <DashNav\n          dashboard={dashboard}\n          title={dashboard.title}\n          folderTitle={dashboard.meta.folderTitle}\n          isFullscreen={!!viewPanel}\n          onAddPanel={this.onAddPanel}\n          kioskMode={kioskMode}\n          hideTimePicker={dashboard.timepicker.hidden}\n          shareModalActiveTab={this.props.queryParams.shareView}\n        />\n      </header>\n    );\n\n    const pageClassName = cx({\n      'panel-in-fullscreen': Boolean(viewPanel),\n      'page-hidden': Boolean(queryParams.editview || editPanel),\n    });\n\n    return (\n      <>\n        <Page\n          navModel={sectionNav}\n          pageNav={pageNav}\n          layout={PageLayoutType.Canvas}\n          toolbar={toolbar}\n          className={pageClassName}\n          scrollRef={this.setScrollRef}\n          scrollTop={updateScrollTop}\n        >\n          <DashboardPrompt dashboard={dashboard} />\n\n          {initError && <DashboardFailed />}\n          {showSubMenu && (\n            <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n              <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n            </section>\n          )}\n\n          <DashboardGrid\n            dashboard={dashboard}\n            isEditable={!!dashboard.meta.canEdit}\n            viewPanel={viewPanel}\n            editPanel={editPanel}\n          />\n\n          {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n        </Page>\n        {editPanel && (\n          <PanelEditor\n            dashboard={dashboard}\n            sourcePanel={editPanel}\n            tab={this.props.queryParams.tab}\n            sectionNav={sectionNav}\n            pageNav={pageNav}\n          />\n        )}\n        {queryParams.editview && (\n          <DashboardSettings\n            dashboard={dashboard}\n            editview={queryParams.editview}\n            pageNav={pageNav}\n            sectionNav={sectionNav}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nfunction updateStatePageNavFromProps(props: Props, state: State): State {\n  const { dashboard } = props;\n\n  if (!dashboard) {\n    return state;\n  }\n\n  let pageNav = state.pageNav;\n  let sectionNav = state.sectionNav;\n\n  if (!pageNav || dashboard.title !== pageNav.text) {\n    pageNav = {\n      text: dashboard.title,\n      url: locationUtil.getUrlForPartial(props.history.location, {\n        editview: null,\n        editPanel: null,\n        viewPanel: null,\n      }),\n    };\n  }\n\n  // Check if folder changed\n  const { folderTitle, folderUid } = dashboard.meta;\n  if (folderTitle && folderUid && pageNav && pageNav.parentItem?.text !== folderTitle) {\n    pageNav = {\n      ...pageNav,\n      parentItem: {\n        text: folderTitle,\n        url: `/dashboards/f/${dashboard.meta.folderUid}`,\n      },\n    };\n  }\n\n  if (props.route.routeName === DashboardRoutes.Path) {\n    sectionNav = getRootContentNavModel();\n    const pageNav = getPageNavFromSlug(props.match.params.slug!);\n    if (pageNav?.parentItem) {\n      pageNav.parentItem = pageNav.parentItem;\n    }\n  } else {\n    sectionNav = getNavModel(props.navIndex, config.featureToggles.topnav ? 'dashboards/browse' : 'dashboards');\n  }\n\n  if (state.editPanel || state.viewPanel) {\n    pageNav = {\n      ...pageNav,\n      text: `${state.editPanel ? 'Edit' : 'View'} panel`,\n      parentItem: pageNav,\n      url: undefined,\n    };\n  }\n\n  if (state.pageNav === pageNav && state.sectionNav === sectionNav) {\n    return state;\n  }\n\n  return {\n    ...state,\n    pageNav,\n    sectionNav,\n  };\n}\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n","import React, { useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { t } from 'app/core/internationalization';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { EmptyStateNoDatasource } from 'app/features/datasources/components/EmptyStateNoDatasource';\nimport { loadDataSources } from 'app/features/datasources/state';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport DashboardPage from './DashboardPage';\n\nexport default function NewDashboardPage(props: GrafanaRouteComponentProps) {\n  const dispatch = useDispatch();\n  useEffectOnce(() => {\n    dispatch(loadDataSources());\n  });\n\n  const { hasDatasource, loading } = useSelector((state) => ({\n    hasDatasource: state.dataSources.dataSourcesCount > 0,\n    loading: !state.dataSources.hasFetched,\n  }));\n  const [createDashboard, setCreateDashboard] = useState(false);\n  const showDashboardPage = hasDatasource || createDashboard || !config.featureToggles.datasourceOnboarding;\n\n  return showDashboardPage ? (\n    <DashboardPage {...props} />\n  ) : (\n    <EmptyStateNoDatasource\n      onCTAClick={() => setCreateDashboard(true)}\n      loading={loading}\n      title={t('datasource-onboarding.welcome', 'Welcome to Grafana dashboards!')}\n      CTAText={t('datasource-onboarding.sampleData', 'Or set up a new dashboard with sample data')}\n      navId=\"dashboards/browse\"\n      pageNav={{ text: t('datasource-onboarding.new-dashboard', 'New dashboard'), url: '/dashboard/new' }}\n    />\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getNewDashboardModelData, setDashboardToFetchFromLocalStorage } from '../state/initDashboard';\n\nexport default function NewDashboardWithDS(props: GrafanaRouteComponentProps<{ datasourceUid: string }>) {\n  const [error, setError] = useState<string | null>(null);\n  const { datasourceUid } = props.match.params;\n\n  useEffect(() => {\n    const ds = getDataSourceSrv().getInstanceSettings(datasourceUid);\n    if (!ds) {\n      setError('Data source not found');\n      return;\n    }\n\n    const newDashboard = getNewDashboardModelData();\n    const { dashboard } = newDashboard;\n    dashboard.panels[0] = {\n      ...dashboard.panels[0],\n      datasource: {\n        uid: ds.uid,\n        type: ds.type,\n      },\n    };\n\n    setDashboardToFetchFromLocalStorage(newDashboard);\n    locationService.replace('/dashboard/new');\n  }, [datasourceUid]);\n\n  if (error) {\n    return (\n      <Page navId=\"dashboards\">\n        <Page.Contents>\n          <div>Data source with UID &quot;{datasourceUid}&quot; not found.</div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values.toArray();\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {!config.featureToggles.topnav && (\n        <div>\n          <Alert title=\"Enable the topnav feature toggle\">This page is designed assuming topnav is enabled</Alert>\n        </div>\n      )}\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport {\n  FrameMatcherID,\n  getFieldDisplayName,\n  MatcherConfig,\n  SelectableValue,\n  StandardEditorProps,\n} from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nconst recoverRefIdMissing = (\n  newRefIds: SelectableValue[],\n  oldRefIds: SelectableValue[],\n  previousValue: string | undefined\n): SelectableValue | undefined => {\n  if (!previousValue) {\n    return;\n  }\n  // Previously selected value is missing from the new list.\n  // Find the value that is in the new list but isn't in the old list\n  let changedTo = newRefIds.find((refId) => {\n    return !oldRefIds.some((refId2) => {\n      return refId === refId2;\n    });\n  });\n  if (changedTo) {\n    // Found the new value, we assume the old value changed to this one, so we'll use it\n    return changedTo;\n  }\n  return;\n};\n\ntype Props = StandardEditorProps<MatcherConfig>;\n\nexport const FrameSelectionEditor = ({ value, context, onChange, item }: Props) => {\n  const listOfRefId = useMemo(() => {\n    return context.data.map((f) => ({\n      value: f.refId,\n      label: `Query: ${f.refId} (size: ${f.length})`,\n      description: f.fields.map((f) => getFieldDisplayName(f)).join(', '),\n    }));\n  }, [context.data]);\n\n  const [priorSelectionState, updatePriorSelectionState] = useState<{\n    refIds: SelectableValue[];\n    value: string | undefined;\n  }>({\n    refIds: [],\n    value: undefined,\n  });\n\n  const currentValue = useMemo(() => {\n    return (\n      listOfRefId.find((refId) => refId.value === value?.options) ??\n      recoverRefIdMissing(listOfRefId, priorSelectionState.refIds, priorSelectionState.value)\n    );\n  }, [value, listOfRefId, priorSelectionState]);\n\n  const onFilterChange = useCallback(\n    (v: SelectableValue<string>) => {\n      onChange(\n        v?.value\n          ? {\n              id: FrameMatcherID.byRefId,\n              options: v.value,\n            }\n          : undefined\n      );\n    },\n    [onChange]\n  );\n\n  if (listOfRefId !== priorSelectionState.refIds || currentValue?.value !== priorSelectionState.value) {\n    updatePriorSelectionState({\n      refIds: listOfRefId,\n      value: currentValue?.value,\n    });\n  }\n  return (\n    <Select\n      options={listOfRefId}\n      onChange={onFilterChange}\n      isClearable={true}\n      placeholder=\"Change filter\"\n      value={currentValue}\n    />\n  );\n};\n"],"names":["getDefaultCondition","getAlertingValidationMessage","transformations","targets","datasourceSrv","datasource","alertingNotSupported","templateVariablesNotSupported","target","dsRef","ds","DynamicTableWithGuidelines","renderExpandedContent","props","styles","getStyles","item","index","items","_","theme","RuleLocation","namespace","group","matchesWidth","width","RuleActionsButtons","rule","rulesSource","dispatch","location","notifyApp","style","rulerRule","ruleToDelete","setRuleToDelete","rulesSourceName","isProvisioned","buttons","isFederated","isEditable","isRemovable","useIsRuleEditable","returnTo","isViewMode","inViewMode","deleteRule","identifier","buildShareUrl","appUrl","appSubUrl","config","baseUrl","ruleUrl","sourceName","Tooltip","editURL","ClipboardButton","copiedText","CloneRuleButton","Button","button","ConfirmModal","pathname","RuleConfigStatus","exceedsLimit","Icon","INSTANCES_DISPLAY_LIMIT","RuleDetails","annotations","value","RuleDetailsActionButtons","EvaluationBehaviorSummary","DetailsField","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","RuleDetailsDataSources","RuleDetailsMatchingInstances","forDuration","every","RulesTable","rules","className","showGuidelines","emptyMessage","showGroupColumn","showSummaryColumn","wrapperClass","ruleIdx","columns","useColumns","TableComponent","DynamicTable","hasRuler","rulerRulesLoaded","useHasRuler","promRule","isDeleting","isCreating","isPaused","RuleState","Provisioning","combinedRule","RuleHealth","Tokenize","rulerRules","state","result","SaveLibraryPanelModal","panel","folderUid","isUnsavedPrompt","onDismiss","onConfirm","onDiscard","searchString","setSearchString","dashState","useAsync","searchHits","dash","filteredDashboards","setFilteredDashboards","useDebounce","dashName","saveLibraryPanel","usePanelSave","discardAndClose","title","Modal","Input","e","i","initPanelEditor","sourcePanel","dashboard","discardPanelChanges","getStore","getPanel","updateDuplicateLibraryPanels","modifiedPanel","modifiedSaveModel","skipPanelUpdate","pluginChanged","panelToUpdate","exitPanelEditor","getSourcePanel","shouldDiscardChanges","hasPanelChangedInPanelEdit","panelTypeChanged","updatePanelEditorUIState","uiState","nextState","store","error","UnsavedChangesModal","onSaveSuccess","SaveDashboardButton","DashboardPrompt","setState","original","originalPath","showModal","hideModal","ModalsContext","timeoutId","savedEventUnsub","handleUnload","event","ignoreChanges","hasChanges","onHistoryBlock","panelInEdit","search","moveToBlockedLocationAfterReactStateUpdate","current","canSave","fromScript","fromFile","cleanDashboardFromIgnoredChanges","dashData","model","DashboardModel","variable","currentClean","originalClean","currentTimepicker","originalTimepicker","currentJson","originalJson","SnapshotTab","ShowMessage","SupportSnapshotService","StateManagerBase","markdownText","maxLen","snapshotText","panelTitle","blob","fileName","k","randomize","snapshot","snapshotUpdate","iframeLoading","currentTab","snapshotSize","handleEvent","evt","HelpWizard","plugin","onClose","service","loading","options","showMessage","tabs","Drawer","TabsBar","t","Tab","Spinner","Alert","Field","Select","height","CodeEditor","usePanelLatestData","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","data","now","InspectMetadataTab","metadataDatasource","InspectContent","isDataLoading","dataOptions","defaultTab","onDataOptionsChange","setCurrentTab","activeTab","formatStats","tab","InspectDataTab","InspectJSONTab","InspectErrorTab","InspectStatsTab","QueryInspector","request","queryCount","requestTime","formatted","useDatasourceMetadata","frame","dataSource","useInspectTabs","metaDs","supplier","PanelInspectorUnconnected","setDataOptions","isLoading","mapStateToProps","panelState","PanelInspector","PickerRenderer","PickerToRender","PickerLabel","labelOrName","elementId","selectors","SubMenuItems","variables","readOnly","visibleVariables","setVisibleVariables","saveSectionOpenState","id","isOpen","getSectionOpenState","defaultValue","mapDispatchToProps","connector","AngularPanelOptionsUnconnected","prevProps","angularPanelComponent","changePanelPlugin","scope","panelCtrl","template","loader","scopeProps","elem","AngularPanelOptions","DynamicConfigValueEditor","property","context","registry","onChange","onRemove","isSystemOverride","searchQuery","isCollapsible","labelCategory","c","editor","renderLabel","includeDescription","includeCounter","isExpanded","Label","Counter","IconButton","OptionsPaneCategory","OverrideCategoryTitle","matcherUi","overrideName","override","onOverrideRemove","propertyNames","p","prop","matcherOptions","getFieldOverrideCategories","categories","currentFieldConfig","onOverrideChange","overrides","overrideIndex","onOverrideAdd","idx","fieldMatchersUI","configPropertiesOptions","getOverrideProperties","forceOpen","category","OptionsPaneCategoryDescriptor","onMatcherConfigChange","onDynamicConfigValueAdd","o","registryItem","propertyConfig","OptionsPaneItemDescriptor","propIdx","registryItemForProperty","onPropertyChange","onPropertyRemove","ValuePicker","v","AddOverrideButtonContainer","label","children","getBorderTopStyles","LibraryPanelInformation","formatDate","meta","getLibraryPanelOptionsCategory","onPanelConfigChange","descriptor","getPanelFrameCategory","TextArea","Switch","DataLinksInlineEditor","links","RepeatRowSelect","directionOptions","RadioButtonGroup","maxPerRowOptions","OptionSearchEngine","query","searchRegex","sortedHits","compareHit","x","sortedOverridesHits","hits","categoryNameMatch","total","hit","left","right","getRecentOptions","allOptions","popularOptions","OptionsPaneOptions","setSearchQuery","listMode","setListMode","OptionFilter","panelFrameOptions","vizOptions","libraryPanelOptions","getVisualizationOptions","justOverrides","mainBoxElements","isSearching","optionRadioFilters","getOptionRadioFilters","renderSearchHits","showSearchRadioButtons","FilterInput","CustomScrollbar","engine","optionHits","totalCount","overrideHits","getPanelPluginWithFallback","panelType","VisualizationButton","isPanelOptionsVisible","isVizPickerOpen","onToggleOpen","onToggleOptionsPane","ButtonGroup","ToolbarButton","ChangeLibraryPanelModal","isLibraryPanel","body","PanelLibraryOptionsGroup","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","panelFilter","setPanelFilter","onPanelFilterChange","plugins","useLibraryPanel","onAddToPanelLibrary","onDismissChangeToPanel","PanelTypeFilter","LibraryPanelsView","AddLibraryPanelModal","panelsToCheckFirst","getAllSuggestions","builder","pluginId","importPanelPlugin","list","a","b","VisualizationSuggestionCard","suggestion","innerStyles","outerStyles","renderWidth","renderHeight","getPreviewDimensionsAndStyles","cardOptions","commonButtonProps","preview","PanelRenderer","showWidth","showHeight","padding","widthFactor","heightFactor","VisualizationSuggestions","suggestions","filteredSuggestions","filterSuggestionsBySearch","columnCount","spaceBetween","previewWidth","regex","s","VizTypePickerPlugin","isCurrent","onClick","disabled","PanelTypeCard","VizTypePicker","pluginsList","filteredPluginTypes","EmptySearchResult","VisualizationSelectPane","useLocalStorage","searchRef","onVizChange","pluginChange","onCloseVizPicker","radioOptions","OptionsPane","onFieldConfigsChange","onPanelOptionsChanged","instanceState","PanelEditorTableView","setOptions","timeSrv","sub","timeData","PanelChrome","innerWidth","innerHeight","PanelHeaderCorner","PanelNotSupported","message","onBackToQueries","Layout","StateHistory","panelId","onRefresh","alertDef","stateHistoryItems","ConfirmButton","TestRuleResult","formattedJson","prevState","allNodesExpanded","collapse","expand","dashPanel","payload","testRuleResponse","LoadingPlaceholder","openNodes","JSONFormatter","UnConnectedAlertTab","validationMessage","EventBus","alert","hasTransformations","element","EmptyListCTA","AlertTab","NewRuleFromPanelButton","templating","formValues","ruleFormUrl","url","usePanelCombinedRules","poll","promRuleRequest","useUnifiedAlertingSelector","rulerRuleRequest","fetch","interval","errors","err","combinedNamespaces","useCombinedRuleNamespaces","ns","PanelAlertTabContent","permissions","canCreateRules","PanelAlertTab","otherProps","DOCS_LINKS","getDocsLink","TransformationEditor","debugMode","uiConfig","configs","input","setInput","output","setOutput","matcher","inputTransforms","outputTransforms","inputSubscription","transformDataFrame","outputSubscription","mergeMap","before","opts","debugBorder","TransformationFilter","FrameSelectionEditor","filter","borderRadius","TransformationOperationRow","showDebug","toggleDebug","useToggle","showHelp","toggleHelp","showFilter","onDisableToggle","toggleFilter","renderActions","PluginStateInfo","QueryOperationAction","QueryOperationRow","OperationRowHelp","prepMarkdown","TransformationOperationRows","standardTransformersRegistry","LOCAL_STORAGE_KEY","UnThemedTransformationsEditor","lower","filtered","name","nextId","existingIds","selectable","next","startIndex","endIndex","update","removed","provided","ids","transformationCounters","transformationIds","transformation","panelData","suffix","xforms","noTransforms","showPicker","LocalStorageValueProvider","isDismissed","TransformationCard","hasTransforms","transform","Card","TransformationsEditor","PanelEditorQueries","datasourceSettings","QueryGroup","PanelEditorTabs","onChangeTab","forceUpdate","useForceUpdate","eventSubs","Subscription","renderAlertTab","getCounter","TabContent","AlertTabIndex","getPanelEditorTabs","alertingEnabled","unifiedAlertingEnabled","hasRuleReadPermissions","isAlertingAvailable","isGraph","isTimeseries","ownProps","PanelEditorUnconnected","SaveDashboardDrawer","configKey","mode","initDone","isOnlyPanel","tableViewEnabled","panelSize","DashboardPanel","panelPane","SplitPaneWrapper","size","updateTimeZoneForSession","DashNavTimeControls","editorActions","UnlinkModal","AppChromeUpdate","ToolbarButtonRow","PageToolbar","sectionNav","pageNav","Page","PanelEditor","stylesFactory","paneSpacing","AnnotationPicker","annotation","events","onEnabledChanged","setLoading","onCancel","started","stopped","InlineFieldRow","InlineField","LoadingIndicator","Annotations","onAnnotationChanged","visibleAnnotations","setVisibleAnnotations","DashboardLinksDashboard","link","linkInfo","listRef","dropdownCssClass","setDropdownCssClass","opened","setOpened","resolvedLinks","useResolvedLinks","getDropdownLocationCssClass","LinkElement","resolvedLink","rest","dashboardUID","tags","searchForTags","resolveLinks","dependencies","searchHit","uid","wrapperPos","pos","DashboardLinks","useEffectOnce","key","icon","linkElement","sanitize","SubMenuUnConnected","updatedAnnotation","readOnlyVariables","templatingState","SubMenu","UnthemedDashboardPage","tr","liveTimer","addPanelWidgetHeight","scrollElement","match","queryParams","templateVarsChangedInUrl","routeReloadCounter","prevUrlParams","urlParams","templateVarChanges","dashboardWatcher","urlEditPanelId","urlViewPanelId","updatedState","updateStatePageNavFromProps","inspectPanelId","inspectPanel","initError","editPanel","viewPanel","updateScrollTop","kioskMode","DashboardLoading","showSubMenu","toolbar","DashNav","pageClassName","DashboardFailed","DashboardGrid","DashboardSettings","GrafanaContext","folderTitle","DashboardPage","NewDashboardPage","hasDatasource","createDashboard","setCreateDashboard","NewDashboardWithDS","setError","datasourceUid","newDashboard","StorageFolderPage","slug","listing","childRoot","getPageNavFromSlug","renderListing","isFolder","isDash","navModel","getRootContentNavModel","parts","pageNavs","lastPageNav","recoverRefIdMissing","newRefIds","oldRefIds","previousValue","changedTo","refId","refId2","listOfRefId","f","priorSelectionState","updatePriorSelectionState","currentValue","onFilterChange"],"sourceRoot":""}