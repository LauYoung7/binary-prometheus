{"version":3,"file":"PublicDashboardPage.11901f831e39a404befd.js","mappings":"gUAiCA,MAAMA,EAAU,CAAC,CAAE,UAAAC,CAAU,IAAqC,CAChE,MAAMC,KAAW,eAAY,EAEvBC,EAAoBC,GAAuB,CAC/CF,KAAS,MAAyBE,CAAQ,CAAC,CAC7C,EAEA,OACE,gBAAC,IAAW,CAAC,MAAOH,EAAU,MAAO,wBAAwB,SAC1D,CAACA,EAAU,WAAW,QACrB,gBAAC,IAAmB,CAAC,UAAAA,EAAsB,iBAAAE,CAAA,CAAoC,CAEnF,CAEJ,EAEME,EAAuBC,GAAiB,CAC5C,KAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,SAAAC,CAAS,EAAIH,EAC7BJ,KAAW,eAAY,EACvBQ,KAAU,KAAW,EACrBC,KAAY,KAAYL,CAAK,EAC7BM,KAAS,MAAWC,CAAS,EAC7BC,KAAiB,eAAaC,GAAUA,EAAM,SAAS,EACvDd,EAAYa,EAAe,SAAS,EAiC1C,SA/BA,aAAU,IAAM,CACdZ,KACE,MAAc,CACZ,UAAWM,EAAM,UACjB,OAAQ,GACR,YAAaD,EAAM,OAAO,YAC1B,cAAeG,EAAQ,WACzB,CAAC,CACH,CAEF,EAAG,CAAC,CAAC,KAEL,aAAU,IAAM,CACd,GAAIC,GAAW,SAAS,SAAWF,EAAS,OAAQ,CAClD,MAAMO,EAAgBL,GAAW,YAC3BM,EAAYX,EAAM,aAGrBW,GAAW,OAASD,GAAe,MAAQC,GAAW,KAAOD,GAAe,KAC7E,CAACf,GAAW,WAAW,WAGvB,MAAW,EAAE,uBAAuB,EAGlC,CAACe,GAAe,SAAWC,GAAW,YACxC,MAAW,EAAE,eAAeA,EAAU,OAAO,CAEjD,CACF,EAAG,CAACN,EAAWF,EAAS,OAAQH,EAAM,YAAaL,GAAW,WAAW,MAAM,CAAC,EAE3EA,EAKH,gBAAC,KACC,QAAS,CAAE,KAAMA,EAAU,KAAM,EACjC,OAAQ,YACR,QAAS,gBAACD,EAAA,CAAQ,UAAAC,CAAA,CAAsB,GAEvCa,EAAe,WAAa,gBAAC,IAAe,CAAC,UAAWA,EAAe,UAAW,EACnF,gBAAC,OAAI,UAAWF,EAAO,eACrB,gBAAC,IAAa,CAAC,UAAAX,EAAsB,WAAY,GAAO,UAAW,KAAM,UAAW,KAAM,CAC5F,EACA,gBAAC,KAAqB,IAAC,CACzB,EAdO,gBAAC,IAAgB,CAAC,UAAWa,EAAe,UAAW,CAgBlE,EAEMD,EAAaK,IAA0B,CAC3C,iBAAe,OAAI,CACjB,KAAM,EACN,QAASA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC,EACjC,SAAU,MACZ,CAAC,CACH,GAEA,EAAeb,C","sources":["webpack://grafana/./public/app/features/dashboard/containers/PublicDashboardPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, PageLayoutType, TimeZone } from '@grafana/data';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { useSelector, useDispatch } from 'app/types';\n\nimport { DashNavTimeControls } from '../components/DashNav/DashNavTimeControls';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { PublicDashboardFooter } from '../components/PublicDashboardFooter/PublicDashboardsFooter';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel } from '../state';\nimport { initDashboard } from '../state/initDashboard';\n\ninterface PublicDashboardPageRouteParams {\n  accessToken?: string;\n}\n\ninterface PublicDashboardPageRouteSearchParams {\n  from?: string;\n  to?: string;\n  refresh?: string;\n}\n\nexport type Props = GrafanaRouteComponentProps<PublicDashboardPageRouteParams, PublicDashboardPageRouteSearchParams>;\n\nconst Toolbar = ({ dashboard }: { dashboard: DashboardModel }) => {\n  const dispatch = useDispatch();\n\n  const onChangeTimeZone = (timeZone: TimeZone) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n  };\n\n  return (\n    <PageToolbar title={dashboard.title} buttonOverflowAlignment=\"right\">\n      {!dashboard.timepicker.hidden && (\n        <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={onChangeTimeZone} />\n      )}\n    </PageToolbar>\n  );\n};\n\nconst PublicDashboardPage = (props: Props) => {\n  const { match, route, location } = props;\n  const dispatch = useDispatch();\n  const context = useGrafana();\n  const prevProps = usePrevious(props);\n  const styles = useStyles2(getStyles);\n  const dashboardState = useSelector((store) => store.dashboard);\n  const dashboard = dashboardState.getModel();\n\n  useEffect(() => {\n    dispatch(\n      initDashboard({\n        routeName: route.routeName,\n        fixUrl: false,\n        accessToken: match.params.accessToken,\n        keybindingSrv: context.keybindings,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (prevProps?.location.search !== location.search) {\n      const prevUrlParams = prevProps?.queryParams;\n      const urlParams = props.queryParams;\n\n      const updateTimeRangeFromUrl =\n        (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) &&\n        !dashboard?.timepicker.hidden;\n\n      if (updateTimeRangeFromUrl) {\n        getTimeSrv().updateTimeRangeFromUrl();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n    }\n  }, [prevProps, location.search, props.queryParams, dashboard?.timepicker.hidden]);\n\n  if (!dashboard) {\n    return <DashboardLoading initPhase={dashboardState.initPhase} />;\n  }\n\n  return (\n    <Page\n      pageNav={{ text: dashboard.title }}\n      layout={PageLayoutType.Custom}\n      toolbar={<Toolbar dashboard={dashboard} />}\n    >\n      {dashboardState.initError && <DashboardFailed initError={dashboardState.initError} />}\n      <div className={styles.gridContainer}>\n        <DashboardGrid dashboard={dashboard} isEditable={false} viewPanel={null} editPanel={null} />\n      </div>\n      <PublicDashboardFooter />\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  gridContainer: css({\n    flex: 1,\n    padding: theme.spacing(0, 2, 2, 2),\n    overflow: 'auto',\n  }),\n});\n\nexport default PublicDashboardPage;\n"],"names":["Toolbar","dashboard","dispatch","onChangeTimeZone","timeZone","PublicDashboardPage","props","match","route","location","context","prevProps","styles","getStyles","dashboardState","store","prevUrlParams","urlParams","theme"],"sourceRoot":""}