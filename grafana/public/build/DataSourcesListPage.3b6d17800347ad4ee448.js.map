{"version":3,"file":"DataSourcesListPage.3b6d17800347ad4ee448.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/connections/components/ConnectionsRedirectNotice/ConnectionsRedirectNotice.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceAddButton.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/datasources/pages/DataSourcesListPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nimport { SortPicker } from '../Select/SortPicker';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n  sortPicker?: {\n    onChange: (sortValue: SelectableValue) => void;\n    value?: string;\n    getSortOptions?: () => Promise<SelectableValue[]>;\n  };\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      searchQuery,\n      linkButton,\n      setSearchQuery,\n      target,\n      placeholder = 'Search by name or type',\n      sortPicker,\n    } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {sortPicker && (\n          <SortPicker\n            onChange={sortPicker.onChange}\n            value={sortPicker.value}\n            getSortOptions={sortPicker.getSortOptions}\n          />\n        )}\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { ROUTES } from '../../constants';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertContent: css`\n    display: flex;\n    flex-direction: row;\n    padding: 0;\n    justify-content: space-between;\n    align-items: center;\n  `,\n  alertParagraph: css`\n    margin: 0 ${theme.spacing(1)} 0 0;\n    line-height: ${theme.spacing(theme.components.height.sm)};\n    color: ${theme.colors.text.primary};\n  `,\n});\n\nexport enum DestinationPage {\n  dataSources = 'dataSources',\n  connectData = 'connectData',\n}\n\nconst destinationLinks = {\n  [DestinationPage.dataSources]: ROUTES.DataSources,\n  [DestinationPage.connectData]: ROUTES.ConnectData,\n};\n\nexport function ConnectionsRedirectNotice({ destinationPage }: { destinationPage: DestinationPage }) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert severity=\"warning\" title=\"\">\n      <div className={styles.alertContent}>\n        <p className={styles.alertParagraph}>\n          Data sources have a new home! You can discover new data sources or manage existing ones in the new Connections\n          page, accessible from the lefthand nav.\n        </p>\n        <LinkButton aria-label=\"Link to Connections\" icon=\"adjust-circle\" href={destinationLinks[destinationPage]}>\n          See data sources in Connections\n        </LinkButton>\n      </div>\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSourcesRoutes } from '../state';\n\nexport function DataSourceAddButton(): JSX.Element | null {\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return canCreateDataSource ? (\n    <LinkButton icon=\"plus\" href={config.appSubUrl + dataSourcesRoutes.New}>\n      Add new data source\n    </LinkButton>\n  ) : null;\n}\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, useSelector, useDispatch, AccessControlAction } from 'app/types';\n\nimport {\n  getDataSourcesSearchQuery,\n  getDataSourcesSort,\n  setDataSourcesSearchQuery,\n  setIsSortAscending,\n  useDataSourcesRoutes,\n} from '../state';\n\nconst ascendingSortValue = 'alpha-asc';\nconst descendingSortValue = 'alpha-desc';\n\nconst sortOptions = [\n  // We use this unicode 'en dash' character (U+2013), because it looks nicer\n  // than simple dash in this context. This is also used in the response of\n  // the `sorting` endpoint, which is used in the search dashboard page.\n  { label: 'Sort by A–Z', value: ascendingSortValue },\n  { label: 'Sort by Z–A', value: descendingSortValue },\n];\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n\n  // TODO remove this logic adding the link button once topnav is live\n  // instead use the actions in DataSourcesListPage\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const isTopnav = config.featureToggles.topnav;\n  const linkButton =\n    !isTopnav && canCreateDataSource\n      ? {\n          href: dataSourcesRoutes.New,\n          title: 'Add new data source',\n        }\n      : undefined;\n\n  const setSort = useCallback(\n    (sort: SelectableValue) => dispatch(setIsSortAscending(sort.value === ascendingSortValue)),\n    [dispatch]\n  );\n  const isSortAscending = useSelector(({ dataSources }: StoreState) => getDataSourcesSort(dataSources));\n\n  const sortPicker = {\n    onChange: setSort,\n    value: isSortAscending ? ascendingSortValue : descendingSortValue,\n    getSortOptions: () => Promise.resolve(sortOptions),\n  };\n\n  return (\n    <PageActionBar\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}\n      key=\"action-bar\"\n      sortPicker={sortPicker}\n      linkButton={linkButton}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, Card, Tag, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasFetched = useSelector(({ dataSources }: StoreState) => dataSources.hasFetched);\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const hasWriteRights = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={!hasFetched}\n      hasCreateRights={hasCreateRights}\n      hasWriteRights={hasWriteRights}\n      hasExploreRights={hasExploreRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n  hasWriteRights: boolean;\n  hasExploreRights: boolean;\n};\n\nexport function DataSourcesListView({\n  dataSources,\n  dataSourcesCount,\n  isLoading,\n  hasCreateRights,\n  hasWriteRights,\n  hasExploreRights,\n}: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          const dsLink = config.appSubUrl + dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid);\n          return (\n            <li key={dataSource.uid}>\n              <Card href={hasWriteRights ? dsLink : undefined}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n                <Card.Tags>\n                  <LinkButton\n                    icon=\"apps\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    href={`dashboard/new-with-ds/${dataSource.uid}`}\n                  >\n                    Build a dashboard\n                  </LinkButton>\n                  {hasExploreRights && (\n                    <LinkButton\n                      icon=\"compass\"\n                      fill=\"outline\"\n                      variant=\"secondary\"\n                      className={styles.button}\n                      href={constructDataSourceExploreUrl(dataSource)}\n                    >\n                      Explore\n                    </LinkButton>\n                  )}\n                </Card.Tags>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n    button: css({\n      marginLeft: theme.spacing(2),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport {\n  ConnectionsRedirectNotice,\n  DestinationPage,\n} from 'app/features/connections/components/ConnectionsRedirectNotice';\n\nimport { DataSourceAddButton } from '../components/DataSourceAddButton';\nimport { DataSourcesList } from '../components/DataSourcesList';\n\nexport function DataSourcesListPage() {\n  const actions = config.featureToggles.topnav ? <DataSourceAddButton /> : undefined;\n  return (\n    <Page navId=\"datasources\" actions={actions}>\n      <Page.Contents>\n        {config.featureToggles.dataConnectionsConsole && (\n          <ConnectionsRedirectNotice destinationPage={DestinationPage.dataSources} />\n        )}\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourcesListPage;\n"],"names":["PageActionBar","searchQuery","linkButton","setSearchQuery","target","placeholder","sortPicker","linkProps","getStyles","theme","DestinationPage","destinationLinks","ConnectionsRedirectNotice","destinationPage","styles","Alert","DataSourceAddButton","canCreateDataSource","dataSourcesRoutes","ascendingSortValue","descendingSortValue","sortOptions","DataSourcesListHeader","dispatch","q","dataSources","config","setSort","sort","isSortAscending","DataSourcesList","state","dataSourcesCount","hasFetched","hasCreateRights","hasWriteRights","hasExploreRights","DataSourcesListView","isLoading","PageLoader","EmptyListCTA","dataSource","dsLink","Card","Tag","DataSourcesListPage","actions"],"sourceRoot":""}