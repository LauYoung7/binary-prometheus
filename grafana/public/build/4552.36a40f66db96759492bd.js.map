{"version":3,"file":"4552.36a40f66db96759492bd.js","mappings":"qQAIe,MAAMA,CAAmB,CACtC,OAAO,sBAAsBC,EAA4BC,EAAoB,CAC3E,MAAMC,EAAgB,CAAC,OAAQ,SAAU,IAAK,GAAG,EACjD,SAAI,YAASA,EAAeD,CAAa,EAChC,KAAKD,IAAYC,EAAc,CAAC,EAAE,YAAY,IAGhD,IAAID,IAAYC,EAAc,CAAC,EAAE,YAAY,GACtD,CAEA,OAAO,kCAAkCE,EAAkB,CACzD,MAAMH,EAAY,CAACG,EAAS,MAAM,EAAGA,EAAS,OAAS,CAAC,EAClDC,EAAOD,EAASA,EAAS,OAAS,CAAC,EAEzC,GAAIA,EAAS,QAAQ,IAAI,EAAI,GAC3B,OAAOJ,EAAmB,sBAAsB,EAAG,GAAG,EAGxD,GAAII,EAASA,EAAS,OAAS,CAAC,IAAM,IAAK,CACzC,IAAIE,EAAaL,EAAY,GAAM,GAEnC,OAAIK,EAAY,IACdA,EAAY,GAGPN,EAAmB,sBAAsBM,EAAW,GAAG,CAChE,CAEA,OAAON,EAAmB,sBAAsBC,EAAWI,CAAI,CACjE,CAEA,OAAO,qBAAqBD,EAAeG,EAA6B,CACtE,MAAMC,KAAa,UAAOD,EAAoBE,GAAMA,IAAM,MAAM,EAEhE,IAAIC,EAAUF,EAAW,CAAC,EAC1B,MAAMG,EAAa,gBAAuBP,CAAQ,EAElD,QAASQ,EAAI,EAAGA,EAAIJ,EAAW,OAAQI,IAEjCD,EAAa,gBAAuBH,EAAWI,CAAC,CAAC,IAC/CA,EAAI,EAAIJ,EAAW,OACrBE,EAAUF,EAAWI,EAAI,CAAC,EAE1BF,EAAUF,EAAWI,CAAC,GAK5B,OAAOF,CACT,CAEA,OAAO,mCAAmCG,EAAkB,CAC1D,IAAIC,EAAS,EACTD,EAAS,UAAU,EAAG,CAAC,IAAM,OAC/BC,EAAS,GAGX,MAAMC,EAAQF,EAAS,UAAUC,EAAQD,EAAS,OAAS,CAAC,EACtDR,EAAOQ,EAAS,UAAUA,EAAS,OAAS,CAAC,EAEnD,OAAOE,EAAQ,IAAMf,EAAmB,eAAe,CAACe,EAAOV,CAAI,CACrE,CAEA,OAAO,eAAeU,EAAeV,EAAc,CACjD,IAAIW,EAAO,GAeX,OAbIX,IAAS,MACXW,EAAO,UAELX,IAAS,MACXW,EAAO,UAELX,IAAS,MACXW,EAAO,QAELX,IAAS,MACXW,EAAO,OAGLD,EAAQ,EACHC,EAAO,IAGTA,CACT,CAEA,OAAO,iCAAiCH,EAAkB,CACxD,GAAIA,IAAa,OACf,MAAO,OAGT,IAAIC,EAAS,EACTD,EAAS,UAAU,EAAG,CAAC,IAAM,OAC/BC,EAAS,GAGX,MAAMC,EAAQF,EAAS,UAAUC,EAAQD,EAAS,OAAS,CAAC,EACtDR,EAAOQ,EAAS,UAAUA,EAAS,OAAS,CAAC,EAEnD,OAAOE,EAAQf,EAAmB,cAAc,CAACe,EAAOV,CAAI,CAC9D,CAEA,OAAO,cAAcU,EAAeV,EAAc,CAChD,OAAIA,IAAS,IACJ,IAELA,IAAS,IACJ,IAELA,IAAS,IACJ,IAELA,IAAS,IACJ,IAGF,EACT,CACF,CC/Ge,MAAMY,CAAe,CAClC,OAAO,oBACLC,EACAC,EACAC,EACwC,CACxC,MAAMC,EAA+C,CAAC,EAEtD,GAAI,CAACH,EACH,OAAOG,EAGT,QAAS,EAAI,EAAG,EAAIH,EAAO,MAAM,OAAQ,IACvC,GAAI,IAAC,QAAKG,EAAM,CAAC,WAAS,OAAIH,EAAO,MAAM,CAAC,EAAGE,CAAc,CAAC,CAAC,EAAG,CAChE,MAAML,KAAQ,OAAIG,EAAO,MAAM,CAAC,EAAGE,CAAc,EAC3CJ,KAAO,OAAIE,EAAO,MAAM,CAAC,EAAGC,EAAeJ,CAAK,EAEtDM,EAAK,KAAK,CACR,KAAAL,EACA,MAAAD,CACF,CAAC,CACH,CAEF,OAAOM,CACT,CAEA,OAAO,mBAAmBH,EAAaI,EAAkE,CACvG,MAAMD,EAA+C,CAAC,EAEtD,GAAI,CAACH,EACH,OAAOG,EAGT,QAAST,EAAI,EAAGA,EAAIM,EAAO,MAAM,OAAQN,IAErC,OAAOM,EAAO,MAAMN,CAAC,EAAE,MAAS,WAC/B,CAACU,GAAmBJ,EAAO,MAAMN,CAAC,EAAE,KAAK,kBAAkB,IAAMU,EAAgB,kBAAkB,IAEpGD,EAAK,KAAK,CACR,KAAMH,EAAO,MAAMN,CAAC,EAAE,KACtB,MAAOM,EAAO,MAAMN,CAAC,EAAE,IACzB,CAAC,EAIL,OAAOS,CACT,CAEA,OAAO,cAAcH,EAA6CK,EAAoB,CACpF,MAAMC,EAAkB,CAAC,OAAQ,UAAW,UAAW,UAAW,QAAS,OAAO,EAC5EC,EAAaP,GAAQ,MAAM,KAAMQ,GAAMA,EAAE,KAAK,QAAUH,CAAU,EAExE,OAAKE,EASE,CACL,eAAgBA,EAAW,uBAC3B,kBAAmBA,EAAW,2BAA6BD,EAE3D,oBAAqB,CACnB,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,GAAGP,EAAe,gBAAgBQ,EAAW,sBAAwB,CAAC,CAAC,CACzE,EACA,WAAYR,EAAe,gBAAgBQ,EAAW,YAAc,CAAC,CAAC,CACxE,EAjBS,CACL,eAAgB,GAChB,kBAAmBD,EACnB,oBAAqB,CAAC,EACtB,WAAY,CAAC,CACf,CAaJ,CAEA,OAAO,gBAAgBG,EAAsF,CAC3G,MAAMnB,EAAmC,CAAC,EAE1C,OAAKmB,GAILA,EAAqB,QAASC,GAAU,CAClCA,EAAM,WACRpB,EAAW,KAAK,CACd,MAAOR,EAAmB,mCAAmC4B,EAAM,SAAS,EAC5E,MAAOA,EAAM,SACf,CAAC,CAEL,CAAC,EAEMpB,CACT,CAEA,OAAO,gBAAgBqB,EAAkD,CACvE,OAAOA,EAAmB,IAAKC,IACtB,CACL,MAAOA,EAAU,gBAAkBA,EAAU,MAC7C,MAAOA,EAAU,KACnB,EACD,CACH,CAEA,OAAO,mBAAmBZ,EAAqD,CAC7E,MAAMG,EAA+C,CAAC,EAEtD,GAAI,CAACH,EACH,OAAOG,EAGT,MAAMD,EAAiB,iBACjBD,EAAgB,cACtB,QAAS,EAAI,EAAG,EAAID,EAAO,MAAM,OAAQ,OAClC,QAAKG,EAAM,CAAC,WAAS,OAAIH,EAAO,MAAM,CAAC,EAAGE,CAAc,CAAC,CAAC,GAC7DC,EAAK,KAAK,CACR,KAAM,MAAG,OAAIH,EAAO,MAAM,CAAC,EAAGC,CAAa,IAC3C,SAAO,OAAID,EAAO,MAAM,CAAC,EAAGE,CAAc,CAC5C,CAAC,EAIL,OAAOC,CACT,CAEA,OAAO,4BAA4BH,EAAsD,CACvF,MAAMG,EAAgD,CAAC,EAEvD,GAAI,CAACH,EACH,OAAOG,EAGT,MAAMD,EAAiB,iBACjBD,EAAgB,cACtB,QAAS,EAAI,EAAG,EAAID,EAAO,KAAK,MAAM,OAAQ,OACvC,QAAKG,EAAM,CAAC,WAAS,OAAIH,EAAO,KAAK,MAAM,CAAC,EAAGE,CAAc,CAAC,CAAC,GAClEC,EAAK,KAAK,CACR,MAAO,MAAG,OAAIH,EAAO,KAAK,MAAM,CAAC,EAAGC,CAAa,UAAO,OAAID,EAAO,KAAK,MAAM,CAAC,EAAGE,CAAc,IAChG,SAAO,OAAIF,EAAO,KAAK,MAAM,CAAC,EAAGE,CAAc,CACjD,CAAC,EAIL,OAAOC,CACT,CAEA,OAAO,yBAAyBH,EAAsD,CACpF,MAAMG,EAAgD,CAAC,EAEvD,GAAI,CAACH,EACH,OAAOG,EAGT,MAAMD,EAAiB,aACjBD,EAAgB,OACtB,QAAS,EAAI,EAAG,EAAID,EAAO,KAAK,MAAM,OAAQ,OACvC,QAAKG,EAAM,CAAC,WAAS,OAAIH,EAAO,KAAK,MAAM,CAAC,EAAE,WAAYE,CAAc,CAAC,CAAC,GAC7EC,EAAK,KAAK,CACR,SAAO,OAAIH,EAAO,KAAK,MAAM,CAAC,EAAGC,CAAa,EAC9C,SAAO,OAAID,EAAO,KAAK,MAAM,CAAC,EAAE,WAAYE,CAAc,CAC5D,CAAC,EAIL,OAAOC,CACT,CAEA,OAAO,eAAeH,EAAuC,CAC3D,MAAMa,EAAqC,CAAC,EAE5C,GAAI,CAACb,EACH,OAAOa,EAGT,UAAWC,KAAYd,EAAO,MAC5Ba,EAAU,KAAK,CAAE,KAAMC,EAAS,KAAM,YAAaA,EAAS,YAAa,aAAc,MAAU,CAAC,EAGpG,OAAOD,CACT,CACF,CCpLO,MAAME,GAAY,CAACC,EAA+BnB,IACvDmB,EAAQ,KAAMR,GAAOA,EAAE,QAAUO,GAAUP,EAAE,QAASX,CAAK,EAAIW,EAAE,QAAUX,CAAM,EAEtEoB,GAAc,CAACD,EAA+BE,EAAmB,CAAC,IAAM,CACnF,GAAIA,EAAO,SAAW,EACpB,MAAO,CAAC,EAEV,MAAMC,EAAMD,EAAO,OAAO,CAACE,EAAOC,KAChCD,EAAM,IAAIC,CAAI,EACPD,GACN,IAAI,GAAK,EACZ,OAAOJ,EAAQ,OAAQM,GAAWH,EAAI,IAAIG,EAAO,KAAK,CAAC,CACzD,EAEaC,GAAYf,IAAwC,CAAE,MAAOA,EAAE,MAAO,MAAOA,EAAE,IAAK,GAEpFgB,GAAoB,CAC/BN,EACAO,EACA5B,IACG,CACH,MAAMmB,EAAU,CAAC,GAAGE,EAAQO,CAAmB,EAEzCC,EAAeR,EAAO,IAAKS,GAAMA,EAAE,MAAM,YAAY,CAAC,EAAE,OAAOF,EAAoB,QAAQ,IAAKG,GAAMA,EAAE,KAAK,CAAC,EACpH,OAAI/B,GAAS,CAAC6B,EAAa,SAAS7B,EAAM,YAAY,CAAC,GACrDmB,EAAQ,KAAK,CAAE,MAAOnB,EAAO,MAAAA,CAAM,CAAC,EAG/BmB,CACT,EAEO,SAASa,GAAmDvC,EAAiB,CAClF,MAAMwC,EAAgC,CAAC,EACvC,OAAAxC,EAAW,QAASyC,GAAY,CAC1BA,EAAG,QAAU,QACfD,EAAoB,KAAK,UAAU,aAAa,mBAAmB,iCAAiCC,EAAG,KAAK,CAAC,CAAC,CAElH,CAAC,EACMD,CACT,CAIO,MAAME,EAAa,CACxB,aAAc,eACd,aAAc,eACd,YAAa,cACb,cAAe,eACjB,EAEO,SAASC,GAAoBpC,EAAYqC,EAAoC,CAClF,OAAI,OAAOrC,GAAU,SAIfqC,EAAS,OAAUA,EAAS,YAAc,CAACA,EAAS,SAC/C,IAAMrC,EAAQ,IAEdA,EAIP,OAAOA,GAAU,SACZA,KAGY,OAAIA,EAAQsC,GAC3B,OAAOtC,GAAU,SACZA,EAGF,IAAMsC,EAAM,GACpB,EACmB,KAAK,GAAG,CAC9B,C,2BC9EYC,GAAAA,IACVA,EAAA,aAAe,gBACfA,EAAA,aAAe,sBACfA,EAAA,mBAAqB,uBACrBA,EAAA,mBAAqB,sBACrBA,EAAA,oBAAsB,wBACtBA,EAAA,gBAAkB,mBAClBA,EAAA,mBAAqB,uBACrBA,EAAA,iBAAmB,qBACnBA,EAAA,gBAAkB,mBAClBA,EAAA,eAAiB,gBAEjBA,EAAA,0BAA4B,qCAZlBA,IAAAA,GAAA,ICoBAC,IAAAA,IACVA,EAAA,OAAS,aACTA,EAAA,MAAQ,kBACRA,EAAA,aAAe,oBACfA,EAAA,KAAO,GAJGA,IAAAA,IAAA,ICbZ,MAAMC,GAA6B,OAAO,yBAAyB,EAE5D,SAASC,GAAYvB,EAAmF,CAC7G,OAAKA,EAAQ,SAAS,cAYfA,EAAQ,SAAS,cATlBA,EAAQ,SAAS,UAAYA,EAAQ,SAAS,SACzC,eAKFwB,EAAA,+BAAsC,MAAQ,cAIzD,CAEA,SAASC,IAA+B,CACtC,OAAQD,EAAA,cAAoB,CAC1B,KAAKH,GAAW,OAChB,KAAKA,GAAW,KAChB,KAAK,OACH,MAAO,eACT,KAAKA,GAAW,MACd,MAAO,oBACT,KAAKA,GAAW,aACd,MAAO,kBACT,QACE,MAAM,IAAI,MAAM,cAAcG,EAAA,+BAAoC,CACtE,CACF,CAEO,SAASE,GAAkBC,EAA4B,CAC5D,OAAQA,EAAY,CAClB,IAAK,eACH,MAAO,2BACT,IAAK,oBACH,MAAO,0BACT,IAAK,kBACH,MAAO,0BACT,QACE,MAAM,IAAI,MAAM,0BAA0B,CAC9C,CACF,CAEO,SAASC,GAAc5B,EAA4E,CAExG,OADiBuB,GAAYvB,CAAO,EAClB,CAChB,IAAK,MAEH,OAAOyB,GAAqB,EAC9B,IAAK,eACH,OAAOzB,EAAQ,SAAS,WAAayB,GAAqB,CAC9D,CACF,CAEA,SAASI,GAAU7B,EAAwE,CACzF,GAAIA,EAAQ,iBAAiB,aAE3B,OAAOsB,GACF,CACL,MAAMQ,EAAS9B,EAAQ,gBAAgB,aACvC,OAAO,OAAO8B,GAAW,UAAYA,EAAO,OAAS,EAAIA,EAAS,MACpE,CACF,CAEO,SAASC,GAAsBC,EAAwC,CAC5E,OAAQA,EAAY,SAAU,CAC5B,IAAK,MACH,MAAO,GACT,IAAK,eACH,MAAO,CAAC,EAAEA,EAAY,YAAcA,EAAY,UAAYA,EAAY,UAAYA,EAAY,aACpG,CACF,CAEO,SAASC,GAAejC,EAAoD,CAEjF,OADiBuB,GAAYvB,CAAO,EAClB,CAChB,IAAK,MACH,OAAIwB,EAAA,+BACK,CACL,SAAU,KACZ,EAIO,CACL,SAAU,eACV,WAAYC,GAAqB,CACnC,EAEJ,IAAK,eACH,MAAO,CACL,SAAU,eACV,WAAYzB,EAAQ,SAAS,WAAayB,GAAqB,EAC/D,SAAUzB,EAAQ,SAAS,SAC3B,SAAUA,EAAQ,SAAS,SAC3B,aAAc6B,GAAU7B,CAAO,CACjC,CACJ,CACF,CAEO,SAASkC,GACdlC,EACAgC,EACyB,CACzB,OAAQA,EAAY,SAAU,CAC5B,IAAK,MACH,GAAI,CAACR,EAAA,+BACH,MAAM,IAAI,MAAM,mEAAmE,EAGrF,OAAAxB,EAAU,CACR,GAAGA,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,cAAe,KACjB,CACF,EAEOA,EAET,IAAK,eACH,OAAAA,EAAU,CACR,GAAGA,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,cAAe,eACf,UAAWgC,EAAY,YAAcP,GAAqB,EAC1D,SAAUO,EAAY,SACtB,SAAUA,EAAY,QACxB,EACA,eAAgB,CACd,GAAGhC,EAAQ,eACX,aAAc,OAAOgC,EAAY,cAAiB,SAAWA,EAAY,aAAe,MAC1F,EACA,iBAAkB,CAChB,GAAGhC,EAAQ,iBACX,aAAc,OAAOgC,EAAY,cAAiB,QACpD,CACF,EAEOhC,CACX,CACF,C,iDCrDO,MAAMmC,EAA6D,CACxE,WAtGwB,CACxB,aAAc,CACZ,SAAU,CACR,OAAQ,uBACV,EACA,WAAY,CACV,MAAO,yBACT,EACA,SAAU,CACR,MAAO,uBACT,EACA,SAAU,CACR,MAAO,uBACT,EACA,aAAc,CACZ,MAAO,2BACT,EACA,kBAAmB,CACjB,OAAQ,gCACV,EACA,oBAAqB,CACnB,MAAO,kCACT,CACF,EACA,YAAa,CACX,OAAQ,CACN,OAAQ,+CACV,EACA,eAAgB,CACd,OAAQ,CACN,OAAQ,oCACV,EACA,OAAQ,CACN,MAAO,oCACT,EACA,MAAO,CACL,OAAQ,mCACV,EACA,OAAQ,CACN,OAAQ,oCACV,EACA,SAAU,CACR,SAAU,uCACV,aAAc,CACZ,MAAO,0CACT,EACA,cAAe,CACb,MAAO,4CACT,EACA,UAAW,CACT,MAAO,uCACT,EACA,OAAQ,CACN,MAAO,oCACT,EACA,SAAU,CACR,MAAO,sCACT,CACF,CACF,EACA,mBAAoB,CAClB,WAAY,CACV,MAAO,yBACT,CACF,EACA,gBAAiB,CACf,gBAAiB,CACf,MAAO,8BACT,CACF,EACA,gBAAiB,CACf,UAAW,CACT,MAAO,4CACT,EACA,cAAe,CACb,MAAO,6CACT,CACF,CACF,EACA,eAAgB,CACd,UAAW,CACT,MAAO,wBACT,EACA,aAAc,CACZ,MAAO,0BACT,EACA,cAAe,CACb,MAAO,4BACT,EACA,UAAW,CACT,MAAO,uBACT,EACA,SAAU,CACR,MAAO,sBACT,EACA,OAAQ,CACN,MAAO,oBACT,CACF,CACF,CAIA,ECjGM,CAAE,MAAAC,EAAM,EAAI,eAWZC,GAAyD,CAC7D,CACE,MAAO,MACP,MAAO,kBACT,EACA,CACE,MAAO,eACP,MAAO,kBACT,CACF,EAEMC,EAAc,GAEPC,GAAkDC,GAAiB,CAC9E,KAAM,CAAE,YAAAR,EAAa,kBAAAS,EAAmB,oBAAAC,EAAqB,SAAAC,EAAU,uBAAAC,CAAuB,EAAIJ,EAE5FK,EAAoBC,GAA6C,CACrE,GAAIJ,EAAqB,CACvB,MAAMK,EAA4B,CAChC,GAAGf,EACH,SAAUc,EAAS,OAAS,KAC9B,EACAJ,EAAoBK,CAAO,CAC7B,CACF,EAEMC,EAAsBF,GAAsC,CAChE,GAAIJ,GAAuBV,EAAY,WAAa,eAAgB,CAClE,MAAMe,EAA4B,CAChC,GAAGf,EACH,WAAYc,EAAS,KACvB,EACAJ,EAAoBK,CAAO,CAC7B,CACF,EAEME,EAAoBC,GAAyC,CACjE,GAAIR,GAAuBV,EAAY,WAAa,eAAgB,CAClE,MAAMe,EAA4B,CAChC,GAAGf,EACH,SAAUkB,EAAM,OAAO,KACzB,EACAR,EAAoBK,CAAO,CAC7B,CACF,EAEMI,EAAoBD,GAAyC,CACjE,GAAIR,GAAuBV,EAAY,WAAa,eAAgB,CAClE,MAAMe,EAA4B,CAChC,GAAGf,EACH,SAAUkB,EAAM,OAAO,KACzB,EACAR,EAAoBK,CAAO,CAC7B,CACF,EAEMK,EAAwBF,GAAyC,CACrE,GAAIR,GAAuBV,EAAY,WAAa,eAAgB,CAClE,MAAMe,EAA4B,CAChC,GAAGf,EACH,aAAckB,EAAM,OAAO,KAC7B,EACAR,EAAoBK,CAAO,CAC7B,CACF,EAEMM,EAAsB,IAAM,CAChC,GAAIX,GAAuBV,EAAY,WAAa,eAAgB,CAClE,MAAMe,EAA4B,CAChC,GAAGf,EACH,aAAc,EAChB,EACAU,EAAoBK,CAAO,CAC7B,CACF,EAEA,OACE,gBAAC,OAAI,UAAU,iBACZH,GACC,gBAACU,EAAA,GACC,MAAM,iBACN,WAAYhB,EACZ,QAAQ,sDACR,cAAaH,EAAU,WAAW,aAAa,SAAS,OACxD,QAAQ,uBAER,gBAACoB,EAAA,IACC,UAAU,WACV,MAAOlB,GAAgB,KAAMmB,GAAQA,EAAI,QAAUxB,EAAY,QAAQ,EACvE,QAASK,GACT,SAAUQ,EACV,SAAAF,CAAA,CACF,CACF,EAEDX,EAAY,WAAa,gBACxB,gCACGS,GACC,gBAACa,EAAA,GACC,MAAM,cACN,WAAYhB,EACZ,QAAQ,wBACR,cAAaH,EAAU,WAAW,aAAa,WAAW,MAC1D,QAAQ,mBACR,SAAAQ,CAAA,EAEA,gBAACY,EAAA,IACC,QAAQ,mBACR,aAAW,cACX,UAAU,WACV,MAAOd,EAAkB,KAAMe,GAAQA,EAAI,QAAUxB,EAAY,UAAU,EAC3E,QAASS,EACT,SAAUO,CAAA,CACZ,CACF,EAEF,gBAACM,EAAA,GACC,MAAM,wBACN,WAAYhB,EACZ,cAAaH,EAAU,WAAW,aAAa,SAAS,MACxD,QAAQ,aAER,gBAAC,OAAI,UAAU,YACb,gBAACC,GAAA,CACC,aAAW,YACX,UAAU,WACV,YAAY,uCACZ,MAAOJ,EAAY,UAAY,GAC/B,SAAUiB,EACV,SAAAN,CAAA,CACF,CACF,CACF,EACA,gBAACW,EAAA,GACC,MAAM,0BACN,WAAYhB,EACZ,cAAaH,EAAU,WAAW,aAAa,SAAS,MACxD,QAAQ,aAER,gBAAC,OAAI,UAAU,YACb,gBAACC,GAAA,CACC,UAAU,WACV,aAAW,YACX,YAAY,uCACZ,MAAOJ,EAAY,UAAY,GAC/B,SAAUmB,EACV,SAAAR,CAAA,CACF,CACF,CACF,EACC,CAACA,IACC,OAAOX,EAAY,cAAiB,SACnC,gBAACsB,EAAA,EAAW,CAAC,MAAM,gBAAgB,WAAYhB,EAAa,QAAQ,iBAClE,gBAAC,OAAI,UAAU,WAAW,MAAO,CAAE,QAAS,OAAQ,IAAK,KAAM,GAC7D,gBAACF,GAAA,CACC,aAAW,gBACX,YAAY,aACZ,SAAU,GACV,cAAa,gBACf,EACA,gBAACqB,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAASJ,EAAqB,SAAAV,CAAA,EAAoB,OAE5F,CACF,CACF,EAEA,gBAACW,EAAA,GACC,MAAM,gBACN,WAAYhB,EACZ,cAAaH,EAAU,WAAW,aAAa,aAAa,MAC5D,QAAQ,iBAER,gBAACC,GAAA,CACC,UAAU,WACV,aAAW,gBACX,YAAY,uCACZ,MAAOJ,EAAY,cAAgB,GACnC,SAAUoB,EACV,GAAG,gBACH,SAAAT,CAAA,CACF,CACF,EAEN,EAEDH,EAAM,QACT,CAEJ,EAEA,GAAe,KCxMT,GAAc,GAYPkB,GAAiDlB,GAAiB,CAC7E,KAAM,CACJ,YAAAR,EACA,SAAAW,EACA,QAAA3C,EACA,cAAA2D,EACA,iBAAAC,EACA,qBAAAC,EACA,sBAAAC,CACF,EAAItB,EACEuB,EAAoBhC,GAAsBC,CAAW,EACrD,CAACgC,EAA0BC,CAAmB,KAAI,cAAY9C,GAAQA,EAAM,EAAG,CAAC,KAEtF,aAAU,IAAM,CACd,GAAI,CAACyC,GAAoB,CAACG,EAAmB,CAC3CG,EAAoB,CAAC,CAAC,EACtB,MACF,CACA,IAAIC,EAAW,GACf,OAAAP,EAAiB,EAAE,KAAM5E,GAAW,CAC7BmF,GACHD,EAAoBlF,EAAQgF,CAAwB,CAExD,CAAC,EACM,IAAM,CACXG,EAAW,EACb,CAGF,EAAG,CAACH,CAAwB,CAAC,EAE7B,MAAME,EAAsB,CAACE,EAA0CC,EAAa,KAAU,CAC5FP,EAAsBM,CAAQ,EAC1BR,IACES,GAAc,CAACrE,EAAQ,gBAAkBoE,EAAS,OAAS,EAE7DE,EAASF,EAAS,CAAC,CAAC,EACXpE,EAAQ,iBACHoE,EAAS,KAAMZ,GAAQA,EAAI,QAAUxD,EAAQ,cAAc,GAGvEsE,EAAS,MAAS,GAI1B,EAEMA,EAAYxB,GAAkDe,EAAqBf,GAAU,KAAK,EAExG,OACE,gCACE,gBAACQ,EAAA,GACC,MAAM,uBACN,WAAY,GACZ,cAAanB,EAAU,WAAW,aAAa,oBAAoB,MACnE,QAAQ,wBAER,gBAAC,OAAI,UAAU,WAAW,MAAO,CAAE,QAAS,OAAQ,IAAK,KAAM,GAC7D,gBAACoB,EAAA,IACC,QAAQ,uBACR,aAAW,uBACX,MACEvD,EAAQ,eAAiB2D,EAAc,KAAMH,GAAQA,EAAI,QAAUxD,EAAQ,cAAc,EAAI,OAE/F,QAAS2D,EACT,SAAAW,EACA,SAAA3B,CAAA,CACF,EACA,gBAACc,EAAA,IACC,QAAQ,YACR,KAAK,SACL,QAASQ,EACT,SAAU,CAACF,GAAqBpB,EAChC,cAAaR,EAAU,WAAW,aAAa,kBAAkB,QAClE,oBAED,CACF,CACF,CACF,CAEJ,EC3FMoC,GAAc,CAClB,CAAE,MAAO,eAAgB,MAAO,OAAQ,EACxC,CAAE,MAAO,kBAAmB,MAAO,qBAAsB,EACzD,CAAE,MAAO,oBAAqB,MAAO,aAAc,CACrD,EAQaC,GAA2ChC,GAAiB,CACvE,KAAM,CAAE,cAAAiC,EAAe,iBAAAb,EAAkB,QAAA5D,CAAQ,EAAIwC,EAC/C,CAACmB,EAAee,CAAgB,KAAI,YAAyC,CAAC,CAAC,EAC/E1C,KAAc,WAAQ,IAAMC,GAAeO,EAAM,OAAO,EAAG,CAACA,EAAM,OAAO,CAAC,EAE1EE,EAAsB,CAACV,EAA+B2C,IAAkC,CACvFA,GACHD,EAAiB,CAAC,CAAC,EAErBD,EAAezE,GACbkC,GAAkB,CAAE,GAAGlC,EAAS,SAAU,CAAE,GAAGA,EAAQ,SAAU,eAAA2E,CAAe,CAAE,EAAG3C,CAAW,CAClG,CACF,EAEM8B,EAAyBc,GAC7BF,EAAiBE,CAAqB,EAElCf,EAAwBc,GAC5BF,EAAezE,IAAa,CAAE,GAAGA,EAAS,SAAU,CAAE,GAAGA,EAAQ,SAAU,eAAA2E,CAAe,CAAE,EAAE,EAEhG,OACE,gCACE,gBAAC,MAAG,UAAU,gBAAe,gBAAc,EAC3C,gBAACpC,GAAA,CACC,uBAAwBf,EAAA,+BACxB,YAAAQ,EACA,kBAAmBuC,GACnB,oBAAA7B,EACA,SAAUF,EAAM,QAAQ,UAExB,gBAACkB,GAAA,CACC,cAAAC,EACA,YAAA3B,EACA,iBAAA4B,EACA,SAAUpB,EAAM,QAAQ,SACxB,sBAAAsB,EACA,qBAAAD,EACA,QAAS7D,EAAQ,SACnB,CACF,CACF,CAEJ,EAEA,GAAe,KC1CR,MAAM6E,WAAqB,eAA4B,CAI5D,YAAYrC,EAAc,CACxB,MAAMA,CAAK,EAJb,oBAA2B,KAAe,EAY1C,KAAQ,cAAiBsC,GAAqF,CAC5G,MAAM/B,EAAU+B,EAAY,KAAK,MAAM,OAAO,EAC9C,KAAK,MAAM,gBAAgB/B,CAAO,EAElC,KAAK,SAAS,CAAE,QAAS,EAAK,CAAC,CACjC,EAEA,KAAQ,YAAc,SAA2B,CAC3C,KAAK,MAAM,UACb,QAAM,MAAc,EACjB,IAAI,oBAAoB,KAAK,MAAM,QAAQ,KAAM,KAAK,MAAM,OAAO,EACnE,KAAM/D,GAAoD,IACzD,OAA6B,KAAK,MAAO,UAAWA,EAAO,WAAW,OAAO,CAC/E,CAAC,EAEH,KAAK,SAAS,CAAE,QAAS,EAAM,CAAC,EAEpC,EAEA,KAAQ,iBAAmB,SAAqD,CAC9E,MAAM,KAAK,YAAY,EAEvB,MAAM+F,EAAQ,0BACd,GAAI,CACF,MAAM/F,EAAS,QAAM,MAAc,EAChC,MAAM,CACL,IAAK,KAAK,QAAU+F,EACpB,OAAQ,KACV,CAAC,EACA,UAAU,EAEb,YAAK,SAAS,CAAE,MAAO,MAAU,CAAC,EAC3BhG,EAAe,4BAA4BC,CAAM,CAC1D,OAASgG,EAAP,CACA,SAAI,OAAaA,CAAG,GAClB,KAAK,SAAS,CACZ,MAAO,CACL,MAAO,iCACP,YAAa,oFACb,QAASA,GAAK,MAAM,OACtB,CACF,CAAC,EAEI,QAAQ,QAAQ,CAAC,CAAC,CAC3B,CACF,EAnDE,KAAK,MAAQ,CACX,QAAS,EACX,EACA,KAAK,QAAU,oBAAoB,KAAK,MAAM,QAAQ,gBAAgBhE,EAAW,4BACnF,CAiDA,QAAS,CACP,KAAM,CAAE,QAAAhB,CAAQ,EAAI,KAAK,MACnB,CAAE,MAAAiF,CAAM,EAAI,KAAK,MAEvB,OACE,gCACE,gBAACT,GAAa,CAAC,QAAAxE,EAAkB,cAAe,KAAK,cAAe,iBAAkB,KAAK,iBAAkB,EAC5GiF,GACC,gBAACC,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAOD,EAAM,OACnC,gBAAC,SAAGA,EAAM,WAAY,EACrBA,EAAM,SAAW,gBAAC,WAAQ,MAAO,CAAE,WAAY,UAAW,GAAIA,EAAM,OAAQ,CAC/E,CAEJ,CAEJ,CACF,CAEA,SAAe,K,eCnGR,SAASE,GAAmBF,EAA+D,CAChG,SAAI,kBAAeA,CAAK,EACfA,EAEAG,GAAiBH,CAAK,CAEjC,CAEe,SAASG,GAAiBH,EAAgC,CACvE,GAAI,CAACA,GAAS,OAAOA,GAAU,SAC7B,OAGF,GAAI,OAAOA,EAAM,SAAY,SAC3B,OAAOA,EAAM,QAGf,GAAI,OAAOA,EAAM,MAAM,OAAO,SAAY,SACxC,OAAOA,EAAM,KAAK,MAAM,QAO1B,MAAMI,EACJJ,EAAM,OAAO,MAAM,OAAO,YAAY,YAAY,SAClDA,EAAM,OAAO,MAAM,OAAO,YAAY,SACtCA,EAAM,OAAO,MAAM,OAAO,SAC1BA,EAAM,OAAO,MAAM,SACnBA,EAAM,MAAM,SACZA,EAEF,GAAI,OAAOI,GAAkB,SAC3B,OAAOA,EACF,GAAIA,GAAiBA,EAAc,SACxC,OAAOA,EAAc,SAAS,CAIlC,CCpCe,SAASC,IAAe,CACrC,KAAM,CAACC,EAAQC,CAAS,KAAI,YAAyB,CAAC,CAAC,EAGjDC,KAAW,eAAY,CAACC,EAAqBT,IAA4C,CAC7FO,EAAWD,GAAW,CACpB,MAAMI,EAAa,CAAC,GAAGJ,CAAM,EACvBK,EAAQL,EAAO,UAAU,CAAC,CAACM,CAAO,IAAMA,IAAYH,CAAW,EAIrE,OAAIE,EAAQ,IACVD,EAAW,OAAOC,EAAO,CAAC,EAKxBX,GACFU,EAAW,QAAQ,CAACD,EAAaT,CAAK,CAAC,EAGlCU,CACT,CAAC,CACH,EAAG,CAAC,CAAC,EAOL,MAAO,IALc,WAAQ,IAAM,CACjC,MAAMG,EAAcP,EAAO,CAAC,EAC5B,OAAOO,GAAeX,GAAmBW,EAAY,CAAC,CAAC,CACzD,EAAG,CAACP,CAAM,CAAC,EAEWE,CAAQ,CAChC,C,eC3BA,MAAMM,GAAsB,GAEfC,EAASxD,GAAiB,CACrC,KAAM,CAAE,WAAAyD,EAAY,YAAAC,EAAa,GAAGC,CAAe,EAAI3D,EAEvD,OAAK0D,EAGI,gBAAC5C,EAAA,EAAW,CAAC,WAAY2C,GAAcF,GAAsB,GAAGI,CAAA,CAAgB,EAFhF,gBAAC,cAAW,CAAC,MAAOF,GAAcF,GAAsB,GAAGI,CAAA,CAAgB,CAItF,ECuEA,GA5E4D,CAAC,CAC3D,MAAApB,EACA,cAAApB,EACA,oBAAAlD,EACA,cAAA2F,EACA,YAAAC,EAAc,EAChB,IAAM,CACJ,MAAMC,KAAe,eAClBC,GAAoC,CACnC,GAAI,CAACA,EAAO,MACV,OAGF,IAAIC,EAA8B,CAChC,GAAGzB,EACH,aAAcwB,EAAO,KACvB,EAEIxB,EAAM,YAAc3D,EAAe,eACrCoF,EAAS,aAAe,CACtB,GAAGA,EAAS,aACZ,UAAW,OACX,gBAAiB,OACjB,WAAY,OACZ,YAAa,OACb,UAAW,GACX,iBAAkB,CAAC,CACrB,GAGFJ,EAAcI,CAAQ,CACxB,EACA,CAACzB,EAAOqB,CAAa,CACvB,EAEMtC,KAAwB,eAC3ByC,GAA2C,CACrCA,GAILH,EAAc,CACZ,GAAGrB,EACH,cAAewB,EAAO,IAAKE,GAAMA,EAAE,OAAS,EAAE,CAChD,CAAC,CACH,EACA,CAAC1B,EAAOqB,CAAa,CACvB,EAEMpG,KAAU,WAAQ,IAAM,CAAC,GAAG2D,EAAelD,CAAmB,EAAG,CAACkD,EAAelD,CAAmB,CAAC,EAE3G,OAAO4F,EACL,gBAACL,EAAK,CAAC,MAAM,gBAAgB,cAAa7D,EAAU,WAAW,YAAY,gBAAgB,cAAc,KAAK,EAC5G,gBAAC,MACC,YAAW,GACX,MAAOlC,GAAY,CAAC,GAAG0D,EAAe,GAAGlD,EAAoB,OAAO,EAAGsE,EAAM,aAAa,EAC1F,QAAQ,oCACR,SAAUjB,EACV,QAAA9D,EACA,MAAO,GACT,CACF,EAEA,gBAACgG,EAAK,CAAC,MAAM,eAAe,cAAa7D,EAAU,WAAW,YAAY,gBAAgB,cAAc,KAAK,EAC3G,gBAACoB,EAAA,IACC,MAAOwB,EAAM,aACb,QAAQ,oCACR,SAAUuB,EACV,QAAAtG,EACA,MAAO,GACP,iBAAgB,GAClB,CACF,CAEJ,EC1DA,GA3ByD,CAAC,CAAE,MAAA+E,EAAO,cAAAqB,CAAc,IAAM,CACrF,MAAM9B,KAAW,eACdkC,GAAqB,CACpBJ,EAAc,CACZ,GAAGrB,EACH,mBAAoB,CAClB,GAAGA,EAAM,mBACT,MAAOyB,CACT,CACF,CAAC,CACH,EACA,CAACJ,EAAerB,CAAK,CACvB,EAEA,OACE,gBAAC2B,GAAA,GACC,MAAO3B,EAAM,oBAAoB,OAAS,GAC1C,SAAS,QACT,OAAQ,IACR,MAAM,OACN,YAAa,GACb,OAAQT,EACR,OAAQA,CAAA,CACV,CAEJ,ECVMqC,GAAe,oBAErB,SAASC,GACPC,EACAC,EACAC,EACA,CACA,IAAIC,EAAqBF,GAAwB,CAAC,EAC9CE,EAAmB,SAAW,GAAKD,IACrCC,EAAqB,CAACD,CAAmB,GAEvCC,EAAmB,SAAW,GAAKH,EAAqB,SAC1DG,EAAqB,CAACH,EAAqB,CAAC,CAAC,GAE/C,MAAMI,KAAsB,gBAAaD,EAAoBH,CAAoB,EACjF,OAAIA,EAAqB,QAAUG,EAAmB,OAASC,EAAoB,SAGjFD,EAAqBC,EAAoB,OAAS,EAAIA,EAAsB,CAACJ,EAAqB,CAAC,CAAC,GAE/FG,CACT,CA+DA,SA7DsD,CAAC,CACrD,MAAAjC,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,SAAA6D,EACA,SAAA6C,CACF,IAAM,CACJ,KAAM,CAACxD,EAAee,CAAgB,KAAI,YAA+B,CAAC,CAAC,EAC3E,oBAAQ,IAAM,CACZwC,EACG,iBAAiB,EACjB,KAAME,GAAY,CACjB,MAAMP,EAAuBO,EAAQ,IAAK5H,IAAO,CAAE,MAAOA,EAAE,KAAM,MAAOA,EAAE,MAAO,YAAaA,EAAE,KAAM,EAAE,EACzGkF,EAAiBmC,CAAoB,EACrCM,EAASR,GAAc,MAAS,EAEhCrC,EAAS,CACP,GAAGS,EACH,cAAe6B,GACbC,EAAqB,IAAKrH,GAAMA,EAAE,KAAK,EACvCuF,EAAM,cACNA,EAAM,YACR,CACF,CAAC,CACH,CAAC,EACA,MAAOC,GAAQmC,EAASR,GAAc3B,CAAG,CAAC,CAG/C,EAAG,CAACkC,CAAU,CAAC,EAGb,gBAAC,QAAK,cAAa/E,EAAU,WAAW,YAAY,gBAAgB,UAAU,KAAK,EACjF,gBAAC,aAAU,KACT,gBAAC,YAAS,KACR,gBAAC,mBAAgB,KACf,gBAAC,IACC,YAAW,GACX,cAAAwB,EACA,MAAAoB,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,cAAe6D,EACf,SAAA6C,CAAA,CACF,CACF,CACF,CACF,EACA,gBAAC,IACC,MAAApC,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,cAAe6D,EACf,SAAA6C,CAAA,CACF,CACF,CAEJ,E,oFC3FO,MAAME,EAAS7E,GAAsB,CAC1C,MAAM8E,KAAQ,MAAU,EAClBC,EAASC,GAAUF,EAAO9E,CAAK,EAErC,OAAO,gBAAC,QAAK,aAAW,MAAG+E,EAAO,OAAO,EAAG,CAC9C,EAEAF,EAAM,aAAe,CACnB,EAAG,EACH,EAAG,EACH,OAAQ,OACV,EAEA,MAAMG,MAAYC,GAAA,GAAc,CAACH,EAAsB9E,KAAuB,CAC5E,WAAS,OAAI,CACX,CACE,aAAc8E,EAAM,QAAQ9E,EAAM,GAAK,CAAC,EACxC,cAAe8E,EAAM,QAAQ9E,EAAM,GAAK,CAAC,CAC3C,EACAA,EAAM,SAAW,UAAY,CAC3B,QAAS,cACX,EACAA,EAAM,SAAW,SAAW,CAC1B,QAAS,OACX,CACF,CAAC,CACH,EAAE,E,eCNF,SAlBsB,CAAC,CAAE,UAAAkF,EAAW,SAAApD,EAAU,eAAAqD,CAAe,IAAyD,CACpH,KAAM,CAACC,EAAgBC,CAAiB,KAAI,YAAS,CAAC,CAACH,EAAU,QAAU,KAAK,UAAUA,CAAS,EAAE,SAAS,GAAG,CAAC,EAElH,OACE,gBAAC,OAAI,cAAavF,EAAU,WAAW,YAAY,eAAe,SAAS,QAAQ,EACjF,gBAAC2F,GAAA,GACC,YAAW,GACX,MAAM,WACN,OAAQF,EACR,SAAU,IAAMC,EAAkB,CAACD,CAAc,GAEhDD,EAAeD,EAAWpD,CAAQ,EACnC,gBAAC+C,EAAK,CAAC,EAAG,EAAG,CACf,CACF,CAEJ,E,uCC9BYU,GAAAA,IACVA,EAAA,aAAe,eACfA,EAAA,cAAgB,gBAChBA,EAAA,SAAW,WACXA,EAAA,cAAgB,wBAChBA,EAAA,SAAW,mBALDA,IAAAA,GAAA,ICWL,MAAMC,GAAsC,CAAC,CAAE,OAAAC,EAAQ,MAAO,CAAE,KAAAC,CAAK,CAAE,IAAM,CAClF,OAAQA,EAAM,CACZ,KAAKH,EAAgB,aACnB,OAAO,gBAACI,EAAA,EAAI,CAAC,KAAK,aAAc,GAElC,KAAKJ,EAAgB,cACnB,OAAO,gBAACI,EAAA,EAAI,CAAC,KAAMF,EAAS,cAAgB,SAAU,EAExD,KAAKF,EAAgB,SACnB,OAAO,gBAACI,EAAA,EAAI,CAAC,KAAK,MAAO,GAE3B,KAAKJ,EAAgB,cACnB,OAAO,gBAACI,EAAA,EAAI,CAAC,KAAK,GAAI,GAExB,KAAKJ,EAAgB,SACnB,OAAO,gBAACI,EAAA,EAAI,CAAC,KAAK,GAAI,GAExB,QACE,OAAO,IACX,CACF,EC2EA,GAtGmBb,IAA0B,CAC3C,SAAO,OAAI,CACT,MAAO,OACP,YAAa,OACf,CAAC,EAED,iBAAe,OAAI,CACjB,UAAW,OACX,SAAU,MACZ,CAAC,EAED,UAAQ,OAAI,CACV,WAAYA,EAAM,OAAO,WAAW,SACtC,CAAC,EAED,OAAK,OAAI,CACP,aAAc,aAAaA,EAAM,OAAO,OAAO,OAE/C,iBAAkB,CAChB,kBAAmBA,EAAM,OAAO,OAAO,MACzC,CACF,CAAC,EAED,eAAa,OAAI,CACf,QAAS,EACX,CAAC,EAED,QAAM,OAAI,CACR,QAASA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC,EACjC,MAAO,MACP,SAAU,SACV,aAAc,WACd,kBAAmB,CACjB,MAAO,MACP,QAASA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC,CACnC,CACF,CAAC,EAED,kBAAgB,OAAI,CAAE,OAAQ,CAAE,CAAC,EAEjC,eAAa,OAAI,CACf,UAAW,QACb,CAAC,EAED,WAAS,OAAI,CACX,aAAc,CAChB,CAAC,EAED,eAAa,OAAI,CACf,QAAS,OACT,WAAY,QACd,CAAC,EAED,oBAAkB,OAAI,CACpB,OAAQA,EAAM,QAAQ,EAAG,EAAG,EAAG,CAAC,CAClC,CAAC,EAED,aAAW,OAAI,CACb,SAAU,EACV,SAAU,SACV,aAAc,WACd,WAAY,QACd,CAAC,EAED,iBAAe,OAAI,CACjB,SAAUA,EAAM,QAAQ,EAAE,EAC1B,SAAU,QACZ,CAAC,EAED,uBAAqB,OAAI,CACvB,QAAS,MACT,UAAW,MACb,CAAC,EAED,qBAAmB,OAAI,CACrB,OAAQ,CACV,CAAC,EAED,mBAAiB,OAAI,CACnB,SAAU,SACV,OAAQ,EACR,WAAYA,EAAM,OAAO,WAAW,QACpC,WAAYA,EAAM,QAAQ,CAAC,CAC7B,CAAC,EAED,kBAAgB,OAAI,CAClB,UAAW,SACX,WAAYA,EAAM,QAAQ,CAAC,EAC3B,cAAeA,EAAM,QAAQ,CAAC,EAC9B,MAAOA,EAAM,OAAO,KAAK,SAC3B,CAAC,EAED,eAAa,OAAI,CACf,OAAQ,QACR,UAAW,QACb,CAAC,EAED,SAAO,OAAI,CACT,MAAOA,EAAM,YAAY,OAAO,EAClC,CAAC,CACH,GCjFac,GAA0C,CAAC,CACtD,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,OAAAN,EACA,aAAAO,EACA,MAAAC,EACA,eAAAC,EACA,iBAAAC,EACA,iBAAAC,CACF,IAAM,CACJ,MAAMtB,KAAQ,MAAU,EAClBC,KAAS,MAAW,EAAS,EAC7BsB,EAAc,CAAC,CAACR,EAAM,SAEtBS,KAAuB,eAAY,IAAM,CAC7CH,EAAiBN,CAAK,CACxB,EAAG,CAACM,EAAkBN,CAAK,CAAC,EAEtBU,KAAwB,eAC3BC,GAA4C,CAC3C,MAAMV,EAAaU,EAAG,OAAO,QAC7BJ,EAAiBP,EAAOC,CAAU,CACpC,EACA,CAACD,EAAOO,CAAgB,CAC1B,EAEMK,EAAa,GAAGP,EAAiB,QAAU,sBAAsBL,EAAM,MAI7E,sBAAU,IAAM,CACVC,GAAcI,GAChB,SAAS,eAAeO,CAAU,GAAG,eAAe,CAClD,SAAU,SACV,MAAO,QACT,CAAC,CAEL,EAAG,CAAC,CAAC,EAGH,gBAAC,OAAI,UAAW1B,EAAO,YAAa,MAAO,CAAE,WAAYkB,GAAS,EAAInB,EAAM,QAAQ,SAAU,GAC3FuB,EACC,gBAACK,GAAA,GACC,UAAW3B,EAAO,eAClB,KAAMU,EAAS,aAAe,cAC9B,aAAYA,EAAS,YAAYI,EAAM,OAAS,UAAUA,EAAM,OAChE,QAASS,EACT,GAAIT,EAAM,GACZ,EAEA,gBAAChB,EAAK,CAAC,OAAO,SAAS,EAAG,EAAG,EAG/B,gBAACA,EAAK,CAAC,OAAO,SAAS,EAAG,EAAG,EAE5BmB,GACC,gCACE,gBAACW,GAAA,GACC,GAAIF,EACJ,SAAUF,EACV,SAAUR,EACV,MAAOD,EACP,UAAWf,EAAO,kBACpB,EACA,gBAACF,EAAK,CAAC,OAAO,SAAS,EAAG,EAAG,CAC/B,EAGF,gBAACW,GAAS,CAAC,MAAAK,EAAc,OAAAJ,CAAA,CAAgB,EACzC,gBAACZ,EAAK,CAAC,OAAO,SAAS,EAAG,EAAG,EAE7B,gBAAC,SAAM,QAAS4B,EAAY,aAAW,MAAG1B,EAAO,iBAAkBA,EAAO,SAAS,GAChFc,EAAM,IACT,CACF,CAEJ,E,gBChGe,MAAMe,CAAW,CAC9B,OAAO,iBAAiBC,EAA0BC,EAA+B,CAC/E,MAAMC,EAAW,CAAC,EACZ,CAAE,aAAAC,EAAc,cAAAC,EAAe,gBAAArK,EAAiB,aAAAsK,CAAa,EAAIJ,EAEvE,GAAIE,IACFD,EAAS,KAAK,iBAAkBC,CAAY,EAExCC,IACFF,EAAS,KAAK,iBAAkBE,CAAa,EAEzCrK,GAAmBsK,IAAc,CACnC,MAAMC,EAA2BN,EAAY,QAAQjK,CAAe,EAC9DwK,EAAuBxK,EAAgB,MAAM,GAAG,EAChDyK,EAAwBR,EAAY,QAAQK,CAAY,EACxDI,EAAoBJ,EAAa,MAAM,GAAG,EAC1CK,EAAWH,EAAqB,MAAM,EAY5C,GAXIG,GACFR,EAAS,KAAK,YAAaQ,CAAQ,EAInCJ,EAAyB,YAAY,EAAE,WAAW,oCAAoC,GACtF,CAACE,EAAsB,SAAS,SAAS,GAEzCC,EAAkB,KAAK,SAAS,EAG9BA,EAAkB,OAASF,EAAqB,OAAQ,CAC1D,MAAMI,EAAiBF,EAAkB,MAAM,EAC3CE,GACFT,EAAS,KAAKS,CAAc,CAEhC,CAEA,UAAWtL,KAAKkL,EACdL,EAAS,KAAKK,EAAqBlL,CAAC,CAAC,EACrC6K,EAAS,KAAKO,EAAkBpL,CAAC,CAAC,CAEtC,CAIJ,OAAO6K,EAAS,KAAK,GAAG,CAC1B,CAEA,OAAO,wCACLU,EACAC,EACAnF,EACAoF,EACAd,EACA,CACA,IAAIe,EAEJ,GAAI,gBAAiBrF,EACnBqF,EAAcrF,EAAM,gBACf,CACL,KAAM,CAAE,aAAAyE,EAAc,cAAAC,EAAe,gBAAArK,EAAiB,aAAAsK,CAAa,EAAI3E,EACvEqF,EAAchB,EAAW,iBAAiBC,EAAa,CACrD,aAAAG,EACA,cAAAC,EACA,gBAAArK,EACA,aAAAsK,CACF,CAAC,CACH,CAEA,MAAO,GAAGO,IAAUG,+DAAyEF,IAC3FC,EAAe,iBAAmB,IAEtC,CAEA,OAAO,mCACLF,EACAC,EACAnF,EACAsE,EACA,CACA,IAAIe,EACJ,KAAM,CAAE,gBAAAC,CAAgB,EAAItF,EAC5B,GAAI,gBAAiBA,EACnBqF,EAAcrF,EAAM,gBACf,CACL,KAAM,CAAE,aAAAyE,EAAc,cAAAC,EAAe,gBAAArK,EAAiB,aAAAsK,CAAa,EAAI3E,EACvEqF,EAAchB,EAAW,iBAAiBC,EAAa,CACrD,aAAAG,EACA,cAAAC,EACA,gBAAArK,EACA,aAAAsK,CACF,CAAC,CACH,CACA,IAAIY,EAAM,GAAGL,IAAUG,gEAA0EF,IACjG,OAAIG,IACFC,GAAO,oBAAoB,mBAAmBD,CAAe,KAGxDC,CACT,CACF,CCxFA,MAAMC,GACJ,2IAIF,SAASC,GAAsBC,EAAiC,CAC9D,GAAI,CAACA,EACH,MAAO,CAAC,EAEV,MAAMC,EAAcD,EAAuB,MAAM,GAAG,EAE9CE,EAAiBD,EAAY,OAAO,EAAG,CAAC,EAExCZ,EAAoBY,EAAY,OAAO,EAAG,CAAC,EAGjD,KAAOA,EAAY,QAAQ,CACzB,MAAME,EAAWF,EAAY,MAAM,EACnCA,EAAY,OAAS,IAAM,EAAIZ,EAAkB,KAAKc,CAAQ,EAAID,EAAe,KAAKC,CAAQ,CAChG,CACA,MAAO,CAAE,gBAAiBD,EAAe,KAAK,GAAG,EAAG,aAAcb,EAAkB,KAAK,GAAG,CAAE,CAChG,CAEO,SAASe,GAAiBC,EAA0C,CAEzE,MAAMC,EADUR,GAAmB,KAAKO,CAAW,GACd,QAAU,CAAC,EAC1C,CAAE,aAAAtB,EAAc,cAAAC,EAAe,2BAAAuB,CAA2B,EAAID,EAC9D,CAAE,gBAAA3L,EAAiB,aAAAsK,CAAa,EAAIc,GAAsBQ,CAA0B,EAE1F,MAAO,CAAE,aAAAxB,EAAc,cAAAC,EAAe,gBAAArK,EAAiB,aAAAsK,CAAa,CACtE,CAEO,SAASuB,EAA6BvD,EAAgD5H,EAAmB,CAC9G,OAAO4H,EAAU,IAAK4B,GACb4B,EAAqB5B,EAAUxJ,CAAQ,CAC/C,CACH,CAEO,SAASoL,EAAqB5B,EAAwCxJ,EAAmB,CAC9F,GAAI,OAAOwJ,GAAa,SAAU,CAChC,MAAM6B,EAAMN,GAAiBvB,CAAQ,EACrC,OAAIxJ,IACFqL,EAAI,OAASrL,GAERqL,CACT,CACA,OAAO7B,CACT,CAEO,SAAS8B,GAAmB1D,EAAgD,CACjF,OAAOA,EAAU,IAAK4B,GAAa+B,GAAiB/B,CAAQ,CAAC,CAC/D,CAEO,SAAS+B,GAAiB/B,EAAyC,CACxE,OAAOA,EACH,OAAOA,GAAa,SAClBA,EACAF,EAAW,oBAAiB,KAAe,EAAGE,CAAQ,EACxD,EACN,CAEO,SAASgC,GAAUC,EAAe,CACvC,MAAO,CAAC,CAACA,EAAM,MAAM,aAAa,CACpC,CAEA,SAASC,GACPC,EACAC,EACAC,EACAjC,EACA,CAEA,OAAIiC,GAAmB,WAAW,mCAAmC,IACnEA,EAAoB,oCAChBjC,GAAc,SAAS,UAAU,IACnCA,EAAeA,EAAa,MAAM,EAAG,EAAkB,IAGpD+B,IAAiBE,GAAqBD,IAAYhC,CAC3D,CAEO,SAASkC,GAASC,EAAgBf,EAAqB,CAC5D,MAAMgB,EAAeZ,EAAqBJ,CAAW,EAC/CiB,EAAYb,EAAqBW,CAAM,EAE7C,OACEE,GAAW,eAAiBD,GAAc,cAC1CC,GAAW,eAAe,YAAY,IAAMD,GAAc,eAAe,YAAY,GACrFN,GACEO,GAAW,iBAAiB,YAAY,EACxCA,GAAW,aACXD,GAAc,iBAAiB,YAAY,EAC3CA,GAAc,YAChB,CAEJ,CAEO,SAASE,GAASC,EAAwBC,EAA+B,CAC9E,MAAMlN,EAAwB,CAAC,EAC/B,OAAAkN,EAAK,QAASC,GAAQ,CACpB,MAAMC,EAAMC,GAAQJ,EAAME,CAAG,EACzBC,GACFpN,EAAO,KAAKoN,CAAG,CAEnB,CAAC,EACMpN,CACT,CAEO,SAASqN,GAAQJ,EAAwBE,EAAsC,CACpF,UAAWC,KAAOH,EAAM,CACtB,GAAIL,GAASQ,EAAI,IAAKD,CAAG,EACvB,OAAOC,EAGT,GAAIA,EAAI,SAAU,CAChB,MAAMpN,EAASqN,GAAQD,EAAI,SAAUD,CAAG,EAExC,GAAInN,EACF,OAAOA,CAEX,CACF,CAGF,CAEO,SAASsN,GAAaL,EAAwBM,EAAwBC,EAAgC,CAC3G,SAAO,OAAQP,EAAOQ,GAAe,CACnC,MAAMC,EAAWL,GAAQI,EAAYF,CAAc,EAM9CG,IAILA,EAAS,SAAWF,EACtB,CAAC,CACH,CAEO,SAASG,GACd5H,EACAmD,EACAR,EACmB,CACnB,GAAIQ,IAAS,OAEX,MAAO,CACL,GAAGnD,EACH,kBAAmB,CACjB,GAAGA,EAAM,kBACT,UAAWqG,GAAmB1D,CAAS,EAAE,OAAQ4B,GAAaA,IAAa,EAAE,CAC/E,CACF,EAGF,MAAMsD,EAAiBlF,EAAU,OAASwD,EAAqBxD,EAAU,CAAC,CAAC,EAAI,CAAC,EAChF,MAAO,CACL,GAAG3C,EACH,aAAc6H,EAAe,aAC7B,aAAc,CACZ,GAAG7H,EAAM,aACT,gBAAiB6H,EAAe,iBAAiB,kBAAkB,EACnE,OAAQA,EAAe,OACvB,UAAW3B,EAA6BvD,CAAS,EAAE,OAChD4B,GACCA,EAAS,eAAiB,IAC1BA,EAAS,kBAAoB,IAC7BA,EAAS,eAAiB,IAC1BA,EAAS,gBAAkB,EAC/B,EACA,WAAY,OACZ,YAAa,OACb,UAAW,GACX,iBAAkB,CAAC,CACrB,CACF,CACF,CC5KA,MAAMuD,GAAsC,CAAC,CAC3C,IAAAT,EACA,aAAAU,EACA,MAAArE,EACA,kBAAAsE,EACA,oBAAAC,EACA,qBAAAC,EACA,eAAAvE,EACA,WAAAwE,CACF,IAAM,CACJ,MAAM3F,KAAS,MAAW,EAAS,EAC7B,CAAC4F,EAAWC,CAAY,KAAI,YAAwC,QAAQ,EAE5E9E,EAAa,CAAC,CAACwE,EAAa,KAAMtN,GAAMA,EAAE,IAAI,YAAY,IAAM4M,EAAI,IAAI,YAAY,CAAC,EACrF7D,EAAa,CAACD,GAAc4E,EAAWd,EAAKU,CAAY,EACxD7E,EAASkF,IAAc,OAEvBE,EAAsB,SAAY,CACtC,GAAIF,IAAc,OAAQ,CACxBC,EAAa,QAAQ,EACrB,MACF,CACAA,EAAa,SAAS,EACtBL,EAAkBX,CAAG,EAClB,KAAK,IAAMgB,EAAa,MAAM,CAAC,EAC/B,MAAM,IAAMA,EAAa,QAAQ,CAAC,CACvC,EAGA,sBAAU,IAAM,CAEd,MAAME,EAAcR,EAAa,CAAC,EAEZQ,GAAe,CAAC,CAACjB,GAAQD,EAAI,UAAY,CAAC,EAAGkB,EAAY,GAAG,GAGhFF,EAAa,MAAM,CAEvB,EAAG,CAACN,EAAcV,CAAG,CAAC,EAGpB,gCACE,gBAAC,MAAG,aAAW,MAAG7E,EAAO,IAAKgB,GAAchB,EAAO,WAAW,EAAG,IAAK6E,EAAI,IACxE,gBAAC,MAAG,UAAW7E,EAAO,MACpB,gBAACa,GAAA,CACC,MAAAK,EACA,WAAAH,EACA,WAAAC,EACA,OAAAN,EACA,MAAOmE,EACP,iBAAkBiB,EAClB,iBAAkBL,EAClB,aAAcC,EAAqB,KAAM/E,GAASA,IAASkE,EAAI,IAAI,EACnE,eAAA1D,CAAA,CACF,CACF,EAEA,gBAAC,MAAG,UAAWnB,EAAO,MAAO6E,EAAI,SAAU,EAE3C,gBAAC,MAAG,UAAW7E,EAAO,MAAO6E,EAAI,qBAAuB,GAAI,CAC9D,EAECnE,GACCmE,EAAI,UACJ,OAAO,KAAKA,EAAI,QAAQ,EAAE,OAAS,GACnCA,EAAI,SAAS,IAAKmB,GAChB,gBAACV,GAAA,CACC,IAAKU,EAAS,IACd,IAAKA,EACL,aAAAT,EACA,MAAOrE,EAAQ,EACf,kBAAAsE,EACA,oBAAAC,EACA,qBAAAC,EACA,eAAAvE,EACA,WAAAwE,CAAA,CACF,CACD,EAEH,gBAACM,GAAA,EAAc,CAAC,QAASL,IAAc,WACrC,gBAAC,UACC,gBAAC,MAAG,aAAW,MAAG5F,EAAO,KAAMA,EAAO,WAAW,EAAG,QAAS,GAC3D,gBAACkG,GAAA,EAAkB,CAAC,KAAK,aAAa,UAAWlG,EAAO,QAAS,CACnE,CACF,CACF,CACF,CAEJ,EAEA,GAAesF,G,eC7Ef,SA3Be,CAAC,CAAE,SAAAa,CAAS,IAAoD,CAC7E,KAAM,CAACC,EAAcC,CAAe,KAAI,YAAS,EAAE,EAE7CC,KAAkB,WAAQ,OAAM,YAASH,EAAU,GAAG,EAAG,CAACA,CAAQ,CAAC,EACzE,sBAAU,IACD,IAAM,CAEXG,EAAgB,OAAO,CACzB,EACC,CAACA,CAAe,CAAC,EAGlB,gBAAC,KACC,aAAW,kBACX,OAAQ,gBAAC1F,EAAA,EAAI,CAAC,KAAK,QAAS,GAC5B,MAAOwF,EACP,SAAWzK,GAAU,CACnB,MAAM4K,EAAe5K,EAAM,cAAc,MACzC0K,EAAgBE,CAAY,EAC5BD,EAAgBC,CAAY,CAC9B,EACA,YAAY,wBACZ,cAAa3L,EAAU,WAAW,YAAY,eAAe,OAAO,MACtE,CAEJ,ECoQA,GApQuB,CAAC,CACtB,mBAAA4L,EACA,UAAArG,EACA,QAAAsG,EACA,SAAAC,EACA,qBAAAhB,EACA,UAAAiB,EACA,WAAAhB,EACA,eAAAvF,EACA,gBAAAwG,CACF,IAAyD,CACvD,MAAM5G,KAAS,MAAW,EAAS,EAE7B,CAAC6G,EAAWC,CAAY,KAAI,YAAS,EAAK,EAC1C,CAACpC,EAAMqC,CAAO,KAAI,YAA2B,CAAC,CAAC,EAC/C,CAACxB,EAAcyB,CAAe,KAAI,YAA2B,CAAC,CAAC,EAC/D,CAACC,EAAkBC,CAAmB,KAAI,YAAS/G,CAAS,EAC5D,CAACgH,EAAcC,CAAe,KAAI,YAA6B,MAAS,EACxE,CAACC,GAAqBC,EAAsB,KAAI,YAAS,EAAK,EAC9DC,GAAsBX,IAAkBrB,CAAY,KAG1D,aAAU,IAAM,CACd2B,EAAoB/G,CAAS,CAC/B,EAAG,CAACA,CAAS,CAAC,EAEd,MAAMqH,MAAkB,eAAY,SAAY,CAC9C,GAAI,CAACX,EAAW,CACd,GAAI,CACFC,EAAa,EAAI,EACjB,MAAM3G,EAAY,MAAMqG,EAAmB,iBACzCG,EACAjD,EAA6BuD,GAAoB,CAAC,CAAC,CACrD,EACAF,EAAQ5G,CAAS,CACnB,OAASzC,EAAP,CACA0J,EAAgBvJ,GAAiBH,CAAK,CAAC,CACzC,CACAoJ,EAAa,EAAK,CACpB,CACF,EAAG,CAACG,EAAkBJ,EAAWL,EAAoBG,CAAS,CAAC,KAE/Dc,GAAA,GAAc,IAAM,CAClBD,GAAgB,CAClB,CAAC,EAGD,MAAME,GAAWC,GACf,OAAOA,GAAM,SAAWA,IAAM,GAAKA,EAAE,cAAgBA,EAAE,eAAiBA,EAAE,cAAgBA,EAAE,mBAG9F,aAAU,IAAM,CACTV,GACHD,EAAgB,CAAC,CAAC,EAGpB,MAAMY,EAAYX,EAAiB,OAAQU,GAAMD,GAAQC,CAAC,CAAC,EACrDE,EAAQZ,GAAoBxC,GAASC,EAAMb,GAAmB+D,CAAS,CAAC,EAC9E,OAAIA,GAAW,OAASC,EAAM,OAGrBb,EAAgBR,EAAmB,UAAUoB,CAAS,CAAC,EAE5DC,GAASA,EAAM,OACVb,EAAgBa,CAAK,EAEvBb,EAAgB,CAAC,CAAC,CAC3B,EAAG,CAACC,EAAkBvC,EAAM8B,CAAkB,CAAC,EAG/C,MAAMhB,MAAoB,eACxB,MAAOsC,GAA2B,CAKhC,GAHAV,EAAgB,MAAS,EAGrB,CAAAU,EAAU,UAAU,OAIxB,GAAI,CACF,MAAMC,EAAa,MAAMvB,EAAmB,wBAAwB9B,EAAMoD,EAAWnB,CAAS,EAC9FI,EAAQgB,CAAU,CACpB,OAASrK,EAAP,CACA,MAAA0J,EAAgBvJ,GAAiBH,CAAK,CAAC,EACjCA,CACR,CACF,EACA,CAAC8I,EAAoB9B,EAAMiC,CAAS,CACtC,EAEMqB,MAAyB,eAC7B,CAACnD,EAAkB9D,IAAwB,CACzC,GAAIA,EAAY,CACd,MAAMkH,EAAStB,IAAc,OAAS9B,EAAI,IAAMnB,EAA6B,CAACmB,EAAI,GAAG,EAAGA,EAAI,QAAQ,EAAE,CAAC,EACjGqD,GAAcjB,EAAmBA,EAAiB,OAAOgB,CAAM,EAAI,CAACA,CAAM,EAChFf,EAAoBgB,GAAY,OAAQP,GAAMD,GAAQC,CAAC,CAAC,CAAC,CAC3D,KAAO,CACL,MAAMQ,EAAsBlB,GAAkB,OAAQU,IAC7C,CAACtD,GAASP,GAAiB6D,EAAC,EAAG9C,EAAI,GAAG,CAC9C,EACDqC,EAAoBiB,CAAmB,CACzC,CACF,EACA,CAACxB,EAAWM,EAAkBC,CAAmB,CACnD,EAEMkB,MAAc,eAAY,IAAM,CAChCnB,GACFR,EAAQE,IAAc,OAASM,EAAmBvD,EAA6BuD,CAAgB,CAAC,CAEpG,EAAG,CAACN,EAAWM,EAAkBR,CAAO,CAAC,EAEnC4B,MAAe,eACnB,MAAOC,GAAuB,CAK5B,GAHAlB,EAAgB,MAAS,EACzBE,GAAuB,EAAK,EAExB,CAACgB,EAAY,CACfd,GAAgB,EAChB,MACF,CAEA,GAAI,CACFV,EAAa,EAAI,EACjB,MAAMyB,EAAgB,MAAM/B,EAAmB,OAAO8B,EAAY3B,CAAS,EAC3EI,EAAQwB,CAAa,EACjBA,EAAc,QAAU/B,EAAmB,aAC7Cc,GAAuB,EAAI,CAE/B,OAAS7J,EAAP,CACA2J,EAAgBvJ,GAAiBJ,CAAG,CAAC,CACvC,CACAqJ,EAAa,EAAK,CACpB,EACA,CAACU,GAAiBhB,EAAoBG,CAAS,CACjD,EAEA,OACE,gBAAC,WACC,gBAAC,GAAM,CAAC,SAAU0B,EAAA,CAAc,EAC/BhB,GACC,gBAAC,KAAE,UAAWrH,EAAO,aAAa,iBAAewG,EAAmB,YAAY,UAAQ,EAExF,gBAAC1G,EAAK,CAAC,EAAG,EAAG,EAGf,gBAAC,SAAM,UAAWE,EAAO,OACvB,gBAAC,aACC,gBAAC,MAAG,aAAW,MAAGA,EAAO,IAAKA,EAAO,MAAM,GACzC,gBAAC,MAAG,UAAWA,EAAO,MAAM,OAAK,EACjC,gBAAC,MAAG,UAAWA,EAAO,MAAM,MAAI,EAChC,gBAAC,MAAG,UAAWA,EAAO,MAAM,UAAQ,CACtC,CACF,CACF,EAEA,gBAAC,OAAI,UAAWA,EAAO,eACrB,gBAAC,SAAM,UAAWA,EAAO,OACvB,gBAAC,aACE6G,GACC,gBAAC,MAAG,aAAW,MAAG7G,EAAO,GAAG,GAC1B,gBAAC,MAAG,UAAWA,EAAO,MACpB,gBAACkG,GAAA,EAAkB,CAAC,KAAM,aAAc,CAC1C,CACF,EAED,CAACW,GAAanC,EAAK,SAAW,GAC7B,gBAAC,MAAG,aAAW,MAAG1E,EAAO,GAAG,GAC1B,gBAAC,MAAG,UAAWA,EAAO,KAAM,YAAU,UAAS,oBAE/C,CACF,EAED,CAAC6G,GACAnC,EAAK,IAAKG,GACR,gBAAC,IACC,IAAKA,EAAI,IACT,IAAAA,EACA,aAAAU,EACA,MAAO,EACP,kBAAAC,GACA,oBAAqBwC,GACrB,qBAAAtC,EACA,eAAgB,GAChB,WAAAC,CAAA,CACF,CACD,CACL,CACF,CACF,EAEA,gBAAC,OAAI,UAAW3F,EAAO,iBACpBuF,EAAa,OAAS,GACrB,gCACE,gBAAC,UAAG,WAAS,EAEb,gBAAC,OAAI,UAAWvF,EAAO,eACrB,gBAAC,SAAM,UAAWA,EAAO,OACvB,gBAAC,aACEuF,EAAa,IAAKV,GACjB,gBAAC,IACC,IAAKA,EAAI,IACT,IAAAA,EACA,aAAAU,EACA,MAAO,EACP,kBAAAC,GACA,oBAAqBwC,GACrB,qBAAAtC,EACA,WAAY,IAAM,GACpB,CACD,CACH,CACF,CACF,EACA,gBAAC5F,EAAK,CAAC,EAAG,EAAG,EACZyH,IAAqB,OACpB,gBAAC5J,EAAA,EAAK,CAAC,MAAM,GAAG,SAAS,QACtB4J,EACH,EACE,IACN,EAGF,gBAAC,IACC,UAAWN,EACX,SAAWU,GAAMT,EAAoBS,CAAC,EACtC,eAAAvH,CAAA,CACF,EAEA,gBAACN,EAAK,CAAC,EAAG,EAAG,EAEb,gBAAC5D,EAAA,IACC,SAAU,CAAC,CAACiL,GAAgB,CAACF,EAAiB,MAAMS,EAAO,EAC3D,QAASU,GACT,cAAaxN,EAAU,WAAW,YAAY,eAAe,MAAM,QACpE,OAED,EAEA,gBAACkF,EAAK,CAAC,OAAO,SAAS,EAAG,EAAG,EAE7B,gBAAC5D,EAAA,GAAM,CAAC,QAASwK,EAAU,QAAQ,aAAY,QAE/C,CACF,EAECS,GACC,gCACE,gBAACrH,EAAK,CAAC,EAAG,EAAG,EACb,gBAACnC,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,mEAC3BwJ,CACH,CACF,CAEJ,CAEJ,ECxQMqB,GAA4E,CAAC,CACjF,MAAAhL,EACA,WAAAmC,EACA,cAAAd,EACA,qBAAA6G,EACA,UAAAiB,EACA,UAAAxG,EACA,YAAAxB,EACA,WAAAD,EACA,WAAAiH,EACA,eAAAvF,EACA,gBAAAwG,CACF,IAAM,CACJ,MAAM5G,KAAS,MAAW,EAAS,EAC7B,CAACyI,EAAcC,CAAe,KAAI,YAAS,EAAK,EAEhDC,KAAmB,eAAY,IAAM,CACzCD,EAAgB,EAAI,CACtB,EAAG,CAAC,CAAC,EAECE,KAAc,eAAY,IAAM,CACpCF,EAAgB,EAAK,CACvB,EAAG,CAAC,CAAC,EAECN,KAAc,eACjBjI,GAAmD,CAClDtB,EAAcuG,GAAa5H,EAAOmJ,EAAWxG,CAAS,CAAC,EACvDyI,EAAY,CACd,EACA,CAACA,EAAa/J,EAAerB,EAAOmJ,CAAS,CAC/C,EAEA,OACE,gBAAC,QAAK,cAAa/L,EAAU,WAAW,YAAY,eAAe,OAAO,MAAM,EAC9E,gBAACiO,GAAA,GACC,UAAW7I,EAAO,MAClB,MAAM,oBACN,OAAQyI,EACR,UAAWG,EAGX,UAAW,IAEX,gBAAC,IACC,mBAAoBjJ,EAAW,mBAC/B,UAAAQ,EACA,QAASiI,EACT,SAAUQ,EACV,qBAAAlD,EACA,UAAAiB,EACA,WAAAhB,EACA,eAAAvF,EACA,gBAAAwG,CAAA,CACF,CACF,EACA,gBAACnI,EAAK,CAAC,MAAM,WAAW,YAAAE,EAA0B,WAAAD,CAAA,EAChD,gBAACxC,EAAA,GAAM,CAAC,UAAW8D,EAAO,oBAAqB,QAAQ,YAAY,QAAS2I,EAAkB,KAAK,UACjG,gBAACG,GAAA,CAAc,UAAA3I,EAAsB,WAAAR,CAAA,CAAwB,CAC/D,CACF,CACF,CAEJ,EAOMmJ,GAAgB,CAAC,CAAE,UAAA3I,EAAW,WAAAR,CAAW,IAAwD,CACrG,KAAM,CAACoJ,EAAqBC,CAAsB,KAAI,YAAStF,EAA6BvD,CAAS,CAAC,EAMtG,SAJA,aAAU,IAAM,CACd6I,EAAuBtF,EAA6BvD,CAAS,CAAC,CAChE,EAAG,CAACA,CAAS,CAAC,EAETA,EAAU,OAIR,gBAAC8I,GAAA,CAAkB,UAAWF,CAAA,CAAqB,EAHjD,gCAAE,mBAAiB,CAI9B,EAMME,GAAoB,CAAC,CAAE,UAAA9I,CAAU,IAA8B,CACnE,MAAMH,KAAS,MAAW,EAAS,EAEnC,IAAIkJ,EAAiB,OACrB,MAAMC,EAAkB,CAAC,EACzB,OAAAhJ,EAAU,QAAS4B,GAAa,CAC9B,GAAIA,EAAS,aAAc,CACzBoH,EAAM,KAAKpH,EAAS,aAAa,MAAM,GAAG,EAAE,CAAC,CAAC,EAC9C,MACF,CACA,GAAIA,EAAS,cAAe,CAC1BmH,EAAO,SACPC,EAAM,KAAKpH,EAAS,aAAa,EACjC,MACF,CACA,GAAIA,EAAS,aAAc,CACzBmH,EAAO,cACPC,EAAM,KAAKpH,EAAS,YAAY,EAChC,MACF,CACF,CAAC,EAEC,gBAAC,QAAK,aAAW,MAAG/B,EAAO,UAAWA,EAAO,aAAa,GACxD,gBAACY,EAAA,EAAI,CAAC,KAAMsI,CAAA,CAAM,EACjBC,EAAM,KAAK,IAAI,CAClB,CAEJ,EAEA,GAAeX,G,4BClIf,MAAM,GAAazI,IAA0B,CAC3C,gBAAc,OAAI,CAAE,MAAO,OAAQ,QAAS,OAAQ,YAAaA,EAAM,QAAQ,CAAC,CAAE,CAAC,CACrF,GAkFA,GAhF+B,CAAC,CAAE,UAAAI,EAAW,SAAApD,CAAS,IAAmC,CACvF,MAAMiD,KAAS,MAAW,EAAS,KAEnC,aAAU,IAAM,CAEVG,EAAU,SAAW,GACvBpD,EAAS,CAAC,EAAE,CAAC,CAEjB,EAAG,CAACoD,EAAWpD,CAAQ,CAAC,EAExB,MAAMqM,EAAmB,CAAC/K,EAAe0D,IAAqB,CAC5D,MAAMkD,EAAe,CAAC,GAAG9E,CAAS,EAClC8E,EAAa5G,CAAK,EAAI0D,EACtBhF,EAASkI,CAAY,CACvB,EAEMoE,EAAkBhL,GAAkB,CACxC,MAAM4G,EAAe,CAAC,GAAG9E,CAAS,EAClC8E,EAAa,OAAO5G,EAAO,CAAC,EAC5BtB,EAASkI,CAAY,CACvB,EAEMqE,EAAc,IAAM,CACxBvM,EAASoD,EAAU,OAAO,EAAE,CAAC,CAC/B,EAEA,OACE,gCACE,gBAACoJ,GAAA,EAAK,KACJ,gBAAC,UAAG,kBACc,IAChB,gBAACC,GAAA,GACC,QACE,gCAAE,oBACkB,IAClB,gBAAC,KACC,KAAK,6FACL,IAAI,sBACJ,OAAO,UACR,cAED,EAAI,kGAEN,EAEF,UAAU,QACV,YAAa,IAEb,gBAAC5I,EAAA,EAAI,CAAC,KAAK,aAAc,EAC3B,CACF,CACF,EACCT,EAAU,IAAI,CAAC4B,EAAU1D,IACxB,gBAAC,OAAI,IAAK,YAAYA,EAAQ,KAC5B,gBAAC,OAAI,UAAW2B,EAAO,cACrB,gBAAC,KACC,GAAI,kCAAkC3B,EAAQ,IAC9C,MAAO0D,EACP,SAAWpG,GAAUyN,EAAiB/K,EAAO1C,EAAM,cAAc,KAAK,EACtE,YAAY,4BACZ,cAAa,kCAAkC0C,EAAQ,IACzD,EACA,gBAAC,mBACC,aAAW,SACX,KAAK,QACL,QAAQ,YACR,QAAS,IAAMgL,EAAehL,CAAK,EACnC,cAAa,kBACb,OAAQ8B,EAAU,SAAW,EAC/B,CACF,CACF,CACD,EACD,gBAACjE,EAAA,GAAM,CAAC,aAAW,MAAM,KAAK,OAAO,QAAQ,YAAY,QAASoN,EAAa,KAAK,UAAS,kBAE7F,CACF,CAEJ,EC5FO,SAASG,GAAcjM,EAA0BkM,EAAuC,CAC7F,MAAO,CACL,GAAGlM,EACH,kBAAmB,CACjB,GAAGA,EAAM,kBACT,MAAOkM,CACT,CACF,CACF,CAEO,SAASC,GAAYnM,EAA0BoM,EAAqC,CACzF,MAAO,CACL,GAAGpM,EACH,kBAAmB,CACjB,GAAGA,EAAM,kBACT,aAAcoM,CAChB,CACF,CACF,CCTA,MAAMC,GAAiD,CACrD,CAAE,MAAO,cAAe,MAAO,aAAc,EAC7C,CAAE,MAAO,QAAS,MAAO,OAAQ,CACnC,EA+BA,GA7B4D,CAAC,CAAE,MAAArM,EAAO,oBAAAtE,EAAqB,cAAA2F,CAAc,IAAM,CAC7G,MAAMpG,KAAU,WAAQ,IAAM,CAAC,GAAGoR,GAAgB3Q,CAAmB,EAAG,CAACA,CAAmB,CAAC,EAEvF6F,KAAe,eAClBC,GAAoC,CACnC,KAAM,CAAE,MAAA1H,CAAM,EAAI0H,EAClB,GAAI,CAAC1H,EACH,OAGF,MAAM2H,EAAW0K,GAAYnM,EAAOlG,CAAK,EACzCuH,EAAcI,CAAQ,CACxB,EACA,CAACJ,EAAerB,CAAK,CACvB,EAEA,OACE,gBAACiB,EAAK,CAAC,MAAM,YAAY,cAAa7D,EAAU,WAAW,YAAY,gBAAgB,gBAAgB,KAAK,EAC1G,gBAACoB,EAAA,IACC,QAAQ,sCACR,MAAOwB,EAAM,mBAAmB,aAChC,SAAUuB,EACV,QAAAtG,EACA,MAAO,GACT,CACF,CAEJ,EC3CO,MAAMqR,EAAsB,CAKjC,aAAc,CACZ,KAAK,QAAU,OACf,KAAK,OAAS,OAEd,KAAK,QAAU,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC9C,KAAK,QAAUD,EACf,KAAK,OAASC,CAChB,CAAC,EACD,OAAO,OAAO,IAAI,CACpB,CACF,CCsEA,SA7DyD,CAAC,CAAE,MAAAxM,EAAO,WAAAmC,EAAY,cAAAd,CAAc,IAAM,CACjG,MAAMoL,KAAmB,UAAgC,EACzD,SAASC,GAAa,CACpB,OAAKD,EAAiB,UACpBA,EAAiB,QAAU,IAAIH,IAG1BG,EAAiB,QAAQ,OAClC,IAEA,aAAU,IAAM,CACd,GAAI,CAACzM,EAAM,mBAAmB,WAAa,CAACA,EAAM,kBAAkB,UAAU,OAC5E,OAGF,MAAM2M,EAAW,CACfxK,EAAW,4BAA4B,eAAenC,EAAM,kBAAkB,UAAU,CAAC,CAAC,EAC1F0M,EAAW,CACb,EAGA,QAAQ,IAAIC,CAAQ,EAAE,KAAK,CAAC,CAACC,EAAQ,CAAE,OAAAC,EAAQ,OAAAC,CAAO,CAAC,IAAM,CACzCD,EAAO,UAEf,MACP,eAAe,EACf,KAAME,GAAU,CACf,MAAMC,EAAQF,EAAO,SAAS,EAC9B,OAAOE,GAASD,EAAMC,EAAM,GAAG,CACjC,CAAC,EACA,KAAMC,GAAW,CAChBA,GAAQ,UAAUL,EAAQ,iCAAkC,SAAS,CACvE,CAAC,CACL,CAAC,CACH,EAAG,CAACzK,EAAW,4BAA6BnC,EAAM,mBAAmB,SAAS,CAAC,EAE/E,MAAMkN,KAAoB,eAAY,CAACJ,EAAsBD,IAAmB,CAC9EJ,EAAiB,SAAS,UAAU,CAAE,OAAAK,EAAQ,OAAAD,CAAO,CAAC,CACxD,EAAG,CAAC,CAAC,EAECtN,KAAW,eACdkC,GAAqB,CACpBJ,EAAc4K,GAAcjM,EAAOyB,CAAQ,CAAC,CAC9C,EACA,CAACJ,EAAerB,CAAK,CACvB,EAEA,OACE,gBAAC2B,GAAA,GACC,MAAO3B,EAAM,mBAAmB,OAAS,GACzC,SAAS,QACT,OAAQ,IACR,MAAM,OACN,YAAa,GACb,OAAQT,EACR,OAAQA,EACR,iBAAkB2N,CAAA,CACpB,CAEJ,EC7EA,eAAeC,GACbhL,EACAnC,EACAT,EACA,CACA,GAAIS,EAAM,mBAAmB,YAAc,QAAa,CAACA,EAAM,kBAAkB,UAAW,CAC1F,MAAMoN,EAAkB7G,GAAUvG,EAAM,kBAAkB,SAAS,EACnE,IAAIuE,EAEA6I,EACF7I,EAAW,MAAMpC,EAAW,mBAAmB,4BAA4BnC,EAAM,kBAAkB,SAAS,EAG5GuE,EAAWvE,EAAM,kBAAkB,UAGrC,MAAMyB,EAAW,CACf,GAAGzB,EACH,kBAAmB,CACjB,GAAGA,EAAM,kBACT,SAAAuE,EACA,UAAW,MACb,CACF,EAEA,OAAO9C,EAAS,kBAAkB,UAElClC,EAASkC,CAAQ,CACnB,CACF,CAOe,SAAS4L,GACtBlL,EACAnC,EACAT,EACA,CACA,KAAM,CAAC+N,EAAgBC,CAAiB,KAAI,YAAuB,EAEnE,sBAAU,IAAM,CACdJ,GAAqChL,EAAYnC,EAAOT,CAAQ,EAAE,MAAOU,GACvEsN,EAAkB,CAChB,MAAO,4CACP,QAAStN,EAAI,OACf,CAAC,CACH,CACF,EAAG,CAACkC,EAAYnC,EAAOT,CAAQ,CAAC,EAEzB+N,CACT,CCqDA,SAtFwD,CAAC,CACvD,MAAAtN,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,SAAA6D,EACA,SAAA6C,EACA,aAAAoL,CACF,IAAM,CACJ,MAAMF,EAAiBD,GAAclL,EAAYnC,EAAOT,CAAQ,EAC1D4I,EAAa,CAACd,EAAkBU,IAAmC,CACvE,GAAIA,EAAa,SAAW,EAE1B,MAAO,GAET,MAAM0F,EAAgBtH,EAAqBkB,EAAI,IAAKA,EAAI,QAAQ,EAAE,iBAAiB,YAAY,EACzFqG,EAAsBvH,EAC1B4B,EAAa,CAAC,EAAE,IAChBA,EAAa,CAAC,EAAE,QAClB,EAAE,iBAAiB,YAAY,EAE/B,OAAO0F,IAAkBC,CAC3B,EAEA,OACE,gBAAC,QAAK,cAAY,wDAChB,gBAAC,aAAU,KACT,gBAAC,YAAS,KACR,gBAAC,mBAAgB,KACf,gBAAC,IACC,MAAA1N,EACA,WAAAmC,EACA,YAAa,GACb,WAAY,GACZ,eAAAvC,EACA,oBAAAlE,EACA,cAAe6D,EACf,SAAA6C,EACA,qBAAsB,CACpBY,EAAgB,aAChBA,EAAgB,cAChBA,EAAgB,SAChBA,EAAgB,QAClB,EACA,UAAWhD,EAAM,mBAAmB,WAAa,CAAC,EAClD,UAAU,OACV,WAAAmI,EACA,eAAgB,CAACxF,EAAWpD,IAI1B,gBAAC,GAAsB,CAAC,UAAAoD,EAAkC,SAAUpD,CAAAA,CAAU,EAEhF,gBAAiB,IAAM,uDACzB,CACF,CACF,EACA,gBAAC,IACC,MAAAS,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,cAAe6D,EACf,SAAA6C,CAAA,CACF,EACA,gBAAC,YAAS,KACR,gBAAC,mBAAgB,KACd,CAACoL,GACA,gBAAC,IACC,MAAAxN,EACA,WAAAmC,EACA,eAAAvC,EACA,oBAAAlE,EACA,cAAe6D,EACf,SAAA6C,CAAA,CACF,EAGDkL,GAAkB,gBAACnN,EAAA,EAAK,CAAC,MAAOmN,EAAe,OAAQA,EAAe,OAAQ,CACjF,CACF,CACF,CACF,CAEJ,EC/FaK,GAAoD,CAC/D,sFAAuF,eACvF,oCAAqC,gBACrC,mDAAoD,kBACpD,mCAAoC,iCACpC,uCAAwC,qCACxC,mCAAoC,YACpC,6BAA8B,YAC9B,+BAAgC,2BAChC,yCAA0C,4BAC1C,qCAAsC,kBACtC,qCAAsC,oBACtC,8BAA+B,oBAC/B,kCAAmC,0BACnC,iDAAkD,oBAClD,+BAAgC,qBAChC,6CAA8C,wBAC9C,yDAA0D,oCAC1D,0CAA2C,sBAC3C,mDAAoD,UACpD,yCAA0C,SAC1C,8BAA+B,qBAC/B,gDAAiD,cACjD,6CAA8C,eAC9C,yCAA0C,6BAC1C,2CAA4C,wDAC5C,6CAA8C,oCAC9C,4CAA6C,yBAC7C,6CAA8C,wBAC9C,kCAAmC,yBACnC,mCAAoC,kBACpC,0CAA2C,8CAC3C,kCAAmC,eACnC,wCAAyC,qBACzC,uDAAwD,sBACxD,gCAAiC,iBACjC,0BAA2B,iBAC3B,mCAAoC,eACpC,wBAAyB,wBACzB,kCAAmC,mBACnC,kDAAmD,wCACnD,uDAAwD,WACxD,sCAAuC,YACvC,mCAAoC,YACpC,sDAAuD,2BACvD,mCAAoC,8BACpC,8BAA+B,oBAC/B,uCAAwC,2BACxC,2CAA4C,6BAC5C,iDAAkD,oCAClD,uCAAwC,kCACxC,2CAA4C,6BAC5C,2CAA4C,6BAC5C,+BAAgC,qBAChC,kCAAmC,mBACnC,6BAA8B,mBAC9B,4BAA6B,kBAC7B,8BAA+B,eAC/B,uCAAwC,qBACxC,qCAAsC,oBACtC,8CAA+C,8BAC/C,kCAAmC,oCACnC,iCAAkC,gBAClC,uCAAwC,uBACxC,0BAA2B,QAC3B,8BAA+B,0BAC/B,2CAA4C,6BAC5C,oDAAqD,0BACrD,qCAAsC,uBACtC,8CAA+C,oBAC/C,+BAAgC,cAChC,qCAAsC,QACtC,2BAA4B,SAC5B,6CAA8C,6BAC9C,4CAA6C,4BAC7C,8BAA+B,YAC/B,kCAAmC,WACnC,oCAAqC,mBACrC,4CAA6C,6BAC7C,uCAAwC,uBACxC,oCAAqC,0BACrC,sCAAuC,4BACvC,+CAAgD,4BAChD,8CAA+C,8BAC/C,4CAA6C,kBAC7C,mDAAoD,gCACpD,8CAA+C,sBAC/C,yCAA0C,uBAC1C,sDAAuD,kCACvD,kDAAmD,8BACnD,6CAA8C,sBAC9C,8BAA+B,qBAC/B,yBAA0B,iBAC1B,2CAA4C,sCAC5C,kCAAmC,4BACnC,iCAAkC,eAClC,yCAA0C,aAC1C,6BAA8B,UAC9B,sCAAuC,iBACvC,kCAAmC,sBACnC,uCAAwC,sBACxC,mCAAoC,yBACpC,mCAAoC,oCACpC,4CAA6C,oCAC7C,+CAAgD,oCAChD,wCAAyC,gBACzC,0CAA2C,4BAC3C,8CAA+C,uBAC/C,+BAAgC,cAChC,iCAAkC,qCAClC,uCAAwC,4CACxC,+BAAgC,mCAChC,4CAA6C,iDAC7C,yCAA0C,8CAC1C,2CAA4C,8CAC5C,oCAAqC,wCACrC,sCAAuC,2CACvC,uCAAwC,WACxC,oDAAqD,qBACrD,4CAA6C,aAC7C,+CAAgD,gBAChD,6CAA8C,aAC9C,4BAA6B,UAC7B,yCAA0C,+BAC1C,kCAAmC,6BACnC,6BAA8B,iBAC9B,4BAA6B,eAC7B,4CAA6C,mBAC7C,+CAAgD,sBAChD,yCAA0C,8CAC1C,wCAAyC,2BACzC,uCAAwC,sBACxC,gCAAiC,qCACjC,iCAAkC,6BAClC,6BAA8B,gCAC9B,8BAA+B,qBAC/B,wCAAyC,gCACzC,2CAA4C,mCAC5C,oCAAqC,4BACrC,mCAAoC,2BACpC,6BAA8B,oBAC9B,8BAA+B,sBAC/B,gCAAiC,wBACjC,iDAAkD,wBAClD,6CAA8C,mBAC9C,+BAAgC,qBAChC,oCAAqC,yBACrC,6BAA8B,mBAC9B,0CAA2C,uBAC3C,yCAA0C,cAC1C,8BAA+B,oBAC/B,sCAAuC,oBACvC,oCAAqC,mCACrC,mCAAoC,0BACpC,4CAA6C,0BAC7C,4DAA6D,6BAC7D,+BAAgC,qBAChC,iCAAkC,mBAClC,oCAAqC,qBACrC,sCAAuC,6BACvC,oDAAqD,iBACrD,mDAAoD,gBACpD,oDAAqD,iBACrD,mCAAoC,4BACpC,4CAA6C,qBAC7C,2DAA4D,6BAC5D,sDAAuD,wBACvD,+CAAgD,wBAChD,mCAAoC,sBACpC,4CAA6C,gCAC7C,uDAAwD,uBACxD,oCAAqC,2BACrC,kCAAmC,gDACnC,2CAA4C,0DAC5C,8BAA+B,qBAC/B,gCAAiC,uBACjC,6CAA8C,4BAC9C,yCAA0C,wBAC1C,uCAAwC,oCACxC,8BAA+B,qBAC/B,+BAAgC,kBAChC,uCAAwC,2BACxC,+BAAgC,2BAChC,4BAA6B,aAC7B,yCAA0C,yBAC1C,2BAA4B,+BAC5B,qCAAsC,gCACtC,oCAAqC,eACrC,iCAAkC,YAClC,6BAA8B,OAC9B,sCAAuC,qBACvC,sCAAuC,uBACvC,iDAAkD,mCAClD,6DAA8D,oBAC9D,4BAA6B,aAC7B,0BAA2B,oBAC3B,mCAAoC,mBACpC,wCAAyC,2BACzC,4CAA6C,sDAC7C,wCAAyC,iDACzC,uCAAwC,+CACxC,+CAAgD,mBAChD,+DAAgE,oCAChE,2EAA4E,sCAC5E,kDAAmD,6BACnD,mDAAoD,qBACpD,0BAA2B,sBAC3B,mCAAoC,+BACpC,gCAAiC,iBACjC,2CAA4C,cAC5C,mDAAoD,sBACpD,iCAAkC,kBAClC,6BAA8B,qBAC9B,+CAAgD,0BAChD,qDAAsD,gCACtD,iDAAkD,4BAClD,gDAAiD,2BACjD,yCAA0C,kBAC1C,sDAAuD,gBACvD,kDAAmD,WACnD,qDAAsD,eACtD,+CAAgD,uBAChD,gDAAiD,SACjD,kDAAmD,6BACnD,uEAAwE,0BACxE,4FAA6F,yBAC7F,+BAAgC,OAChC,kCAAmC,kBACnC,gDAAiD,iBACjD,wDAAyD,UACzD,kEAAmE,YACnE,mDAAoD,oBACpD,wCAAyC,uBACzC,qEAAsE,mCACtE,8CAA+C,8BAC/C,mCAAoC,YACpC,iCAAkC,WAClC,gCAAiC,cACjC,qCAAsC,qBACtC,wCAAyC,wBACzC,0CAA2C,0BAC3C,iCAAkC,wBAClC,6BAA8B,YAC9B,yCAA0C,wBAC1C,sCAAuC,sBACvC,qCAAsC,oBACtC,+BAAgC,cAChC,4DAA6D,0CAC7D,6BAA8B,YAC9B,kCAAmC,iBACnC,yCAA0C,yBAC1C,gCAAiC,eACjC,8CAA+C,6BAC/C,sCAAuC,qBACvC,oCAAqC,mBACrC,0CAA2C,0BAC3C,oCAAqC,mBACrC,uDAAwD,sBACxD,6CAA8C,gBAC9C,oCAAqC,oBACrC,qCAAsC,oBACtC,wCAAyC,wBACzC,sCAAuC,sBACvC,qCAAsC,qBACtC,iCAAkC,gBAClC,gCAAiC,eACjC,4CAA6C,4BAC7C,2CAA4C,2BAC5C,2CAA4C,2BAC5C,oCAAqC,mBACrC,gCAAiC,eACjC,wCAAyC,8BACzC,yDAA0D,oBAC1D,8CAA+C,qBAC/C,6CAA8C,6BAC9C,2CAA4C,4BAC5C,2CAA4C,2BAC5C,2CAA4C,YAC5C,oCAAqC,mBACrC,8BAA+B,aAC/B,mCAAoC,kBACpC,kCAAmC,iBACnC,gCAAiC,cACjC,6BAA8B,WAC9B,oCAAqC,mBACrC,uCAAwC,+BACxC,2BAA4B,iBAC5B,8BAA+B,oBAC/B,wCAAyC,oBACzC,6BAA8B,6BAC9B,+BAAgC,qBAChC,4CAA6C,uCAC7C,qDAAsD,WACtD,6DAA8D,oBAC9D,oCAAqC,2BACrC,8CAA+C,0BAC/C,6BAA8B,SAC9B,yCAA0C,mBAC1C,kCAAmC,yBACnC,wCAAyC,qBACzC,oCAAqC,iBACrC,8BAA+B,kCAC/B,2BAA4B,OAC5B,kCAAmC,mBACnC,kCAAmC,oCACnC,6BAA8B,2BAC9B,kCAAmC,kBACnC,wCAAyC,+BACzC,kCAAmC,yBACnC,mCAAoC,0BACpC,0CAA2C,kCAC3C,mCAAoC,0BACpC,mCAAoC,UACpC,qCAAsC,qBACtC,6CAA8C,kDAC9C,mCAAoC,uBACpC,8BAA+B,iBAC/B,iCAAkC,wBAClC,2CAA4C,oBAC5C,wBAAyB,cACzB,kCAAmC,gBACnC,qCAAsC,oBACtC,kCAAmC,qBACnC,gCAAiC,mBACjC,iDAAkD,uBAClD,oCAAqC,mBACrC,wCAAyC,sBACzC,gCAAiC,aACjC,kCAAmC,aACnC,4CAA6C,wBAC7C,+CAAgD,wBAChD,+CAAgD,wBAChD,gCAAiC,6BACjC,qCAAsC,4BACtC,0CAA2C,wBAC3C,oCAAqC,8CACrC,+BAAgC,0BAChC,4CAA6C,qBAC7C,0CAA2C,gCAC3C,wCAAyC,sBACzC,sCAAuC,qBACvC,+CAAgD,qBAChD,4CAA6C,oCAC7C,yDAA0D,qCAC1D,8DAA+D,2CAC/D,kCAAmC,2BACnC,gDAAiD,kBACjD,iCAAkC,6BAClC,yCAA0C,iBAC1C,kDAAmD,oBACnD,qDAAsD,uBACtD,8CAA+C,+BAC/C,2BAA4B,6BAC5B,mCAAoC,4BACpC,4BAA6B,kBAC7B,8BAA+B,iBAC/B,2BAA4B,8BAC5B,oCAAqC,2BACrC,iCAAkC,sCAClC,4BAA6B,oBAC7B,sBAAuB,eACvB,4BAA6B,sBAC7B,4BAA6B,kBAC7B,8CAA+C,mCAC/C,sCAAuC,+BACvC,+BAAgC,wCAChC,mCAAoC,8BACpC,0CAA2C,wBAC3C,+DAAgE,2BAChE,2DAA4D,+BAC5D,4DAA6D,gCAC7D,mCAAoC,mBACpC,sCAAuC,iBACvC,+BAAgC,kBAChC,0CAA2C,cAC3C,kDAAmD,UACnD,oDAAqD,yBACrD,kDAAmD,oBACnD,gDAAiD,oBACjD,4BAA6B,qBAC7B,+CAAgD,aAChD,+CAAgD,aAChD,+CAAgD,sBAChD,4CAA6C,mBAC7C,yCAA0C,gBAC1C,oCAAqC,UACrC,6CAA8C,+CAC9C,sCAAuC,iBACzC,EAKaC,GAA0D,CACrE,wBAAyB,GACzB,4CAA6C,GAC7C,wCAAyC,GACzC,2CAA4C,GAC5C,wCAAyC,GACzC,gDAAiD,GACjD,uDAAwD,GACxD,4BAA6B,GAC7B,oCAAqC,GACrC,kCAAmC,GACnC,qCAAsC,GACtC,4CAA6C,GAC7C,oCAAqC,GACrC,qCAAsC,EACxC,ECjZaC,GAAoB,CAC/B,+BACA,kCACA,2BACA,qCACA,qCACA,kCACA,iDACA,+BACA,6CACA,0CACA,mDACA,oDACA,qDACA,8BACA,4DACA,gCACA,+BACA,yCACA,oCACA,mCACA,wBACA,kCACA,kDACA,yBACA,mCACA,uCACA,2CACA,iDACA,2CACA,uCACA,gDACA,0BACA,oCACA,4CACA,sCACA,8CACA,8CACA,yCACA,6CACA,kCACA,8CACA,2CACA,8BACA,2CACA,kCACA,yCACA,sCACA,kCACA,uCACA,mCACA,+BACA,iCACA,uCACA,+BACA,4CACA,2CACA,oCACA,sCACA,oDACA,4CACA,+CACA,6CACA,+CACA,4BACA,yCACA,+CACA,yCACA,wCACA,8BACA,wCACA,oCACA,mCACA,6BACA,8BACA,gCACA,iDACA,yCACA,+BACA,oCACA,oDACA,mDACA,uCACA,gCACA,yBACA,+BACA,iCACA,4BACA,yCACA,2BACA,sCACA,sCACA,iDACA,4BACA,+CACA,gCACA,2CACA,mDACA,iCACA,gDACA,wDACA,wCACA,mCACA,iCACA,gCACA,6BACA,yCACA,yCACA,sCACA,+BACA,kCACA,gCACA,sCACA,0CACA,8CACA,6CACA,oCACA,uDACA,mCACA,qCACA,wCACA,sCACA,2CACA,2CACA,oCACA,gCACA,mDACA,wCACA,yDACA,6CACA,2CACA,2CACA,oCACA,4BACA,uCACA,wCACA,6BACA,oCACA,6BACA,oCACA,mDACA,kCACA,yCACA,sCACA,kCACA,mCACA,qCACA,iCACA,iCACA,2CACA,kCACA,qCACA,oCACA,iDACA,iDACA,kDACA,kDACA,gCACA,4CACA,0CACA,+BACA,4CACA,0CACA,0CACA,wCACA,4CACA,yDACA,kCACA,8CACA,oCACA,gD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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/query.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/types.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/e2e/selectors.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/DefaultSubscription.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/messageFromError.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useLastError.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/SubscriptionField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/ArgQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/AdvancedMulti.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/EntryIcon.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedEntry.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRow.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/Search.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/ResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/ResourceField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/AdvancedResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/FormatAsField.tsx","webpack://grafana/./public/app/core/utils/deferred.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/useMigrations.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/resourceTypes.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/logsResourceTypes.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AdvancedResourcePicker.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AggregationField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/DimensionFields.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/LegendFormatField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNameField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNamespaceField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TimeGrainField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TopField.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useAsyncState.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/dataHooks.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/usePreparedQuery.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/resourcePicker/resourcePickerData.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateAnnotation.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/GrafanaTemplateVariableFn.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/VariableEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/variables.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/tracking.ts","webpack://grafana/./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.ts"],"sourcesContent":["import { includes, filter } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\n    const timeGrains = filter(allowedTimeGrains, (o) => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = rangeUtil.intervalToMs(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > rangeUtil.intervalToMs(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import { find, get } from 'lodash';\n\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorLocations,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n  AzureMonitorLocationsResponse,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        const value = get(result.value[i], valueFieldName);\n        const text = get(result.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricNamespace?: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (\n        typeof result.value[i].type === 'string' &&\n        (!metricNamespace || result.value[i].type.toLocaleLowerCase() === metricNamespace.toLocaleLowerCase())\n      ) {\n        list.push({\n          text: result.value[i].name,\n          value: result.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: get(result.data.value[i], textFieldName),\n          value: get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseLocations(result: AzureMonitorLocationsResponse) {\n    const locations: AzureMonitorLocations[] = [];\n\n    if (!result) {\n      return locations;\n    }\n\n    for (const location of result.value) {\n      locations.push({ name: location.name, displayName: location.displayName, supportsLogs: undefined });\n    }\n\n    return locations;\n  }\n}\n","import { map } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMonitorOption, VariableOptionGroup } from '../types';\n\nexport const hasOption = (options: AzureMonitorOption[], value: string): boolean =>\n  options.some((v) => (v.options ? hasOption(v.options, value) : v.value === value));\n\nexport const findOptions = (options: AzureMonitorOption[], values: string[] = []) => {\n  if (values.length === 0) {\n    return [];\n  }\n  const set = values.reduce((accum, item) => {\n    accum.add(item);\n    return accum;\n  }, new Set());\n  return options.filter((option) => set.has(option.value));\n};\n\nexport const toOption = (v: { text: string; value: string }) => ({ value: v.value, label: v.text });\n\nexport const addValueToOptions = (\n  values: AzureMonitorOption[],\n  variableOptionGroup: VariableOptionGroup,\n  value?: string\n) => {\n  const options = [...values, variableOptionGroup];\n\n  const optionValues = values.map((m) => m.value.toLowerCase()).concat(variableOptionGroup.options.map((p) => p.value));\n  if (value && !optionValues.includes(value.toLowerCase())) {\n    options.push({ label: value, value });\n  }\n\n  return options;\n};\n\nexport function convertTimeGrainsToMs<T extends { value: string }>(timeGrains: T[]) {\n  const allowedTimeGrainsMs: number[] = [];\n  timeGrains.forEach((tg: any) => {\n    if (tg.value !== 'auto') {\n      allowedTimeGrainsMs.push(rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\n    }\n  });\n  return allowedTimeGrainsMs;\n}\n\n// Route definitions shared with the backend.\n// Check: /pkg/tsdb/azuremonitor/azuremonitor-resource-handler.go <registerRoutes>\nexport const routeNames = {\n  azureMonitor: 'azuremonitor',\n  logAnalytics: 'loganalytics',\n  appInsights: 'appinsights',\n  resourceGraph: 'resourcegraph',\n};\n\nexport function interpolateVariable(value: any, variable: VariableWithMultiSupport) {\n  if (typeof value === 'string') {\n    // When enabling multiple responses, quote the value to mimic the array result below\n    // even if only one response is selected. This does not apply if only the \"include all\"\n    // option is enabled but with a custom value.\n    if (variable.multi || (variable.includeAll && !variable.allValue)) {\n      return \"'\" + value + \"'\";\n    } else {\n      return value;\n    }\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  const quotedValues = map(value, (val) => {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    return \"'\" + val + \"'\";\n  });\n  return quotedValues.join(',');\n}\n","import { DataQuery } from '@grafana/data';\n\nimport { GrafanaTemplateVariableQuery } from './templateVariables';\n\nexport enum AzureQueryType {\n  AzureMonitor = 'Azure Monitor',\n  LogAnalytics = 'Azure Log Analytics',\n  AzureResourceGraph = 'Azure Resource Graph',\n  SubscriptionsQuery = 'Azure Subscriptions',\n  ResourceGroupsQuery = 'Azure Resource Groups',\n  NamespacesQuery = 'Azure Namespaces',\n  ResourceNamesQuery = 'Azure Resource Names',\n  MetricNamesQuery = 'Azure Metric Names',\n  WorkspacesQuery = 'Azure Workspaces',\n  LocationsQuery = 'Azure Regions',\n  /** Deprecated */\n  GrafanaTemplateVariableFn = 'Grafana Template Variable Function',\n}\n\n/**\n * Represents the query as it moves through the frontend query editor and datasource files.\n * It can represent new queries that are still being edited, so all properties are optional\n */\nexport interface AzureMonitorQuery extends DataQuery {\n  queryType?: AzureQueryType;\n\n  subscription?: string;\n\n  /** ARG uses multiple subscriptions */\n  subscriptions?: string[];\n\n  azureMonitor?: AzureMetricQuery;\n  azureLogAnalytics?: AzureLogsQuery;\n  azureResourceGraph?: AzureResourceGraphQuery;\n  grafanaTemplateVariableFn?: GrafanaTemplateVariableQuery;\n\n  /** Template variables params */\n  resourceGroup?: string;\n  namespace?: string;\n  resource?: string;\n  region?: string;\n}\n\nexport interface AzureMonitorResource {\n  resourceGroup?: string;\n  resourceName?: string;\n}\n\n/**\n * Azure Monitor Metrics sub-query properties\n */\nexport interface AzureMetricQuery {\n  resources?: AzureMetricResource[];\n  /** metricNamespace is used as the resource type (or resource namespace).\n   * It's usually equal to the target metric namespace.\n   * Kept the name of the variable as metricNamespace to avoid backward incompatibility issues.\n   */\n  metricNamespace?: string;\n  /** used as the value for the metricNamespace param when different from the resource namespace */\n  customNamespace?: string;\n  metricName?: string;\n  region?: string;\n  timeGrain?: string;\n  aggregation?: string;\n  dimensionFilters?: AzureMetricDimension[];\n  alias?: string;\n  top?: string;\n  allowedTimeGrainsMs?: number[];\n\n  /** @deprecated */\n  timeGrainUnit?: string;\n\n  /** @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration */\n  dimension?: string;\n\n  /** @deprecated This property was migrated to dimensionFilters and should only be accessed in the migration */\n  dimensionFilter?: string;\n\n  /** @deprecated Use metricNamespace instead */\n  metricDefinition?: string;\n\n  /** @deprecated Use resourceGroup, resourceName and metricNamespace instead */\n  resourceUri?: string;\n\n  /** @deprecated Use resources instead */\n  resourceGroup?: string;\n  /** @deprecated Use resources instead */\n  resourceName?: string;\n}\n\n/**\n * Azure Monitor Logs sub-query properties\n */\nexport interface AzureLogsQuery {\n  query?: string;\n  resultFormat?: string;\n  resources?: string[];\n\n  workspace?: string;\n\n  /** @deprecated Use resources instead */\n  resource?: string;\n}\n\n/**\n * Azure Monitor ARG sub-query properties\n */\nexport interface AzureResourceGraphQuery {\n  query?: string;\n  resultFormat?: string;\n}\n\nexport interface AzureMetricDimension {\n  dimension: string;\n  operator: string;\n  filters?: string[];\n  /**\n   * @deprecated filter is deprecated in favour of filters to support multiselect\n   */\n  filter?: string;\n}\n\nexport interface AzureMetricResource {\n  subscription?: string;\n  resourceGroup?: string;\n  resourceName?: string;\n  metricNamespace?: string;\n  region?: string;\n}\n","import {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourceSettings,\n  PanelData,\n  TableData,\n} from '@grafana/data';\n\nimport Datasource from '../datasource';\n\nimport { AzureMonitorQuery } from './query';\n\nexport type AzureDataSourceSettings = DataSourceSettings<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\nexport type AzureDataSourceInstanceSettings = DataSourceInstanceSettings<AzureDataSourceJsonData>;\n\nexport interface DatasourceValidationResult {\n  status: 'success' | 'error';\n  message: string;\n  title?: string;\n}\n\n/**\n * Azure clouds known to Azure Monitor.\n */\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  None = '',\n}\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport interface AzureDataSourceJsonData extends DataSourceJsonData {\n  cloudName: string;\n  azureAuthType?: AzureAuthType;\n\n  // monitor\n  tenantId?: string;\n  clientId?: string;\n  subscriptionId?: string;\n\n  // logs\n  /** @deprecated Azure Logs credentials */\n  azureLogAnalyticsSameAs?: boolean;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsTenantId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsClientId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsSubscriptionId?: string;\n  /** @deprecated Azure Logs credentials */\n  logAnalyticsDefaultWorkspace?: string;\n\n  // App Insights\n  appInsightsAppId?: string;\n}\n\nexport interface AzureDataSourceSecureJsonData {\n  clientSecret?: string;\n  appInsightsApiKey?: string;\n}\n\n// Represents an errors that come back from frontend requests.\n// Not totally sure how accurate this type is.\nexport type AzureMonitorErrorish = Error | string | React.ReactElement;\n\n// Azure Monitor API Types\nexport interface AzureMonitorMetricsMetadataResponse {\n  value: AzureMonitorMetricMetadataItem[];\n}\n\nexport interface AzureMonitorMetricMetadataItem {\n  id: string;\n  resourceId: string;\n  primaryAggregationType: string;\n  supportedAggregationTypes: string[];\n  name: AzureMonitorLocalizedValue;\n  dimensions?: AzureMonitorLocalizedValue[];\n  metricAvailabilities?: AzureMonitorMetricAvailabilityMetadata[];\n}\n\nexport interface AzureMonitorMetricNamespacesResponse {\n  value: AzureMonitorMetricNamespaceItem[];\n}\n\nexport interface AzureMonitorMetricNamespaceItem {\n  name: string;\n  properties: { metricNamespacename: string };\n}\n\nexport interface AzureMonitorMetricNamesResponse {\n  value: AzureMonitorMetricNameItem[];\n}\n\nexport interface AzureMonitorMetricNameItem {\n  name: { value: string; localizedValue: string };\n}\n\nexport interface AzureMonitorMetricAvailabilityMetadata {\n  timeGrain: string;\n  retention: string;\n}\n\nexport interface AzureMonitorLocalizedValue {\n  value: string;\n  localizedValue: string;\n}\n\nexport interface AzureMonitorResourceGroupsResponse {\n  data: {\n    value: Array<{ name: string }>;\n  };\n  status: number;\n  statusText: string;\n}\n\nexport interface AzureLogsVariable {\n  text: string;\n  value: string;\n}\n\nexport interface AzureLogsTableData extends TableData {\n  columns: AzureLogsTableColumn[];\n  rows: any[];\n  type: string;\n}\n\nexport interface AzureLogsTableColumn {\n  text: string;\n  type: string;\n}\n\nexport interface AzureMonitorOption<T = string> {\n  label: string;\n  value: T;\n  options?: AzureMonitorOption[];\n}\n\nexport type VariableOptionGroup = { label: string; options: AzureMonitorOption[] };\n\nexport interface AzureQueryEditorFieldProps {\n  data?: PanelData;\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  variableOptionGroup: VariableOptionGroup;\n\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nexport interface AzureResourceSummaryItem {\n  subscriptionName: string;\n  resourceGroupName: string | undefined;\n  resourceName: string | undefined;\n}\n\nexport interface RawAzureSubscriptionItem {\n  subscriptionName: string;\n  subscriptionId: string;\n}\n\nexport interface RawAzureResourceGroupItem {\n  resourceGroupURI: string;\n  resourceGroupName: string;\n}\n\nexport interface RawAzureResourceItem {\n  id: string;\n  name: string;\n  subscriptionId: string;\n  resourceGroup: string;\n  type: string;\n  location: string;\n}\n\nexport interface AzureGraphResponse<T = unknown> {\n  data: T;\n  // skipToken is used for pagination, to get the next page\n  $skipToken?: string;\n}\n\n// https://docs.microsoft.com/en-us/rest/api/azureresourcegraph/resourcegraph(2021-03-01)/resources/resources#queryrequestoptions\nexport interface AzureResourceGraphOptions {\n  $skip: number;\n  $skipToken: string;\n  $top: number;\n  allowPartialScopes: boolean;\n  resultFormat: 'objectArray' | 'table';\n}\n\n// Azure Monitor Metrics query API data fetcher argument types.\n// The types prefixed by Legacy are applicable to pre-version 9 of Grafana\n// that do not have a resourceUri, instead the resourceUri is built up from\n// the subscription, resource group, metric definition (a.k.a. resource type)\n// and the resource name.\nexport type GetMetricNamespacesQuery = AzureGetMetricNamespacesQuery | LegacyAzureGetMetricNamespacesQuery;\nexport type GetMetricNamesQuery = AzureGetMetricNamesQuery | LegacyAzureGetMetricNamesQuery;\nexport type GetMetricMetadataQuery = AzureGetMetricMetadataQuery | LegacyAzureGetMetricMetadataQuery;\n\nexport interface AzureGetMetricNamespacesQuery {\n  resourceUri: string;\n}\nexport interface LegacyAzureGetMetricNamespacesQuery {\n  subscription: string;\n  resourceGroup: string;\n  metricNamespace?: string;\n  resourceName?: string;\n}\n\nexport interface AzureGetMetricNamesQuery {\n  resourceUri: string;\n  metricNamespace?: string;\n  customNamespace?: string;\n}\n\nexport interface LegacyAzureGetMetricNamesQuery {\n  subscription: string;\n  resourceGroup: string;\n  resourceName: string;\n  metricNamespace: string;\n  customNamespace?: string;\n}\n\nexport interface AzureGetMetricMetadataQuery {\n  resourceUri: string;\n  metricNamespace: string;\n  customNamespace?: string;\n  metricName: string;\n}\n\nexport interface LegacyAzureGetMetricMetadataQuery {\n  subscription: string;\n  resourceGroup: string;\n  resourceName: string;\n  metricNamespace: string;\n  customNamespace?: string;\n  metricName: string;\n}\n\nexport interface AzureGetResourceNamesQuery {\n  subscriptionId: string;\n  resourceGroup?: string;\n  metricNamespace?: string;\n  region?: string;\n}\n\nexport interface AzureMonitorLocations {\n  displayName: string;\n  name: string;\n  supportsLogs?: boolean;\n}\n\nexport interface AzureMonitorProvidersResponse {\n  namespace: string;\n  resourceTypes: ProviderResourceType[];\n}\n\nexport interface ProviderResourceType {\n  resourceType: string;\n  locations: string[];\n  apiVersions: string[];\n  capabilities: string;\n}\n\nexport interface AzureMonitorLocationsResponse {\n  value: Location[];\n}\n\ninterface Location {\n  id: string;\n  name: string;\n  displayName: string;\n  regionalDisplayName: string;\n  metadata: LocationMetadata;\n}\n\ninterface LocationMetadata {\n  regionType: string;\n  regionCategory: string;\n  geographyGroup: string;\n  longitude: string;\n  latitude: string;\n  physicalLocation: string;\n  pairedRegion: LocationPairedRegion[];\n}\n\ninterface LocationPairedRegion {\n  name: string;\n  id: string;\n}\n","import { config } from '@grafana/runtime';\n\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'msi',\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret: typeof credentials.clientSecret === 'string' ? credentials.clientSecret : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n","import { E2ESelectors } from '@grafana/e2e-selectors';\n\nexport const components = {\n  configEditor: {\n    authType: {\n      select: 'data-testid auth-type',\n    },\n    azureCloud: {\n      input: 'data-testid azure-cloud',\n    },\n    tenantID: {\n      input: 'data-testid tenant-id',\n    },\n    clientID: {\n      input: 'data-testid client-id',\n    },\n    clientSecret: {\n      input: 'data-testid client-secret',\n    },\n    loadSubscriptions: {\n      button: 'data-testid load-subscriptions',\n    },\n    defaultSubscription: {\n      input: 'data-testid default-subscription',\n    },\n  },\n  queryEditor: {\n    header: {\n      select: 'data-testid azure-monitor-experimental-header',\n    },\n    resourcePicker: {\n      select: {\n        button: 'data-testid resource-picker-select',\n      },\n      search: {\n        input: 'data-testid resource-picker-search',\n      },\n      apply: {\n        button: 'data-testid resource-picker-apply',\n      },\n      cancel: {\n        button: 'data-testid resource-picker-cancel',\n      },\n      advanced: {\n        collapse: 'data-testid resource-picker-advanced',\n        subscription: {\n          input: 'data-testid resource-picker-subscription',\n        },\n        resourceGroup: {\n          input: 'data-testid resource-picker-resource-group',\n        },\n        namespace: {\n          input: 'data-testid resource-picker-namespace',\n        },\n        region: {\n          input: 'data-testid resource-picker-region',\n        },\n        resource: {\n          input: 'data-testid resource-picker-resource',\n        },\n      },\n    },\n    metricsQueryEditor: {\n      metricName: {\n        input: 'data-testid metric-name',\n      },\n    },\n    logsQueryEditor: {\n      formatSelection: {\n        input: 'data-testid format-selection',\n      },\n    },\n    argsQueryEditor: {\n      container: {\n        input: 'data-testid azure-monitor-arg-query-editor',\n      },\n      subscriptions: {\n        input: 'data-testid azure-monitor-args-subscription',\n      },\n    },\n  },\n  variableEditor: {\n    queryType: {\n      input: 'data-testid query-type',\n    },\n    subscription: {\n      input: 'data-testid subscription',\n    },\n    resourceGroup: {\n      input: 'data-testid resource-group',\n    },\n    namespace: {\n      input: 'data-testid namespace',\n    },\n    resource: {\n      input: 'data-testid resource',\n    },\n    region: {\n      input: 'data-testid region',\n    },\n  },\n};\n\nexport const selectors: { components: E2ESelectors<typeof components> } = {\n  components: components,\n};\n","import React, { ChangeEvent, FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LegacyForms, Button, Select, InlineField } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\nimport { AzureAuthType, AzureCredentials } from '../types';\n\nconst { Input } = LegacyForms;\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange?: (updatedCredentials: AzureCredentials) => void;\n  disabled?: boolean;\n  children?: JSX.Element;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nconst LABEL_WIDTH = 18;\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, disabled, managedIdentityEnabled } = props;\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {managedIdentityEnabled && (\n        <InlineField\n          label=\"Authentication\"\n          labelWidth={LABEL_WIDTH}\n          tooltip=\"Choose the type of authentication to Azure services\"\n          data-testid={selectors.components.configEditor.authType.select}\n          htmlFor=\"authentication-type\"\n        >\n          <Select\n            className=\"width-15\"\n            value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n            options={authTypeOptions}\n            onChange={onAuthTypeChange}\n            disabled={disabled}\n          />\n        </InlineField>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <InlineField\n              label=\"Azure Cloud\"\n              labelWidth={LABEL_WIDTH}\n              tooltip=\"Choose an Azure Cloud\"\n              data-testid={selectors.components.configEditor.azureCloud.input}\n              htmlFor=\"azure-cloud-type\"\n              disabled={disabled}\n            >\n              <Select\n                inputId=\"azure-cloud-type\"\n                aria-label=\"Azure Cloud\"\n                className=\"width-15\"\n                value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                options={azureCloudOptions}\n                onChange={onAzureCloudChange}\n              />\n            </InlineField>\n          )}\n          <InlineField\n            label=\"Directory (tenant) ID\"\n            labelWidth={LABEL_WIDTH}\n            data-testid={selectors.components.configEditor.tenantID.input}\n            htmlFor=\"tenant-id\"\n          >\n            <div className=\"width-15\">\n              <Input\n                aria-label=\"Tenant ID\"\n                className=\"width-30\"\n                placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                value={credentials.tenantId || ''}\n                onChange={onTenantIdChange}\n                disabled={disabled}\n              />\n            </div>\n          </InlineField>\n          <InlineField\n            label=\"Application (client) ID\"\n            labelWidth={LABEL_WIDTH}\n            data-testid={selectors.components.configEditor.clientID.input}\n            htmlFor=\"tenant-id\"\n          >\n            <div className=\"width-15\">\n              <Input\n                className=\"width-30\"\n                aria-label=\"Client ID\"\n                placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                value={credentials.clientId || ''}\n                onChange={onClientIdChange}\n                disabled={disabled}\n              />\n            </div>\n          </InlineField>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <InlineField label=\"Client Secret\" labelWidth={LABEL_WIDTH} htmlFor=\"client-secret\">\n                <div className=\"width-30\" style={{ display: 'flex', gap: '4px' }}>\n                  <Input\n                    aria-label=\"Client Secret\"\n                    placeholder=\"configured\"\n                    disabled={true}\n                    data-testid={'client-secret'}\n                  />\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset} disabled={disabled}>\n                    Reset\n                  </Button>\n                </div>\n              </InlineField>\n            ) : (\n              <InlineField\n                label=\"Client Secret\"\n                labelWidth={LABEL_WIDTH}\n                data-testid={selectors.components.configEditor.clientSecret.input}\n                htmlFor=\"client-secret\"\n              >\n                <Input\n                  className=\"width-30\"\n                  aria-label=\"Client Secret\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientSecret || ''}\n                  onChange={onClientSecretChange}\n                  id=\"client-secret\"\n                  disabled={disabled}\n                />\n              </InlineField>\n            ))}\n        </>\n      )}\n      {props.children}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, useEffect, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select, Button } from '@grafana/ui';\n\nimport { isCredentialsComplete } from '../credentials';\nimport { selectors } from '../e2e/selectors';\nimport { AzureCredentials, AzureDataSourceJsonData } from '../types';\n\nconst LABEL_WIDTH = 18;\n\nexport interface Props {\n  options: AzureDataSourceJsonData;\n  credentials: AzureCredentials;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  subscriptions: Array<SelectableValue<string>>;\n  onSubscriptionsChange: (receivedSubscriptions: Array<SelectableValue<string>>) => void;\n  onSubscriptionChange: (subscriptionId?: string) => void;\n  disabled?: boolean;\n}\n\nexport const DefaultSubscription: FunctionComponent<Props> = (props: Props) => {\n  const {\n    credentials,\n    disabled,\n    options,\n    subscriptions,\n    getSubscriptions,\n    onSubscriptionChange,\n    onSubscriptionsChange,\n  } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    onSubscriptionsChange(received);\n    if (getSubscriptions) {\n      if (autoSelect && !options.subscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onChange(received[0]);\n      } else if (options.subscriptionId) {\n        const found = received.find((opt) => opt.value === options.subscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onChange = (selected: SelectableValue<string> | undefined) => onSubscriptionChange(selected?.value);\n\n  return (\n    <>\n      <InlineField\n        label=\"Default Subscription\"\n        labelWidth={LABEL_WIDTH}\n        data-testid={selectors.components.configEditor.defaultSubscription.input}\n        htmlFor=\"default-subscription\"\n      >\n        <div className=\"width-30\" style={{ display: 'flex', gap: '4px' }}>\n          <Select\n            inputId=\"default-subscription\"\n            aria-label=\"Default Subscription\"\n            value={\n              options.subscriptionId ? subscriptions.find((opt) => opt.value === options.subscriptionId) : undefined\n            }\n            options={subscriptions}\n            onChange={onChange}\n            disabled={disabled}\n          />\n          <Button\n            variant=\"secondary\"\n            type=\"button\"\n            onClick={onLoadSubscriptions}\n            disabled={!hasRequiredFields || disabled}\n            data-testid={selectors.components.configEditor.loadSubscriptions.button}\n          >\n            Load Subscriptions\n          </Button>\n        </div>\n      </InlineField>\n    </>\n  );\n};\n","import React, { FunctionComponent, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { getCredentials, updateCredentials } from '../credentials';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\n\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { DefaultSubscription } from './DefaultSubscription';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions, options } = props;\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials, subscriptionId?: string): void => {\n    if (!subscriptionId) {\n      setSubscriptions([]);\n    }\n    updateOptions((options) =>\n      updateCredentials({ ...options, jsonData: { ...options.jsonData, subscriptionId } }, credentials)\n    );\n  };\n\n  const onSubscriptionsChange = (receivedSubscriptions: Array<SelectableValue<string>>) =>\n    setSubscriptions(receivedSubscriptions);\n\n  const onSubscriptionChange = (subscriptionId?: string) =>\n    updateOptions((options) => ({ ...options, jsonData: { ...options.jsonData, subscriptionId } }));\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Authentication</h3>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        disabled={props.options.readOnly}\n      >\n        <DefaultSubscription\n          subscriptions={subscriptions}\n          credentials={credentials}\n          getSubscriptions={getSubscriptions}\n          disabled={props.options.readOnly}\n          onSubscriptionsChange={onSubscriptionsChange}\n          onSubscriptionChange={onSubscriptionChange}\n          options={options.jsonData}\n        />\n      </AzureCredentialsForm>\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, updateDatasourcePluginOption } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { routeNames } from '../utils/common';\n\nimport { MonitorConfig } from './MonitorConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\ninterface ErrorMessage {\n  title: string;\n  description: string;\n  details?: string;\n}\n\nexport interface State {\n  unsaved: boolean;\n  error?: ErrorMessage;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    try {\n      const result = await getBackendSrv()\n        .fetch({\n          url: this.baseURL + query,\n          method: 'GET',\n        })\n        .toPromise();\n\n      this.setState({ error: undefined });\n      return ResponseParser.parseSubscriptionsForSelect(result);\n    } catch (err) {\n      if (isFetchError(err)) {\n        this.setState({\n          error: {\n            title: 'Error requesting subscriptions',\n            description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n            details: err?.data?.message,\n          },\n        });\n      }\n      return Promise.resolve([]);\n    }\n  };\n\n  render() {\n    const { options } = this.props;\n    const { error } = this.state;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        {error && (\n          <Alert severity=\"error\" title={error.title}>\n            <p>{error.description}</p>\n            {error.details && <details style={{ whiteSpace: 'pre-wrap' }}>{error.details}</details>}\n          </Alert>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { isValidElement } from 'react';\n\nimport { AzureMonitorErrorish } from '../types';\n\nexport function messageFromElement(error: AzureMonitorErrorish): AzureMonitorErrorish | undefined {\n  if (isValidElement(error)) {\n    return error;\n  } else {\n    return messageFromError(error);\n  }\n}\n\nexport default function messageFromError(error: any): string | undefined {\n  if (!error || typeof error !== 'object') {\n    return undefined;\n  }\n\n  if (typeof error.message === 'string') {\n    return error.message;\n  }\n\n  if (typeof error.data?.error?.message === 'string') {\n    return error.data.error.message;\n  }\n\n  // Copied from the old Angular code - this might be checking for errors in places\n  // that the new code just doesnt use.\n  // As new error objects are discovered they should be added to the above code, rather\n  // than below\n  const maybeAMessage =\n    error.error?.data?.error?.innererror?.innererror?.message ||\n    error.error?.data?.error?.innererror?.message ||\n    error.error?.data?.error?.message ||\n    error.error?.data?.message ||\n    error.data?.message ||\n    error;\n\n  if (typeof maybeAMessage === 'string') {\n    return maybeAMessage;\n  } else if (maybeAMessage && maybeAMessage.toString) {\n    return maybeAMessage.toString();\n  }\n\n  return undefined;\n}\n","import { useState, useCallback, useMemo } from 'react';\n\nimport { AzureMonitorErrorish } from '../types';\n\nimport { messageFromElement } from './messageFromError';\n\ntype SourcedError = [string, AzureMonitorErrorish];\n\nexport default function useLastError() {\n  const [errors, setErrors] = useState<SourcedError[]>([]);\n\n  // Handles errors from any child components that request data to display their options\n  const addError = useCallback((errorSource: string, error: AzureMonitorErrorish | undefined) => {\n    setErrors((errors) => {\n      const errorsCopy = [...errors];\n      const index = errors.findIndex(([vSource]) => vSource === errorSource);\n\n      // If there's already an error, remove it. If we're setting a new error\n      // below, we'll move it to the front\n      if (index > -1) {\n        errorsCopy.splice(index, 1);\n      }\n\n      // And then add the new error to the top of the array. If error is defined, it was already\n      // removed above.\n      if (error) {\n        errorsCopy.unshift([errorSource, error]);\n      }\n\n      return errorsCopy;\n    });\n  }, []);\n\n  const errorMessage = useMemo(() => {\n    const recentError = errors[0];\n    return recentError && messageFromElement(recentError[1]);\n  }, [errors]);\n\n  return [errorMessage, addError] as const;\n}\n","import React from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { InlineField } from '@grafana/ui';\nimport { Props as InlineFieldProps } from '@grafana/ui/src/components/Forms/InlineField';\n\ninterface Props extends InlineFieldProps {\n  label: string;\n  inlineField?: boolean;\n  labelWidth?: number;\n}\n\nconst DEFAULT_LABEL_WIDTH = 18;\n\nexport const Field = (props: Props) => {\n  const { labelWidth, inlineField, ...remainingProps } = props;\n\n  if (!inlineField) {\n    return <EditorField width={labelWidth || DEFAULT_LABEL_WIDTH} {...remainingProps} />;\n  } else {\n    return <InlineField labelWidth={labelWidth || DEFAULT_LABEL_WIDTH} {...remainingProps} />;\n  }\n};\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, MultiSelect } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\nimport { AzureMonitorQuery, AzureQueryEditorFieldProps, AzureMonitorOption, AzureQueryType } from '../types';\nimport { findOptions } from '../utils/common';\n\nimport { Field } from './Field';\n\ninterface SubscriptionFieldProps extends AzureQueryEditorFieldProps {\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  subscriptions: AzureMonitorOption[];\n  multiSelect?: boolean;\n}\n\nconst SubscriptionField: React.FC<SubscriptionFieldProps> = ({\n  query,\n  subscriptions,\n  variableOptionGroup,\n  onQueryChange,\n  multiSelect = false,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      let newQuery: AzureMonitorQuery = {\n        ...query,\n        subscription: change.value,\n      };\n\n      if (query.queryType === AzureQueryType.AzureMonitor) {\n        newQuery.azureMonitor = {\n          ...newQuery.azureMonitor,\n          resources: undefined,\n          metricNamespace: undefined,\n          metricName: undefined,\n          aggregation: undefined,\n          timeGrain: '',\n          dimensionFilters: [],\n        };\n      }\n\n      onQueryChange(newQuery);\n    },\n    [query, onQueryChange]\n  );\n\n  const onSubscriptionsChange = useCallback(\n    (change: Array<SelectableValue<string>>) => {\n      if (!change) {\n        return;\n      }\n\n      onQueryChange({\n        ...query,\n        subscriptions: change.map((c) => c.value ?? ''),\n      });\n    },\n    [query, onQueryChange]\n  );\n\n  const options = useMemo(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);\n\n  return multiSelect ? (\n    <Field label=\"Subscriptions\" data-testid={selectors.components.queryEditor.argsQueryEditor.subscriptions.input}>\n      <MultiSelect\n        isClearable\n        value={findOptions([...subscriptions, ...variableOptionGroup.options], query.subscriptions)}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={onSubscriptionsChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  ) : (\n    <Field label=\"Subscription\" data-testid={selectors.components.queryEditor.argsQueryEditor.subscriptions.input}>\n      <Select\n        value={query.subscription}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default SubscriptionField;\n","import React, { useCallback } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nconst QueryField: React.FC<AzureQueryEditorFieldProps> = ({ query, onQueryChange }) => {\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange({\n        ...query,\n        azureResourceGraph: {\n          ...query.azureResourceGraph,\n          query: newQuery,\n        },\n      });\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureResourceGraph?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n    />\n  );\n};\n\nexport default QueryField;\n","import { intersection } from 'lodash';\nimport React, { useState, useMemo } from 'react';\n\nimport { EditorFieldGroup, EditorRow, EditorRows } from '@grafana/experimental';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport SubscriptionField from '../SubscriptionField';\n\nimport QueryField from './QueryField';\n\ninterface ArgQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst ERROR_SOURCE = 'arg-subscriptions';\n\nfunction selectSubscriptions(\n  fetchedSubscriptions: string[],\n  currentSubscriptions?: string[],\n  currentSubscription?: string\n) {\n  let querySubscriptions = currentSubscriptions || [];\n  if (querySubscriptions.length === 0 && currentSubscription) {\n    querySubscriptions = [currentSubscription];\n  }\n  if (querySubscriptions.length === 0 && fetchedSubscriptions.length) {\n    querySubscriptions = [fetchedSubscriptions[0]];\n  }\n  const commonSubscriptions = intersection(querySubscriptions, fetchedSubscriptions);\n  if (fetchedSubscriptions.length && querySubscriptions.length > commonSubscriptions.length) {\n    // If not all of the query subscriptions are in the list of fetched subscriptions, then\n    // select only the ones present (or the first one if none is present)\n    querySubscriptions = commonSubscriptions.length > 0 ? commonSubscriptions : [fetchedSubscriptions[0]];\n  }\n  return querySubscriptions;\n}\n\nconst ArgQueryEditor: React.FC<ArgQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  const [subscriptions, setSubscriptions] = useState<AzureMonitorOption[]>([]);\n  useMemo(() => {\n    datasource\n      .getSubscriptions()\n      .then((results) => {\n        const fetchedSubscriptions = results.map((v) => ({ label: v.text, value: v.value, description: v.value }));\n        setSubscriptions(fetchedSubscriptions);\n        setError(ERROR_SOURCE, undefined);\n\n        onChange({\n          ...query,\n          subscriptions: selectSubscriptions(\n            fetchedSubscriptions.map((v) => v.value),\n            query.subscriptions,\n            query.subscription\n          ),\n        });\n      })\n      .catch((err) => setError(ERROR_SOURCE, err));\n    // We are only interested in re-fetching subscriptions if the data source changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource]);\n\n  return (\n    <span data-testid={selectors.components.queryEditor.argsQueryEditor.container.input}>\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <SubscriptionField\n              multiSelect\n              subscriptions={subscriptions}\n              query={query}\n              datasource={datasource}\n              subscriptionId={subscriptionId}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n      <QueryField\n        query={query}\n        datasource={datasource}\n        subscriptionId={subscriptionId}\n        variableOptionGroup={variableOptionGroup}\n        onQueryChange={onChange}\n        setError={setError}\n      />\n    </span>\n  );\n};\n\nexport default ArgQueryEditor;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\n\nexport interface SpaceProps {\n  v?: number;\n  h?: number;\n  layout?: 'block' | 'inline';\n}\n\nexport const Space = (props: SpaceProps) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, props);\n\n  return <span className={cx(styles.wrapper)} />;\n};\n\nSpace.defaultProps = {\n  v: 0,\n  h: 0,\n  layout: 'block',\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, props: SpaceProps) => ({\n  wrapper: css([\n    {\n      paddingRight: theme.spacing(props.h ?? 0),\n      paddingBottom: theme.spacing(props.v ?? 0),\n    },\n    props.layout === 'inline' && {\n      display: 'inline-block',\n    },\n    props.layout === 'block' && {\n      display: 'block',\n    },\n  ]),\n}));\n","import React, { useState } from 'react';\n\nimport { Collapse } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMetricResource } from '../../types';\nimport { Space } from '../Space';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n}\n\nconst AdvancedMulti = ({ resources, onChange, renderAdvanced }: ResourcePickerProps<string | AzureMetricResource>) => {\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(!!resources.length && JSON.stringify(resources).includes('$'));\n\n  return (\n    <div data-testid={selectors.components.queryEditor.resourcePicker.advanced.collapse}>\n      <Collapse\n        collapsible\n        label=\"Advanced\"\n        isOpen={isAdvancedOpen}\n        onToggle={() => setIsAdvancedOpen(!isAdvancedOpen)}\n      >\n        {renderAdvanced(resources, onChange)}\n        <Space v={2} />\n      </Collapse>\n    </div>\n  );\n};\n\nexport default AdvancedMulti;\n","export enum ResourceRowType {\n  Subscription = 'Subscription',\n  ResourceGroup = 'ResourceGroup',\n  Resource = 'Resource',\n  VariableGroup = 'TemplateVariableGroup',\n  Variable = 'TemplateVariable',\n}\n\nexport interface ResourceRow {\n  id: string; // azure's raw data id usually passes along a uri (except in the case of subscriptions), to make things less confusing for ourselves we parse the id string out of the uri or vice versa\n  uri: string; // ex: /subscriptions/subid123\n  name: string;\n  type: ResourceRowType;\n  typeLabel: string;\n  locationDisplayName?: string;\n  location?: string;\n  children?: ResourceRowGroup;\n}\n\nexport type ResourceRowGroup = ResourceRow[];\n","import React from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nimport { ResourceRow, ResourceRowType } from './types';\n\ninterface EntryIconProps {\n  entry: ResourceRow;\n  isOpen: boolean;\n}\n\nexport const EntryIcon: React.FC<EntryIconProps> = ({ isOpen, entry: { type } }) => {\n  switch (type) {\n    case ResourceRowType.Subscription:\n      return <Icon name=\"layer-group\" />;\n\n    case ResourceRowType.ResourceGroup:\n      return <Icon name={isOpen ? 'folder-open' : 'folder'} />;\n\n    case ResourceRowType.Resource:\n      return <Icon name=\"cube\" />;\n\n    case ResourceRowType.VariableGroup:\n      return <Icon name=\"x\" />;\n\n    case ResourceRowType.Variable:\n      return <Icon name=\"x\" />;\n\n    default:\n      return null;\n  }\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    tableLayout: 'fixed',\n  }),\n\n  tableScroller: css({\n    maxHeight: '50vh',\n    overflow: 'auto',\n  }),\n\n  header: css({\n    background: theme.colors.background.secondary,\n  }),\n\n  row: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n    '&:last-of-type': {\n      borderBottomColor: theme.colors.border.medium,\n    },\n  }),\n\n  disabledRow: css({\n    opacity: 0.5,\n  }),\n\n  cell: css({\n    padding: theme.spacing(1, 1, 1, 0),\n    width: '25%',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    '&:first-of-type': {\n      width: '50%',\n      padding: theme.spacing(1, 1, 1, 2),\n    },\n  }),\n\n  collapseButton: css({ margin: 0 }),\n\n  loadingCell: css({\n    textAlign: 'center',\n  }),\n\n  spinner: css({\n    marginBottom: 0,\n  }),\n\n  nestedEntry: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n\n  entryContentItem: css({\n    margin: theme.spacing(0, 1, 0, 0),\n  }),\n\n  truncated: css({\n    minWidth: 0,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n\n  resourceField: css({\n    maxWidth: theme.spacing(36),\n    overflow: 'hidden',\n  }),\n\n  resourceFieldButton: css({\n    padding: '7px',\n    textAlign: 'left',\n  }),\n\n  nestedRowCheckbox: css({\n    zIndex: 0,\n  }),\n\n  selectionFooter: css({\n    position: 'sticky',\n    bottom: 0,\n    background: theme.colors.background.primary,\n    paddingTop: theme.spacing(2),\n  }),\n\n  loadingWrapper: css({\n    textAlign: 'center',\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n\n  resultLimit: css({\n    margin: '4px 0',\n    fontStyle: 'italic',\n  }),\n\n  modal: css({\n    width: theme.breakpoints.values.lg,\n  }),\n});\n\nexport default getStyles;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect } from 'react';\n\nimport { Checkbox, IconButton, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { Space } from '../Space';\n\nimport { EntryIcon } from './EntryIcon';\nimport getStyles from './styles';\nimport { ResourceRow } from './types';\n\ninterface NestedEntryProps {\n  level: number;\n  entry: ResourceRow;\n  isSelected: boolean;\n  isSelectable: boolean;\n  isOpen: boolean;\n  isDisabled: boolean;\n  scrollIntoView?: boolean;\n  onToggleCollapse: (row: ResourceRow) => void;\n  onSelectedChange: (row: ResourceRow, selected: boolean) => void;\n}\n\nexport const NestedEntry: React.FC<NestedEntryProps> = ({\n  entry,\n  isSelected,\n  isDisabled,\n  isOpen,\n  isSelectable,\n  level,\n  scrollIntoView,\n  onToggleCollapse,\n  onSelectedChange,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const hasChildren = !!entry.children;\n\n  const handleToggleCollapse = useCallback(() => {\n    onToggleCollapse(entry);\n  }, [onToggleCollapse, entry]);\n\n  const handleSelectedChanged = useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const isSelected = ev.target.checked;\n      onSelectedChange(entry, isSelected);\n    },\n    [entry, onSelectedChange]\n  );\n\n  const checkboxId = `${scrollIntoView ? 'table' : 'summary'}_checkbox_${entry.uri}`;\n\n  // Scroll to the selected element if it's not in the view\n  // Only do it once, when the component is mounted\n  useEffect(() => {\n    if (isSelected && scrollIntoView) {\n      document.getElementById(checkboxId)?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className={styles.nestedEntry} style={{ marginLeft: level * (3 * theme.spacing.gridSize) }}>\n      {hasChildren ? (\n        <IconButton\n          className={styles.collapseButton}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={isOpen ? `Collapse ${entry.name}` : `Expand ${entry.name}`}\n          onClick={handleToggleCollapse}\n          id={entry.id}\n        />\n      ) : (\n        <Space layout=\"inline\" h={2} />\n      )}\n\n      <Space layout=\"inline\" h={2} />\n\n      {isSelectable && (\n        <>\n          <Checkbox\n            id={checkboxId}\n            onChange={handleSelectedChanged}\n            disabled={isDisabled}\n            value={isSelected}\n            className={styles.nestedRowCheckbox}\n          />\n          <Space layout=\"inline\" h={2} />\n        </>\n      )}\n\n      <EntryIcon entry={entry} isOpen={isOpen} />\n      <Space layout=\"inline\" h={1} />\n\n      <label htmlFor={checkboxId} className={cx(styles.entryContentItem, styles.truncated)}>\n        {entry.name}\n      </label>\n    </div>\n  );\n};\n","import { TemplateSrv } from '@grafana/runtime';\n\nimport { AzureMetricResource, GetMetricNamespacesQuery, GetMetricNamesQuery } from '../types';\n\nexport default class UrlBuilder {\n  static buildResourceUri(templateSrv: TemplateSrv, resource: AzureMetricResource) {\n    const urlArray = [];\n    const { subscription, resourceGroup, metricNamespace, resourceName } = resource;\n\n    if (subscription) {\n      urlArray.push('/subscriptions', subscription);\n\n      if (resourceGroup) {\n        urlArray.push('resourceGroups', resourceGroup);\n\n        if (metricNamespace && resourceName) {\n          const metricNamespaceProcessed = templateSrv.replace(metricNamespace);\n          const metricNamespaceArray = metricNamespace.split('/');\n          const resourceNameProcessed = templateSrv.replace(resourceName);\n          const resourceNameArray = resourceName.split('/');\n          const provider = metricNamespaceArray.shift();\n          if (provider) {\n            urlArray.push('providers', provider);\n          }\n\n          if (\n            metricNamespaceProcessed.toLowerCase().startsWith('microsoft.storage/storageaccounts/') &&\n            !resourceNameProcessed.endsWith('default')\n          ) {\n            resourceNameArray.push('default');\n          }\n\n          if (resourceNameArray.length > metricNamespaceArray.length) {\n            const parentResource = resourceNameArray.shift();\n            if (parentResource) {\n              urlArray.push(parentResource);\n            }\n          }\n\n          for (const i in metricNamespaceArray) {\n            urlArray.push(metricNamespaceArray[i]);\n            urlArray.push(resourceNameArray[i]);\n          }\n        }\n      }\n    }\n\n    return urlArray.join('/');\n  }\n\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    apiVersion: string,\n    query: GetMetricNamespacesQuery,\n    globalRegion: boolean,\n    templateSrv: TemplateSrv\n  ) {\n    let resourceUri: string;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricNamespace, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(templateSrv, {\n        subscription,\n        resourceGroup,\n        metricNamespace,\n        resourceName,\n      });\n    }\n\n    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}${\n      globalRegion ? '&region=global' : ''\n    }`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    apiVersion: string,\n    query: GetMetricNamesQuery,\n    templateSrv: TemplateSrv\n  ) {\n    let resourceUri: string;\n    const { customNamespace } = query;\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricNamespace, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(templateSrv, {\n        subscription,\n        resourceGroup,\n        metricNamespace,\n        resourceName,\n      });\n    }\n    let url = `${baseUrl}${resourceUri}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}`;\n    if (customNamespace) {\n      url += `&metricnamespace=${encodeURIComponent(customNamespace)}`;\n    }\n\n    return url;\n  }\n}\n","import produce from 'immer';\n\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport UrlBuilder from '../../azure_monitor/url_builder';\nimport { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureMetricResource, AzureMonitorQuery } from '../../types';\n\nimport { ResourceRow, ResourceRowGroup } from './types';\n\n// This regex matches URIs representing:\n//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572\n//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources\n//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM\nconst RESOURCE_URI_REGEX =\n  /\\/subscriptions\\/(?<subscription>[^/]+)(?:\\/resourceGroups\\/(?<resourceGroup>[^/]+)(?:\\/providers\\/(?<metricNamespaceAndResource>.+))?)?/;\n\ntype RegexGroups = Record<string, string | undefined>;\n\nfunction parseNamespaceAndName(metricNamespaceAndName?: string) {\n  if (!metricNamespaceAndName) {\n    return {};\n  }\n  const stringArray = metricNamespaceAndName.split('/');\n  // The first two groups belong to the namespace (e.g. Microsoft.Storage/storageAccounts)\n  const namespaceArray = stringArray.splice(0, 2);\n  // The next element belong to the resource name (e.g. storageAcc1)\n  const resourceNameArray = stringArray.splice(0, 1);\n  // If there are more elements, keep adding them to the namespace and resource name, alternatively\n  // e.g (blobServices/default)\n  while (stringArray.length) {\n    const nextElem = stringArray.shift()!;\n    stringArray.length % 2 === 0 ? resourceNameArray.push(nextElem) : namespaceArray.push(nextElem);\n  }\n  return { metricNamespace: namespaceArray.join('/'), resourceName: resourceNameArray.join('/') };\n}\n\nexport function parseResourceURI(resourceURI: string): AzureMetricResource {\n  const matches = RESOURCE_URI_REGEX.exec(resourceURI);\n  const groups: RegexGroups = matches?.groups ?? {};\n  const { subscription, resourceGroup, metricNamespaceAndResource } = groups;\n  const { metricNamespace, resourceName } = parseNamespaceAndName(metricNamespaceAndResource);\n\n  return { subscription, resourceGroup, metricNamespace, resourceName };\n}\n\nexport function parseMultipleResourceDetails(resources: Array<string | AzureMetricResource>, location?: string) {\n  return resources.map((resource) => {\n    return parseResourceDetails(resource, location);\n  });\n}\n\nexport function parseResourceDetails(resource: string | AzureMetricResource, location?: string) {\n  if (typeof resource === 'string') {\n    const res = parseResourceURI(resource);\n    if (location) {\n      res.region = location;\n    }\n    return res;\n  }\n  return resource;\n}\n\nexport function resourcesToStrings(resources: Array<string | AzureMetricResource>) {\n  return resources.map((resource) => resourceToString(resource));\n}\n\nexport function resourceToString(resource?: string | AzureMetricResource) {\n  return resource\n    ? typeof resource === 'string'\n      ? resource\n      : UrlBuilder.buildResourceUri(getTemplateSrv(), resource)\n    : '';\n}\n\nexport function isGUIDish(input: string) {\n  return !!input.match(/^[A-Z0-9]+/i);\n}\n\nfunction compareNamespaceAndName(\n  rowNamespace?: string,\n  rowName?: string,\n  resourceNamespace?: string,\n  resourceName?: string\n) {\n  // StorageAccounts subresources are not listed independently\n  if (resourceNamespace?.startsWith('microsoft.storage/storageaccounts')) {\n    resourceNamespace = 'microsoft.storage/storageaccounts';\n    if (resourceName?.endsWith('/default')) {\n      resourceName = resourceName.slice(0, -'/default'.length);\n    }\n  }\n  return rowNamespace === resourceNamespace && rowName === resourceName;\n}\n\nexport function matchURI(rowURI: string, resourceURI: string) {\n  const targetParams = parseResourceDetails(resourceURI);\n  const rowParams = parseResourceDetails(rowURI);\n\n  return (\n    rowParams?.subscription === targetParams?.subscription &&\n    rowParams?.resourceGroup?.toLowerCase() === targetParams?.resourceGroup?.toLowerCase() &&\n    compareNamespaceAndName(\n      rowParams?.metricNamespace?.toLowerCase(),\n      rowParams?.resourceName,\n      targetParams?.metricNamespace?.toLowerCase(),\n      targetParams?.resourceName\n    )\n  );\n}\n\nexport function findRows(rows: ResourceRowGroup, uris: string[]): ResourceRow[] {\n  const result: ResourceRow[] = [];\n  uris.forEach((uri) => {\n    const row = findRow(rows, uri);\n    if (row) {\n      result.push(row);\n    }\n  });\n  return result;\n}\n\nexport function findRow(rows: ResourceRowGroup, uri: string): ResourceRow | undefined {\n  for (const row of rows) {\n    if (matchURI(row.uri, uri)) {\n      return row;\n    }\n\n    if (row.children) {\n      const result = findRow(row.children, uri);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function addResources(rows: ResourceRowGroup, targetParentId: string, newResources: ResourceRowGroup) {\n  return produce(rows, (draftState) => {\n    const draftRow = findRow(draftState, targetParentId);\n\n    // we can't find the selected resource in our list of resources,\n    // probably means user has either mistyped in the input field\n    // or is using template variables.\n    // either way no need to throw, just show that none of the resources are checked\n    if (!draftRow) {\n      return;\n    }\n\n    draftRow.children = newResources;\n  });\n}\n\nexport function setResources(\n  query: AzureMonitorQuery,\n  type: ResourcePickerQueryType,\n  resources: Array<string | AzureMetricResource>\n): AzureMonitorQuery {\n  if (type === 'logs') {\n    // Resource URI for LogAnalytics\n    return {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resources: resourcesToStrings(resources).filter((resource) => resource !== ''),\n      },\n    };\n  }\n  // Resource object for metrics\n  const parsedResource = resources.length ? parseResourceDetails(resources[0]) : {};\n  return {\n    ...query,\n    subscription: parsedResource.subscription,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricNamespace: parsedResource.metricNamespace?.toLocaleLowerCase(),\n      region: parsedResource.region,\n      resources: parseMultipleResourceDetails(resources).filter(\n        (resource) =>\n          resource.resourceName !== '' &&\n          resource.metricNamespace !== '' &&\n          resource.subscription !== '' &&\n          resource.resourceGroup !== ''\n      ),\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n","import { cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { FadeTransition, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport { NestedEntry } from './NestedEntry';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRow } from './utils';\n\ninterface NestedRowProps {\n  row: ResourceRow;\n  level: number;\n  selectedRows: ResourceRowGroup;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  scrollIntoView?: boolean;\n}\n\nconst NestedRow: React.FC<NestedRowProps> = ({\n  row,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n  scrollIntoView,\n  disableRow,\n}) => {\n  const styles = useStyles2(getStyles);\n  const [rowStatus, setRowStatus] = useState<'open' | 'closed' | 'loading'>('closed');\n\n  const isSelected = !!selectedRows.find((v) => v.uri.toLowerCase() === row.uri.toLowerCase());\n  const isDisabled = !isSelected && disableRow(row, selectedRows);\n  const isOpen = rowStatus === 'open';\n\n  const onRowToggleCollapse = async () => {\n    if (rowStatus === 'open') {\n      setRowStatus('closed');\n      return;\n    }\n    setRowStatus('loading');\n    requestNestedRows(row)\n      .then(() => setRowStatus('open'))\n      .catch(() => setRowStatus('closed'));\n  };\n\n  // opens the resource group on load of component if there was a previously saved selection\n  useEffect(() => {\n    // Assuming we don't have multi-select yet\n    const selectedRow = selectedRows[0];\n\n    const containsChild = selectedRow && !!findRow(row.children ?? [], selectedRow.uri);\n\n    if (containsChild) {\n      setRowStatus('open');\n    }\n  }, [selectedRows, row]);\n\n  return (\n    <>\n      <tr className={cx(styles.row, isDisabled && styles.disabledRow)} key={row.id}>\n        <td className={styles.cell}>\n          <NestedEntry\n            level={level}\n            isSelected={isSelected}\n            isDisabled={isDisabled}\n            isOpen={isOpen}\n            entry={row}\n            onToggleCollapse={onRowToggleCollapse}\n            onSelectedChange={onRowSelectedChange}\n            isSelectable={selectableEntryTypes.some((type) => type === row.type)}\n            scrollIntoView={scrollIntoView}\n          />\n        </td>\n\n        <td className={styles.cell}>{row.typeLabel}</td>\n\n        <td className={styles.cell}>{row.locationDisplayName ?? '-'}</td>\n      </tr>\n\n      {isOpen &&\n        row.children &&\n        Object.keys(row.children).length > 0 &&\n        row.children.map((childRow) => (\n          <NestedRow\n            key={childRow.uri}\n            row={childRow}\n            selectedRows={selectedRows}\n            level={level + 1}\n            requestNestedRows={requestNestedRows}\n            onRowSelectedChange={onRowSelectedChange}\n            selectableEntryTypes={selectableEntryTypes}\n            scrollIntoView={scrollIntoView}\n            disableRow={disableRow}\n          />\n        ))}\n\n      <FadeTransition visible={rowStatus === 'loading'}>\n        <tr>\n          <td className={cx(styles.cell, styles.loadingCell)} colSpan={3}>\n            <LoadingPlaceholder text=\"Loading...\" className={styles.spinner} />\n          </td>\n        </tr>\n      </FadeTransition>\n    </>\n  );\n};\n\nexport default NestedRow;\n","import { debounce } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\n\nconst Search = ({ searchFn }: { searchFn: (searchPhrase: string) => void }) => {\n  const [searchFilter, setSearchFilter] = useState('');\n\n  const debouncedSearch = useMemo(() => debounce(searchFn, 600), [searchFn]);\n  useEffect(() => {\n    return () => {\n      // Stop the invocation of the debounced function after unmounting\n      debouncedSearch.cancel();\n    };\n  }, [debouncedSearch]);\n\n  return (\n    <Input\n      aria-label=\"resource search\"\n      prefix={<Icon name=\"search\" />}\n      value={searchFilter}\n      onChange={(event) => {\n        const searchPhrase = event.currentTarget.value;\n        setSearchFilter(searchPhrase);\n        debouncedSearch(searchPhrase);\n      }}\n      placeholder=\"search for a resource\"\n      data-testid={selectors.components.queryEditor.resourcePicker.search.input}\n    />\n  );\n};\n\nexport default Search;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { Alert, Button, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport ResourcePickerData, { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureMetricResource } from '../../types';\nimport messageFromError from '../../utils/messageFromError';\nimport { Space } from '../Space';\n\nimport AdvancedMulti from './AdvancedMulti';\nimport NestedRow from './NestedRow';\nimport Search from './Search';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRows, parseMultipleResourceDetails, resourcesToStrings, matchURI, resourceToString } from './utils';\n\ninterface ResourcePickerProps<T> {\n  resourcePickerData: ResourcePickerData;\n  resources: T[];\n  selectableEntryTypes: ResourceRowType[];\n  queryType: ResourcePickerQueryType;\n\n  onApply: (resources: T[]) => void;\n  onCancel: () => void;\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n  selectionNotice?: (selectedRows: ResourceRowGroup) => string;\n}\n\nconst ResourcePicker = ({\n  resourcePickerData,\n  resources,\n  onApply,\n  onCancel,\n  selectableEntryTypes,\n  queryType,\n  disableRow,\n  renderAdvanced,\n  selectionNotice,\n}: ResourcePickerProps<string | AzureMetricResource>) => {\n  const styles = useStyles2(getStyles);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [rows, setRows] = useState<ResourceRowGroup>([]);\n  const [selectedRows, setSelectedRows] = useState<ResourceRowGroup>([]);\n  const [internalSelected, setInternalSelected] = useState(resources);\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\n  const [shouldShowLimitFlag, setShouldShowLimitFlag] = useState(false);\n  const selectionNoticeText = selectionNotice?.(selectedRows);\n\n  // Sync the resourceURI prop to internal state\n  useEffect(() => {\n    setInternalSelected(resources);\n  }, [resources]);\n\n  const loadInitialData = useCallback(async () => {\n    if (!isLoading) {\n      try {\n        setIsLoading(true);\n        const resources = await resourcePickerData.fetchInitialRows(\n          queryType,\n          parseMultipleResourceDetails(internalSelected ?? {})\n        );\n        setRows(resources);\n      } catch (error) {\n        setErrorMessage(messageFromError(error));\n      }\n      setIsLoading(false);\n    }\n  }, [internalSelected, isLoading, resourcePickerData, queryType]);\n\n  useEffectOnce(() => {\n    loadInitialData();\n  });\n\n  // Avoid using empty resources\n  const isValid = (r: string | AzureMetricResource) =>\n    typeof r === 'string' ? r !== '' : r.subscription && r.resourceGroup && r.resourceName && r.metricNamespace;\n\n  // set selected row data whenever row or selection changes\n  useEffect(() => {\n    if (!internalSelected) {\n      setSelectedRows([]);\n    }\n\n    const sanitized = internalSelected.filter((r) => isValid(r));\n    const found = internalSelected && findRows(rows, resourcesToStrings(sanitized));\n    if (sanitized?.length > found.length) {\n      // Not all the selected items are in the current rows, so we need to generate the row\n      // information for those.\n      return setSelectedRows(resourcePickerData.parseRows(sanitized));\n    }\n    if (found && found.length) {\n      return setSelectedRows(found);\n    }\n    return setSelectedRows([]);\n  }, [internalSelected, rows, resourcePickerData]);\n\n  // Request resources for an expanded resource group\n  const requestNestedRows = useCallback(\n    async (parentRow: ResourceRow) => {\n      // clear error message (also when loading cached resources)\n      setErrorMessage(undefined);\n\n      // If we already have children, we don't need to re-fetch them.\n      if (parentRow.children?.length) {\n        return;\n      }\n\n      try {\n        const nestedRows = await resourcePickerData.fetchAndAppendNestedRow(rows, parentRow, queryType);\n        setRows(nestedRows);\n      } catch (error) {\n        setErrorMessage(messageFromError(error));\n        throw error;\n      }\n    },\n    [resourcePickerData, rows, queryType]\n  );\n\n  const handleSelectionChanged = useCallback(\n    (row: ResourceRow, isSelected: boolean) => {\n      if (isSelected) {\n        const newRes = queryType === 'logs' ? row.uri : parseMultipleResourceDetails([row.uri], row.location)[0];\n        const newSelected = internalSelected ? internalSelected.concat(newRes) : [newRes];\n        setInternalSelected(newSelected.filter((r) => isValid(r)));\n      } else {\n        const newInternalSelected = internalSelected?.filter((r) => {\n          return !matchURI(resourceToString(r), row.uri);\n        });\n        setInternalSelected(newInternalSelected);\n      }\n    },\n    [queryType, internalSelected, setInternalSelected]\n  );\n\n  const handleApply = useCallback(() => {\n    if (internalSelected) {\n      onApply(queryType === 'logs' ? internalSelected : parseMultipleResourceDetails(internalSelected));\n    }\n  }, [queryType, internalSelected, onApply]);\n\n  const handleSearch = useCallback(\n    async (searchWord: string) => {\n      // clear errors and warnings\n      setErrorMessage(undefined);\n      setShouldShowLimitFlag(false);\n\n      if (!searchWord) {\n        loadInitialData();\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const searchResults = await resourcePickerData.search(searchWord, queryType);\n        setRows(searchResults);\n        if (searchResults.length >= resourcePickerData.resultLimit) {\n          setShouldShowLimitFlag(true);\n        }\n      } catch (err) {\n        setErrorMessage(messageFromError(err));\n      }\n      setIsLoading(false);\n    },\n    [loadInitialData, resourcePickerData, queryType]\n  );\n\n  return (\n    <div>\n      <Search searchFn={handleSearch} />\n      {shouldShowLimitFlag ? (\n        <p className={styles.resultLimit}>Showing first {resourcePickerData.resultLimit} results</p>\n      ) : (\n        <Space v={2} />\n      )}\n\n      <table className={styles.table}>\n        <thead>\n          <tr className={cx(styles.row, styles.header)}>\n            <td className={styles.cell}>Scope</td>\n            <td className={styles.cell}>Type</td>\n            <td className={styles.cell}>Location</td>\n          </tr>\n        </thead>\n      </table>\n\n      <div className={styles.tableScroller}>\n        <table className={styles.table}>\n          <tbody>\n            {isLoading && (\n              <tr className={cx(styles.row)}>\n                <td className={styles.cell}>\n                  <LoadingPlaceholder text={'Loading...'} />\n                </td>\n              </tr>\n            )}\n            {!isLoading && rows.length === 0 && (\n              <tr className={cx(styles.row)}>\n                <td className={styles.cell} aria-live=\"polite\">\n                  No resources found\n                </td>\n              </tr>\n            )}\n            {!isLoading &&\n              rows.map((row) => (\n                <NestedRow\n                  key={row.uri}\n                  row={row}\n                  selectedRows={selectedRows}\n                  level={0}\n                  requestNestedRows={requestNestedRows}\n                  onRowSelectedChange={handleSelectionChanged}\n                  selectableEntryTypes={selectableEntryTypes}\n                  scrollIntoView={true}\n                  disableRow={disableRow}\n                />\n              ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className={styles.selectionFooter}>\n        {selectedRows.length > 0 && (\n          <>\n            <h5>Selection</h5>\n\n            <div className={styles.tableScroller}>\n              <table className={styles.table}>\n                <tbody>\n                  {selectedRows.map((row) => (\n                    <NestedRow\n                      key={row.uri}\n                      row={row}\n                      selectedRows={selectedRows}\n                      level={0}\n                      requestNestedRows={requestNestedRows}\n                      onRowSelectedChange={handleSelectionChanged}\n                      selectableEntryTypes={selectableEntryTypes}\n                      disableRow={() => false}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <Space v={2} />\n            {selectionNoticeText?.length ? (\n              <Alert title=\"\" severity=\"info\">\n                {selectionNoticeText}\n              </Alert>\n            ) : null}\n          </>\n        )}\n\n        <AdvancedMulti\n          resources={internalSelected}\n          onChange={(r) => setInternalSelected(r)}\n          renderAdvanced={renderAdvanced}\n        />\n\n        <Space v={2} />\n\n        <Button\n          disabled={!!errorMessage || !internalSelected.every(isValid)}\n          onClick={handleApply}\n          data-testid={selectors.components.queryEditor.resourcePicker.apply.button}\n        >\n          Apply\n        </Button>\n\n        <Space layout=\"inline\" h={1} />\n\n        <Button onClick={onCancel} variant=\"secondary\">\n          Cancel\n        </Button>\n      </div>\n\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting resources from Azure Monitor\">\n            {errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ResourcePicker;\n","import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, Icon, Modal, useStyles2, IconName } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureQueryEditorFieldProps, AzureMetricResource } from '../../types';\nimport { Field } from '../Field';\nimport ResourcePicker from '../ResourcePicker';\nimport getStyles from '../ResourcePicker/styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseMultipleResourceDetails, setResources } from '../ResourcePicker/utils';\n\ninterface ResourceFieldProps<T> extends AzureQueryEditorFieldProps {\n  selectableEntryTypes: ResourceRowType[];\n  queryType: ResourcePickerQueryType;\n  resources: T[];\n  inlineField?: boolean;\n  labelWidth?: number;\n  disableRow: (row: ResourceRow, selectedRows: ResourceRowGroup) => boolean;\n  renderAdvanced: (resources: T[], onChange: (resources: T[]) => void) => React.ReactNode;\n  selectionNotice?: (selectedRows: ResourceRowGroup) => string;\n}\n\nconst ResourceField: React.FC<ResourceFieldProps<string | AzureMetricResource>> = ({\n  query,\n  datasource,\n  onQueryChange,\n  selectableEntryTypes,\n  queryType,\n  resources,\n  inlineField,\n  labelWidth,\n  disableRow,\n  renderAdvanced,\n  selectionNotice,\n}) => {\n  const styles = useStyles2(getStyles);\n  const [pickerIsOpen, setPickerIsOpen] = useState(false);\n\n  const handleOpenPicker = useCallback(() => {\n    setPickerIsOpen(true);\n  }, []);\n\n  const closePicker = useCallback(() => {\n    setPickerIsOpen(false);\n  }, []);\n\n  const handleApply = useCallback(\n    (resources: Array<string | AzureMetricResource>) => {\n      onQueryChange(setResources(query, queryType, resources));\n      closePicker();\n    },\n    [closePicker, onQueryChange, query, queryType]\n  );\n\n  return (\n    <span data-testid={selectors.components.queryEditor.resourcePicker.select.button}>\n      <Modal\n        className={styles.modal}\n        title=\"Select a resource\"\n        isOpen={pickerIsOpen}\n        onDismiss={closePicker}\n        // The growing number of rows added to the modal causes a focus\n        // error in the modal, making it impossible to click on new elements\n        trapFocus={false}\n      >\n        <ResourcePicker\n          resourcePickerData={datasource.resourcePickerData}\n          resources={resources}\n          onApply={handleApply}\n          onCancel={closePicker}\n          selectableEntryTypes={selectableEntryTypes}\n          queryType={queryType}\n          disableRow={disableRow}\n          renderAdvanced={renderAdvanced}\n          selectionNotice={selectionNotice}\n        />\n      </Modal>\n      <Field label=\"Resource\" inlineField={inlineField} labelWidth={labelWidth}>\n        <Button className={styles.resourceFieldButton} variant=\"secondary\" onClick={handleOpenPicker} type=\"button\">\n          <ResourceLabel resources={resources} datasource={datasource} />\n        </Button>\n      </Field>\n    </span>\n  );\n};\n\ninterface ResourceLabelProps<T> {\n  resources: T[];\n  datasource: Datasource;\n}\n\nconst ResourceLabel = ({ resources, datasource }: ResourceLabelProps<string | AzureMetricResource>) => {\n  const [resourcesComponents, setResourcesComponents] = useState(parseMultipleResourceDetails(resources));\n\n  useEffect(() => {\n    setResourcesComponents(parseMultipleResourceDetails(resources));\n  }, [resources]);\n\n  if (!resources.length) {\n    return <>Select a resource</>;\n  }\n\n  return <FormattedResource resources={resourcesComponents} />;\n};\n\ninterface FormattedResourceProps {\n  resources: AzureMetricResource[];\n}\n\nconst FormattedResource = ({ resources }: FormattedResourceProps) => {\n  const styles = useStyles2(getStyles);\n\n  let icon: IconName = 'cube';\n  const items: string[] = [];\n  resources.forEach((resource) => {\n    if (resource.resourceName) {\n      items.push(resource.resourceName.split('/')[0]);\n      return;\n    }\n    if (resource.resourceGroup) {\n      icon = 'folder';\n      items.push(resource.resourceGroup);\n      return;\n    }\n    if (resource.subscription) {\n      icon = 'layer-group';\n      items.push(resource.subscription);\n      return;\n    }\n  });\n  return (\n    <span className={cx(styles.truncated, styles.resourceField)}>\n      <Icon name={icon} />\n      {items.join(', ')}\n    </span>\n  );\n};\n\nexport default ResourceField;\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { Icon, Input, Tooltip, Label, Button, useStyles2 } from '@grafana/ui';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resourceList: css({ width: '100%', display: 'flex', marginBlock: theme.spacing(1) }),\n});\n\nconst AdvancedResourcePicker = ({ resources, onChange }: ResourcePickerProps<string>) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Ensure there is at least one resource\n    if (resources.length === 0) {\n      onChange(['']);\n    }\n  }, [resources, onChange]);\n\n  const onResourceChange = (index: number, resource: string) => {\n    const newResources = [...resources];\n    newResources[index] = resource;\n    onChange(newResources);\n  };\n\n  const removeResource = (index: number) => {\n    const newResources = [...resources];\n    newResources.splice(index, 1);\n    onChange(newResources);\n  };\n\n  const addResource = () => {\n    onChange(resources.concat(''));\n  };\n\n  return (\n    <>\n      <Label>\n        <h6>\n          Resource URI(s){' '}\n          <Tooltip\n            content={\n              <>\n                Manually edit the{' '}\n                <a\n                  href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-standard-columns#_resourceid\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  resource uri\n                </a>\n                . Supports the use of multiple template variables (ex: /subscriptions/$subId/resourceGroups/$rg)\n              </>\n            }\n            placement=\"right\"\n            interactive={true}\n          >\n            <Icon name=\"info-circle\" />\n          </Tooltip>\n        </h6>\n      </Label>\n      {resources.map((resource, index) => (\n        <div key={`resource-${index + 1}`}>\n          <div className={styles.resourceList}>\n            <Input\n              id={`input-advanced-resource-picker-${index + 1}`}\n              value={resource}\n              onChange={(event) => onResourceChange(index, event.currentTarget.value)}\n              placeholder=\"ex: /subscriptions/$subId\"\n              data-testid={`input-advanced-resource-picker-${index + 1}`}\n            />\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => removeResource(index)}\n              data-testid={`remove-resource`}\n              hidden={resources.length === 1}\n            />\n          </div>\n        </div>\n      ))}\n      <Button aria-label=\"Add\" icon=\"plus\" variant=\"secondary\" onClick={addResource} type=\"button\">\n        Add resource URI\n      </Button>\n    </>\n  );\n};\n\nexport default AdvancedResourcePicker;\n","import { AzureMonitorQuery } from '../../types';\n\nexport function setKustoQuery(query: AzureMonitorQuery, kustoQuery: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      query: kustoQuery,\n    },\n  };\n}\n\nexport function setFormatAs(query: AzureMonitorQuery, formatAs: string): AzureMonitorQuery {\n  return {\n    ...query,\n    azureLogAnalytics: {\n      ...query.azureLogAnalytics,\n      resultFormat: formatAs,\n    },\n  };\n}\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setFormatAs } from './setQueryValue';\n\nconst FORMAT_OPTIONS: Array<SelectableValue<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n];\n\nconst FormatAsField: React.FC<AzureQueryEditorFieldProps> = ({ query, variableOptionGroup, onQueryChange }) => {\n  const options = useMemo(() => [...FORMAT_OPTIONS, variableOptionGroup], [variableOptionGroup]);\n\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      const { value } = change;\n      if (!value) {\n        return;\n      }\n\n      const newQuery = setFormatAs(query, value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <Field label=\"Format as\" data-testid={selectors.components.queryEditor.logsQueryEditor.formatSelection.input}>\n      <Select\n        inputId=\"azure-monitor-logs-workspaces-field\"\n        value={query.azureLogAnalytics?.resultFormat}\n        onChange={handleChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default FormatAsField;\n","export class Deferred<T = unknown> {\n  resolve?: (reason: T | PromiseLike<T>) => void;\n  reject?: (reason?: any) => void;\n  promise: Promise<T>;\n\n  constructor() {\n    this.resolve = undefined;\n    this.reject = undefined;\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    Object.freeze(this);\n  }\n}\n","import React, { useCallback, useEffect, useRef } from 'react';\n\nimport { CodeEditor, Monaco, MonacoEditor } from '@grafana/ui';\nimport { Deferred } from 'app/core/utils/deferred';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nimport { setKustoQuery } from './setQueryValue';\n\ninterface MonacoPromise {\n  editor: MonacoEditor;\n  monaco: Monaco;\n}\n\ninterface MonacoLanguages {\n  kusto: {\n    getKustoWorker: () => Promise<\n      (url: any) => Promise<{\n        setSchema: (schema: any, clusterUrl: string, name: string) => void;\n      }>\n    >;\n  };\n}\n\nconst QueryField: React.FC<AzureQueryEditorFieldProps> = ({ query, datasource, onQueryChange }) => {\n  const monacoPromiseRef = useRef<Deferred<MonacoPromise>>();\n  function getPromise() {\n    if (!monacoPromiseRef.current) {\n      monacoPromiseRef.current = new Deferred<MonacoPromise>();\n    }\n\n    return monacoPromiseRef.current.promise;\n  }\n\n  useEffect(() => {\n    if (!query.azureLogAnalytics?.resources || !query.azureLogAnalytics.resources.length) {\n      return;\n    }\n\n    const promises = [\n      datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resources[0]),\n      getPromise(),\n    ] as const;\n\n    // the kusto schema call might fail, but it's okay for that to happen silently\n    Promise.all(promises).then(([schema, { monaco, editor }]) => {\n      const languages = monaco.languages as unknown as MonacoLanguages;\n\n      languages.kusto\n        .getKustoWorker()\n        .then((kusto) => {\n          const model = editor.getModel();\n          return model && kusto(model.uri);\n        })\n        .then((worker) => {\n          worker?.setSchema(schema, 'https://help.kusto.windows.net', 'Samples');\n        });\n    });\n  }, [datasource.azureLogAnalyticsDatasource, query.azureLogAnalytics?.resources]);\n\n  const handleEditorMount = useCallback((editor: MonacoEditor, monaco: Monaco) => {\n    monacoPromiseRef.current?.resolve?.({ editor, monaco });\n  }, []);\n\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange(setKustoQuery(query, newQuery));\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureLogAnalytics?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n      onEditorDidMount={handleEditorMount}\n    />\n  );\n};\n\nexport default QueryField;\n","import { useEffect, useState } from 'react';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorQuery } from '../../types';\nimport { isGUIDish } from '../ResourcePicker/utils';\n\nasync function migrateWorkspaceQueryToResourceQuery(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  if (query.azureLogAnalytics?.workspace !== undefined && !query.azureLogAnalytics.resources) {\n    const isWorkspaceGUID = isGUIDish(query.azureLogAnalytics.workspace);\n    let resource: string;\n\n    if (isWorkspaceGUID) {\n      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);\n    } else {\n      // The value of workspace is probably a template variable so we just migrate it over as-is\n      resource = query.azureLogAnalytics.workspace;\n    }\n\n    const newQuery = {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resource: resource,\n        workspace: undefined,\n      },\n    };\n\n    delete newQuery.azureLogAnalytics.workspace;\n\n    onChange(newQuery);\n  }\n}\n\ninterface ErrorMessage {\n  title: string;\n  message: string;\n}\n\nexport default function useMigrations(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  const [migrationError, setMigrationError] = useState<ErrorMessage>();\n\n  useEffect(() => {\n    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch((err) =>\n      setMigrationError({\n        title: 'Unable to migrate workspace as a resource',\n        message: err.message,\n      })\n    );\n  }, [datasource, query, onChange]);\n\n  return migrationError;\n}\n","import React from 'react';\n\nimport { EditorFieldGroup, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Alert } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport ResourceField from '../ResourceField';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceDetails } from '../ResourcePicker/utils';\n\nimport AdvancedResourcePicker from './AdvancedResourcePicker';\nimport FormatAsField from './FormatAsField';\nimport QueryField from './QueryField';\nimport useMigrations from './useMigrations';\n\ninterface LogsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n  hideFormatAs?: boolean;\n}\n\nconst LogsQueryEditor: React.FC<LogsQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  hideFormatAs,\n}) => {\n  const migrationError = useMigrations(datasource, query, onChange);\n  const disableRow = (row: ResourceRow, selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      // Only if there is some resource(s) selected we should disable rows\n      return false;\n    }\n    const rowResourceNS = parseResourceDetails(row.uri, row.location).metricNamespace?.toLowerCase();\n    const selectedRowSampleNs = parseResourceDetails(\n      selectedRows[0].uri,\n      selectedRows[0].location\n    ).metricNamespace?.toLowerCase();\n    // Only resources with the same metricNamespace can be selected\n    return rowResourceNS !== selectedRowSampleNs;\n  };\n\n  return (\n    <span data-testid=\"azure-monitor-logs-query-editor-with-experimental-ui\">\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <ResourceField\n              query={query}\n              datasource={datasource}\n              inlineField={true}\n              labelWidth={10}\n              subscriptionId={subscriptionId}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              selectableEntryTypes={[\n                ResourceRowType.Subscription,\n                ResourceRowType.ResourceGroup,\n                ResourceRowType.Resource,\n                ResourceRowType.Variable,\n              ]}\n              resources={query.azureLogAnalytics?.resources ?? []}\n              queryType=\"logs\"\n              disableRow={disableRow}\n              renderAdvanced={(resources, onChange) => (\n                // It's required to cast resources because the resource picker\n                // specifies the type to string | AzureMetricResource.\n                // eslint-disable-next-line\n                <AdvancedResourcePicker resources={resources as string[]} onChange={onChange} />\n              )}\n              selectionNotice={() => 'You may only choose items of the same resource type.'}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <QueryField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n        <EditorRow>\n          <EditorFieldGroup>\n            {!hideFormatAs && (\n              <FormatAsField\n                query={query}\n                datasource={datasource}\n                subscriptionId={subscriptionId}\n                variableOptionGroup={variableOptionGroup}\n                onQueryChange={onChange}\n                setError={setError}\n              />\n            )}\n\n            {migrationError && <Alert title={migrationError.title}>{migrationError.message}</Alert>}\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n    </span>\n  );\n};\n\nexport default LogsQueryEditor;\n","/**\nThis list is obtained parsing https://docs.microsoft.com/en-us/azure/governance/resource-graph/reference/supported-tables-resources\nTo programatically get the list, execute in the browser console:\n \n const i = {};\n document.querySelectorAll('li').forEach((li) => { \n    const m = li.textContent.match(/(.*\\..*\\/.*?)\\s\\((.*)\\)/);\n    if (m) {\n      i[m[1].toLowerCase()] = m[2];\n    }\n  });\n  i;\n \nNote: Validate that the output makes sense, the format of the page may change.\n */\nexport const resourceTypeDisplayNames: { [k: string]: string } = {\n  'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems': 'Backup Items',\n  'microsoft.resources/subscriptions': 'Subscriptions',\n  'microsoft.resources/subscriptions/resourcegroups': 'Resource groups',\n  'citrix.services/xenappessentials': 'Citrix Virtual Apps Essentials',\n  'citrix.services/xendesktopessentials': 'Citrix Virtual Desktops Essentials',\n  'dynatrace.observability/monitors': 'Dynatrace',\n  'github.enterprise/accounts': 'GitHub AE',\n  'microsoft.aad/domainservices': 'Azure AD Domain Services',\n  'microsoft.aadiam/privatelinkforazuread': 'Private Link for Azure AD',\n  'microsoft.agfoodplatform/farmbeats': 'Azure FarmBeats',\n  'microsoft.analysisservices/servers': 'Analysis Services',\n  'microsoft.anybuild/clusters': 'AnyBuild clusters',\n  'microsoft.apimanagement/service': 'API Management services',\n  'microsoft.appconfiguration/configurationstores': 'App Configuration',\n  'microsoft.appplatform/spring': 'Azure Spring Cloud',\n  'microsoft.attestation/attestationproviders': 'Attestation providers',\n  'microsoft.authorization/resourcemanagementprivatelinks': 'Resource management private links',\n  'microsoft.automation/automationaccounts': 'Automation Accounts',\n  'microsoft.automation/automationaccounts/runbooks': 'Runbook',\n  'microsoft.autonomoussystems/workspaces': 'Bonsai',\n  'microsoft.avs/privateclouds': 'AVS Private clouds',\n  'microsoft.azureactivedirectory/b2cdirectories': 'B2C Tenants',\n  'microsoft.azureactivedirectory/guestusages': 'Guest Usages',\n  'microsoft.azurearcdata/datacontrollers': 'Azure Arc data controllers',\n  'microsoft.azurearcdata/postgresinstances': 'Azure Arc-enabled PostgreSQL Hyperscale server groups',\n  'microsoft.azurearcdata/sqlmanagedinstances': 'SQL managed instances - Azure Arc',\n  'microsoft.azurearcdata/sqlserverinstances': 'SQL Server - Azure Arc',\n  'microsoft.azuredata/sqlserverregistrations': 'SQL Server registries',\n  'microsoft.azurepercept/accounts': 'Azure Percept accounts',\n  'microsoft.azurestackhci/clusters': 'Azure Stack HCI',\n  'microsoft.azurestackhci/virtualmachines': 'Azure Stack HCI virtual machine - Azure Arc',\n  'microsoft.baremetal/crayservers': 'Cray Servers',\n  'microsoft.baremetal/monitoringservers': 'Monitoring Servers',\n  'microsoft.baremetalinfrastructure/baremetalinstances': 'BareMetal Instances',\n  'microsoft.batch/batchaccounts': 'Batch accounts',\n  'microsoft.bing/accounts': 'Bing Resources',\n  'microsoft.botservice/botservices': 'Bot Services',\n  'microsoft.cache/redis': 'Azure Cache for Redis',\n  'microsoft.cache/redisenterprise': 'Redis Enterprise',\n  'microsoft.cdn/cdnwebapplicationfirewallpolicies': 'Content Delivery Network WAF policies',\n  'microsoft.cdn/profiles (front doors standard/premium': 'Preview)',\n  'microsoft.cdn/profiles/afdendpoints': 'Endpoints',\n  'microsoft.cdn/profiles/endpoints': 'Endpoints',\n  'microsoft.certificateregistration/certificateorders': 'App Service Certificates',\n  'microsoft.chaos/chaosexperiments': 'Chaos Experiments (Classic)',\n  'microsoft.chaos/experiments': 'Chaos Experiments',\n  'microsoft.classiccompute/domainnames': 'Cloud services (classic)',\n  'microsoft.classiccompute/virtualmachines': 'Virtual machines (classic)',\n  'microsoft.classicnetwork/networksecuritygroups': 'Network security groups (classic)',\n  'microsoft.classicnetwork/reservedips': 'Reserved IP addresses (classic)',\n  'microsoft.classicnetwork/virtualnetworks': 'Virtual networks (classic)',\n  'microsoft.classicstorage/storageaccounts': 'Storage accounts (classic)',\n  'microsoft.cloudtest/accounts': 'CloudTest Accounts',\n  'microsoft.cloudtest/hostedpools': '1ES Hosted Pools',\n  'microsoft.cloudtest/images': 'CloudTest Images',\n  'microsoft.cloudtest/pools': 'CloudTest Pools',\n  'microsoft.clusterstor/nodes': 'ClusterStors',\n  'microsoft.cognitiveservices/accounts': 'Cognitive Services',\n  'microsoft.compute/availabilitysets': 'Availability sets',\n  'microsoft.compute/capacityreservationgroups': 'Capacity Reservation Groups',\n  'microsoft.compute/cloudservices': 'Cloud services (extended support)',\n  'microsoft.compute/diskaccesses': 'Disk Accesses',\n  'microsoft.compute/diskencryptionsets': 'Disk Encryption Sets',\n  'microsoft.compute/disks': 'Disks',\n  'microsoft.compute/galleries': 'Azure compute galleries',\n  'microsoft.compute/galleries/applications': 'VM application definitions',\n  'microsoft.compute/galleries/applications/versions': 'VM application versions',\n  'microsoft.compute/galleries/images': 'VM image definitions',\n  'microsoft.compute/galleries/images/versions': 'VM image versions',\n  'microsoft.compute/hostgroups': 'Host groups',\n  'microsoft.compute/hostgroups/hosts': 'Hosts',\n  'microsoft.compute/images': 'Images',\n  'microsoft.compute/proximityplacementgroups': 'Proximity placement groups',\n  'microsoft.compute/restorepointcollections': 'Restore Point Collections',\n  'microsoft.compute/snapshots': 'Snapshots',\n  'microsoft.compute/sshpublickeys': 'SSH keys',\n  'microsoft.compute/virtualmachines': 'Virtual machines',\n  'microsoft.compute/virtualmachinescalesets': 'Virtual machine scale sets',\n  'microsoft.confidentialledger/ledgers': 'Confidential Ledgers',\n  'microsoft.confluent/organizations': 'Confluent organizations',\n  'microsoft.connectedcache/cachenodes': 'Connected Cache Resources',\n  'microsoft.connectedcache/enterprisecustomers': 'Connected Cache Resources',\n  'microsoft.connectedvehicle/platformaccounts': 'Connected Vehicle Platforms',\n  'microsoft.connectedvmwarevsphere/vcenters': 'VMware vCenters',\n  'microsoft.connectedvmwarevsphere/virtualmachines': 'VMware + AVS virtual machines',\n  'microsoft.containerinstance/containergroups': 'Container instances',\n  'microsoft.containerregistry/registries': 'Container registries',\n  'microsoft.containerregistry/registries/replications': 'Container registry replications',\n  'microsoft.containerregistry/registries/webhooks': 'Container registry webhooks',\n  'microsoft.containerservice/managedclusters': 'Kubernetes services',\n  'microsoft.dashboard/grafana': 'Grafana Workspaces',\n  'microsoft.databox/jobs': 'Azure Data Box',\n  'microsoft.databoxedge/databoxedgedevices': 'Azure Stack Edge / Data Box Gateway',\n  'microsoft.databricks/workspaces': 'Azure Databricks Services',\n  'microsoft.datacatalog/catalogs': 'Data Catalog',\n  'microsoft.datacollaboration/workspaces': 'Project CI',\n  'microsoft.datadog/monitors': 'Datadog',\n  'microsoft.datafactory/datafactories': 'Data factories',\n  'microsoft.datafactory/factories': 'Data factories (V2)',\n  'microsoft.datalakeanalytics/accounts': 'Data Lake Analytics',\n  'microsoft.datalakestore/accounts': 'Data Lake Storage Gen1',\n  'microsoft.datamigration/services': 'Azure Database Migration Services',\n  'microsoft.datamigration/services/projects': 'Azure Database Migration Projects',\n  'microsoft.datamigration/sqlmigrationservices': 'Azure Database Migration Services',\n  'microsoft.dataprotection/backupvaults': 'Backup vaults',\n  'microsoft.dataprotection/resourceguards': 'Resource Guards (Preview)',\n  'microsoft.datareplication/replicationvaults': 'Site Recovery Vaults',\n  'microsoft.datashare/accounts': 'Data Shares',\n  'microsoft.dbformariadb/servers': 'Azure Database for MariaDB servers',\n  'microsoft.dbformysql/flexibleservers': 'Azure Database for MySQL flexible servers',\n  'microsoft.dbformysql/servers': 'Azure Database for MySQL servers',\n  'microsoft.dbforpostgresql/flexibleservers': 'Azure Database for PostgreSQL flexible servers',\n  'microsoft.dbforpostgresql/servergroups': 'Azure Database for PostgreSQL server groups',\n  'microsoft.dbforpostgresql/servergroupsv2': 'Azure Database for PostgreSQL server groups',\n  'microsoft.dbforpostgresql/servers': 'Azure Database for PostgreSQL servers',\n  'microsoft.dbforpostgresql/serversv2': 'Azure Database for PostgreSQL servers v2',\n  'microsoft.deploymentmanager/rollouts': 'Rollouts',\n  'microsoft.desktopvirtualization/applicationgroups': 'Application groups',\n  'microsoft.desktopvirtualization/hostpools': 'Host pools',\n  'microsoft.desktopvirtualization/scalingplans': 'Scaling plans',\n  'microsoft.desktopvirtualization/workspaces': 'Workspaces',\n  'microsoft.devices/iothubs': 'IoT Hub',\n  'microsoft.devices/provisioningservices': 'Device Provisioning Services',\n  'microsoft.deviceupdate/accounts': 'Device Update for IoT Hubs',\n  'microsoft.devops/pipelines': 'DevOps Starter',\n  'microsoft.devtestlab/labs': 'DevTest Labs',\n  'microsoft.devtestlab/labs/virtualmachines': 'Virtual machines',\n  'microsoft.digitaltwins/digitaltwinsinstances': 'Azure Digital Twins',\n  'microsoft.documentdb/cassandraclusters': 'Azure Managed Instance for Apache Cassandra',\n  'microsoft.documentdb/databaseaccounts': 'Azure Cosmos DB accounts',\n  'microsoft.domainregistration/domains': 'App Service Domains',\n  'microsoft.edgeorder/addresses': 'Azure Edge Hardware Center Address',\n  'microsoft.edgeorder/orderitems': 'Azure Edge Hardware Center',\n  'microsoft.elastic/monitors': 'Elasticsearch (Elastic Cloud)',\n  'microsoft.eventgrid/domains': 'Event Grid Domains',\n  'microsoft.eventgrid/partnernamespaces': 'Event Grid Partner Namespaces',\n  'microsoft.eventgrid/partnerregistrations': 'Event Grid Partner Registrations',\n  'microsoft.eventgrid/partnertopics': 'Event Grid Partner Topics',\n  'microsoft.eventgrid/systemtopics': 'Event Grid System Topics',\n  'microsoft.eventgrid/topics': 'Event Grid Topics',\n  'microsoft.eventhub/clusters': 'Event Hubs Clusters',\n  'microsoft.eventhub/namespaces': 'Event Hubs Namespaces',\n  'microsoft.experimentation/experimentworkspaces': 'Experiment Workspaces',\n  'microsoft.extendedlocation/customlocations': 'Custom locations',\n  'microsoft.fidalgo/devcenters': 'Fidalgo DevCenters',\n  'microsoft.fidalgo/networksettings': 'Network Configurations',\n  'microsoft.fidalgo/projects': 'Fidalgo Projects',\n  'microsoft.fidalgo/projects/environments': 'Fidalgo Environments',\n  'microsoft.fluidrelay/fluidrelayservers': 'Fluid Relay',\n  'microsoft.genomics/accounts': 'Genomics accounts',\n  'microsoft.hanaonazure/hanainstances': 'SAP HANA on Azure',\n  'microsoft.hanaonazure/sapmonitors': 'Azure Monitors for SAP Solutions',\n  'microsoft.hdinsight/clusterpools': 'HDInsight cluster pools',\n  'microsoft.hdinsight/clusterpools/clusters': 'HDInsight gen2 clusters',\n  'microsoft.hdinsight/clusterpools/clusters/sessionclusters': 'HDInsight session clusters',\n  'microsoft.hdinsight/clusters': 'HDInsight clusters',\n  'microsoft.healthbot/healthbots': 'Azure Health Bot',\n  'microsoft.healthcareapis/services': 'Azure API for FHIR',\n  'microsoft.healthcareapis/workspaces': 'Healthcare APIs Workspaces',\n  'microsoft.healthcareapis/workspaces/dicomservices': 'DICOM services',\n  'microsoft.healthcareapis/workspaces/fhirservices': 'FHIR services',\n  'microsoft.healthcareapis/workspaces/iotconnectors': 'IoT connectors',\n  'microsoft.hpcworkbench/instances': 'HPC Workbenches (preview)',\n  'microsoft.hpcworkbench/instances/chambers': 'Chambers (preview)',\n  'microsoft.hpcworkbench/instances/chambers/accessprofiles': 'Chamber Profiles (preview)',\n  'microsoft.hpcworkbench/instances/chambers/workloads': 'Chamber VMs (preview)',\n  'microsoft.hpcworkbench/instances/consortiums': 'Consortiums (preview)',\n  'microsoft.hybridcompute/machines': 'Servers - Azure Arc',\n  'microsoft.hybridcompute/privatelinkscopes': 'Azure Arc Private Link Scopes',\n  'microsoft.hybridcontainerservice/provisionedclusters': 'Provisioned clusters',\n  'microsoft.hybriddata/datamanagers': 'StorSimple Data Managers',\n  'microsoft.hybridnetwork/devices': 'Azure Network Function Manager – Devices',\n  'microsoft.hybridnetwork/networkfunctions': 'Azure Network Function Manager – Network Functions',\n  'microsoft.importexport/jobs': 'Import/export jobs',\n  'microsoft.insights/components': 'Application Insights',\n  'microsoft.insights/datacollectionendpoints': 'Data collection endpoints',\n  'microsoft.insights/datacollectionrules': 'Data collection rules',\n  'microsoft.insights/privatelinkscopes': 'Azure Monitor Private Link Scopes',\n  'microsoft.insights/webtests': 'Availability tests',\n  'microsoft.insights/workbooks': 'Azure Workbooks',\n  'microsoft.insights/workbooktemplates': 'Azure Workbook Templates',\n  'microsoft.iotcentral/iotapps': 'IoT Central Applications',\n  'microsoft.keyvault/vaults': 'Key vaults',\n  'microsoft.kubernetes/connectedclusters': 'Kubernetes - Azure Arc',\n  'microsoft.kusto/clusters': 'Azure Data Explorer Clusters',\n  'microsoft.kusto/clusters/databases': 'Azure Data Explorer Databases',\n  'microsoft.labservices/labaccounts': 'Lab accounts',\n  'microsoft.labservices/labplans': 'Lab plans',\n  'microsoft.labservices/labs': 'Labs',\n  'microsoft.loadtestservice/loadtests': 'Azure Load Testing',\n  'microsoft.logic/integrationaccounts': 'Integration accounts',\n  'microsoft.logic/integrationserviceenvironments': 'Integration Service Environments',\n  'microsoft.logic/integrationserviceenvironments/managedapis': 'Managed Connector',\n  'microsoft.logic/workflows': 'Logic apps',\n  'microsoft.logz/monitors': 'Logz main account',\n  'microsoft.logz/monitors/accounts': 'Logz sub account',\n  'microsoft.logz/monitors/metricssource': 'Logz metrics data source',\n  'microsoft.machinelearning/commitmentplans': 'Machine Learning Studio (classic) web service plans',\n  'microsoft.machinelearning/webservices': 'Machine Learning Studio (classic) web services',\n  'microsoft.machinelearning/workspaces': 'Machine Learning Studio (classic) workspaces',\n  'microsoft.machinelearningservices/workspaces': 'Machine learning',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints': 'Machine learning online endpoints',\n  'microsoft.machinelearningservices/workspaces/onlineendpoints/deployments': 'Machine learning online deployments',\n  'microsoft.maintenance/maintenanceconfigurations': 'Maintenance Configurations',\n  'microsoft.managedidentity/userassignedidentities': 'Managed Identities',\n  'microsoft.maps/accounts': 'Azure Maps Accounts',\n  'microsoft.maps/accounts/creators': 'Azure Maps Creator Resources',\n  'microsoft.media/mediaservices': 'Media Services',\n  'microsoft.media/mediaservices/liveevents': 'Live events',\n  'microsoft.media/mediaservices/streamingendpoints': 'Streaming Endpoints',\n  'microsoft.media/videoanalyzers': 'Video Analyzers',\n  'microsoft.migrate/projects': 'Migration projects',\n  'microsoft.mixedreality/objectanchorsaccounts': 'Object Anchors Accounts',\n  'microsoft.mixedreality/objectunderstandingaccounts': 'Object Understanding Accounts',\n  'microsoft.mixedreality/remoterenderingaccounts': 'Remote Rendering Accounts',\n  'microsoft.mixedreality/spatialanchorsaccounts': 'Spatial Anchors Accounts',\n  'microsoft.mobilenetwork/mobilenetworks': 'Mobile Networks',\n  'microsoft.mobilenetwork/mobilenetworks/datanetworks': 'Data Networks',\n  'microsoft.mobilenetwork/mobilenetworks/services': 'Services',\n  'microsoft.mobilenetwork/mobilenetworks/simpolicies': 'Sim Policies',\n  'microsoft.mobilenetwork/mobilenetworks/sites': 'Mobile Network Sites',\n  'microsoft.mobilenetwork/mobilenetworks/slices': 'Slices',\n  'microsoft.mobilenetwork/packetcorecontrolplanes': 'Packet Core Control Planes',\n  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes': 'Packet Core Data Planes',\n  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks': 'Attached Data Networks',\n  'microsoft.mobilenetwork/sims': 'Sims',\n  'microsoft.netapp/netappaccounts': 'NetApp accounts',\n  'microsoft.netapp/netappaccounts/capacitypools': 'Capacity pools',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes': 'Volumes',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes/snapshots': 'Snapshots',\n  'microsoft.netapp/netappaccounts/snapshotpolicies': 'Snapshot policies',\n  'microsoft.network/applicationgateways': 'Application gateways',\n  'microsoft.network/applicationgatewaywebapplicationfirewallpolicies': 'Application Gateway WAF policies',\n  'microsoft.network/applicationsecuritygroups': 'Application security groups',\n  'microsoft.network/azurefirewalls': 'Firewalls',\n  'microsoft.network/bastionhosts': 'Bastions',\n  'microsoft.network/connections': 'Connections',\n  'microsoft.network/customipprefixes': 'Custom IP Prefixes',\n  'microsoft.network/ddosprotectionplans': 'DDoS protection plans',\n  'microsoft.network/dnsforwardingrulesets': 'Dns Forwarding Rulesets',\n  'microsoft.network/dnsresolvers': 'DNS Private Resolvers',\n  'microsoft.network/dnszones': 'DNS zones',\n  'microsoft.network/expressroutecircuits': 'ExpressRoute circuits',\n  'microsoft.network/expressrouteports': 'ExpressRoute Direct',\n  'microsoft.network/firewallpolicies': 'Firewall Policies',\n  'microsoft.network/frontdoors': 'Front Doors',\n  'microsoft.network/frontdoorwebapplicationfirewallpolicies': 'Web Application Firewall policies (WAF)',\n  'microsoft.network/ipgroups': 'IP Groups',\n  'microsoft.network/loadbalancers': 'Load balancers',\n  'microsoft.network/localnetworkgateways': 'Local network gateways',\n  'microsoft.network/natgateways': 'NAT gateways',\n  'microsoft.network/networkexperimentprofiles': 'Internet Analyzer profiles',\n  'microsoft.network/networkinterfaces': 'Network interfaces',\n  'microsoft.network/networkmanagers': 'Network Managers',\n  'microsoft.network/networksecuritygroups': 'Network security groups',\n  'microsoft.network/networkwatchers': 'Network Watchers',\n  'microsoft.network/networkwatchers/connectionmonitors': 'Connection Monitors',\n  'microsoft.network/networkwatchers/flowlogs': 'NSG Flow Logs',\n  'microsoft.network/privatednszones': 'Private DNS zones',\n  'microsoft.network/privateendpoints': 'Private endpoints',\n  'microsoft.network/privatelinkservices': 'Private link services',\n  'microsoft.network/publicipaddresses': 'Public IP addresses',\n  'microsoft.network/publicipprefixes': 'Public IP Prefixes',\n  'microsoft.network/routefilters': 'Route filters',\n  'microsoft.network/routetables': 'Route tables',\n  'microsoft.network/serviceendpointpolicies': 'Service endpoint policies',\n  'microsoft.network/trafficmanagerprofiles': 'Traffic Manager profiles',\n  'microsoft.network/virtualnetworkgateways': 'Virtual network gateways',\n  'microsoft.network/virtualnetworks': 'Virtual networks',\n  'microsoft.network/virtualwans': 'Virtual WANs',\n  'microsoft.notificationhubs/namespaces': 'Notification Hub Namespaces',\n  'microsoft.notificationhubs/namespaces/notificationhubs': 'Notification Hubs',\n  'microsoft.openenergyplatform/energyservices': 'Project Oak Forest',\n  'microsoft.openlogisticsplatform/workspaces': 'Open Supply Chain Platform',\n  'microsoft.operationalinsights/querypacks': 'Log Analytics query packs',\n  'microsoft.operationalinsights/workspaces': 'Log Analytics workspaces',\n  'microsoft.operationsmanagement/solutions': 'Solutions',\n  'microsoft.orbital/contactprofiles': 'Contact Profiles',\n  'microsoft.orbital/edgesites': 'Edge Sites',\n  'microsoft.orbital/groundstations': 'Ground Stations',\n  'microsoft.orbital/l2connections': 'L2 Connections',\n  'microsoft.orbital/spacecrafts': 'Spacecrafts',\n  'microsoft.peering/peerings': 'Peerings',\n  'microsoft.peering/peeringservices': 'Peering Services',\n  'microsoft.playfab/playeraccountpools': 'PlayFab player account pools',\n  'microsoft.playfab/titles': 'PlayFab titles',\n  'microsoft.portal/dashboards': 'Shared dashboards',\n  'microsoft.powerbidedicated/capacities': 'Power BI Embedded',\n  'microsoft.purview/accounts': 'Microsoft Purview accounts',\n  'microsoft.quantum/workspaces': 'Quantum Workspaces',\n  'microsoft.recommendationsservice/accounts': 'Intelligent Recommendations Accounts',\n  'microsoft.recommendationsservice/accounts/modeling': 'Modeling',\n  'microsoft.recommendationsservice/accounts/serviceendpoints': 'Service Endpoints',\n  'microsoft.recoveryservices/vaults': 'Recovery Services vaults',\n  'microsoft.redhatopenshift/openshiftclusters': 'Azure Red Hat OpenShift',\n  'microsoft.relay/namespaces': 'Relays',\n  'microsoft.resourceconnector/appliances': 'Resource bridges',\n  'microsoft.resourcegraph/queries': 'Resource Graph queries',\n  'microsoft.resources/deploymentscripts': 'Deployment Scripts',\n  'microsoft.resources/templatespecs': 'Template specs',\n  'microsoft.saas/applications': 'Software as a Service (classic)',\n  'microsoft.saas/resources': 'SaaS',\n  'microsoft.scom/managedinstances': 'Aquila Instances',\n  'microsoft.scvmm/virtualmachines': 'SCVMM virtual machine - Azure Arc',\n  'microsoft.scvmm/vmmservers': 'SCVMM management servers',\n  'microsoft.search/searchservices': 'Search services',\n  'microsoft.securitydetonation/chambers': 'Security Detonation Chambers',\n  'microsoft.servicebus/namespaces': 'Service Bus Namespaces',\n  'microsoft.servicefabric/clusters': 'Service Fabric clusters',\n  'microsoft.servicefabric/managedclusters': 'Service Fabric managed clusters',\n  'microsoft.serviceshub/connectors': 'Services Hub Connectors',\n  'microsoft.signalrservice/signalr': 'SignalR',\n  'microsoft.signalrservice/webpubsub': 'Web PubSub Service',\n  'microsoft.solutions/applicationdefinitions': 'Service catalog managed application definitions',\n  'microsoft.solutions/applications': 'Managed applications',\n  'microsoft.sql/instancepools': 'Instance pools',\n  'microsoft.sql/managedinstances': 'SQL managed instances',\n  'microsoft.sql/managedinstances/databases': 'Managed databases',\n  'microsoft.sql/servers': 'SQL servers',\n  'microsoft.sql/servers/databases': 'SQL databases',\n  'microsoft.sql/servers/elasticpools': 'SQL elastic pools',\n  'microsoft.sql/servers/jobagents': 'Elastic Job agents',\n  'microsoft.sql/virtualclusters': 'Virtual clusters',\n  'microsoft.sqlvirtualmachine/sqlvirtualmachines': 'SQL virtual machines',\n  'microsoft.storage/storageaccounts': 'Storage accounts',\n  'microsoft.storagecache/amlfilesystems': 'Lustre File Systems',\n  'microsoft.storagecache/caches': 'HPC caches',\n  'microsoft.storagepool/diskpools': 'Disk Pools',\n  'microsoft.storagesync/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storagesyncdev/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storagesyncint/storagesyncservices': 'Storage Sync Services',\n  'microsoft.storsimple/managers': 'StorSimple Device Managers',\n  'microsoft.streamanalytics/clusters': 'Stream Analytics clusters',\n  'microsoft.streamanalytics/streamingjobs': 'Stream Analytics jobs',\n  'microsoft.synapse/privatelinkhubs': 'Azure Synapse Analytics (private link hubs)',\n  'microsoft.synapse/workspaces': 'Azure Synapse Analytics',\n  'microsoft.synapse/workspaces/bigdatapools': 'Apache Spark pools',\n  'microsoft.synapse/workspaces/kustopools': 'Data Explorer pools (preview)',\n  'microsoft.synapse/workspaces/sqlpools': 'Dedicated SQL pools',\n  'microsoft.testbase/testbaseaccounts': 'Test Base Accounts',\n  'microsoft.testbase/testbaseaccounts/packages': 'Test Base Packages',\n  'microsoft.timeseriesinsights/environments': 'Time Series Insights environments',\n  'microsoft.timeseriesinsights/environments/eventsources': 'Time Series Insights event sources',\n  'microsoft.timeseriesinsights/environments/referencedatasets': 'Time Series Insights reference data sets',\n  'microsoft.videoindexer/accounts': 'Video Analyzer for Media',\n  'microsoft.virtualmachineimages/imagetemplates': 'Image Templates',\n  'microsoft.visualstudio/account': 'Azure DevOps organizations',\n  'microsoft.visualstudio/account/project': 'DevOps Starter',\n  'microsoft.vmwarecloudsimple/dedicatedcloudnodes': 'CloudSimple Nodes',\n  'microsoft.vmwarecloudsimple/dedicatedcloudservices': 'CloudSimple Services',\n  'microsoft.vmwarecloudsimple/virtualmachines': 'CloudSimple Virtual Machines',\n  'microsoft.vsonline/plans': 'Visual Studio Online Plans',\n  'microsoft.web/connectiongateways': 'On-premises data gateways',\n  'microsoft.web/connections': 'API Connections',\n  'microsoft.web/containerapps': 'Container Apps',\n  'microsoft.web/customapis': 'Logic Apps Custom Connector',\n  'microsoft.web/hostingenvironments': 'App Service Environments',\n  'microsoft.web/kubeenvironments': 'App Service Kubernetes Environments',\n  'microsoft.web/serverfarms': 'App Service plans',\n  'microsoft.web/sites': 'App Services',\n  'microsoft.web/sites/slots': 'App Service (Slots)',\n  'microsoft.web/staticsites': 'Static Web Apps',\n  'microsoft.windowsesu/multipleactivationkeys': 'Windows Multiple Activation Keys',\n  'microsoft.windowsiot/deviceservices': 'Windows 10 IoT Core Services',\n  'microsoft.workloads/monitors': 'Azure Monitors for SAP Solutions (v2)',\n  'microsoft.workloads/phpworkloads': 'Scalable WordPress on Linux',\n  'microsoft.workloads/sapvirtualinstances': 'SAP Virtual Instances',\n  'microsoft.workloads/sapvirtualinstances/applicationinstances': 'SAP app server instances',\n  'microsoft.workloads/sapvirtualinstances/centralinstances': 'SAP central server instances',\n  'microsoft.workloads/sapvirtualinstances/databaseinstances': 'SAP database server instances',\n  'nginx.nginxplus/nginxdeployments': 'NGINX Deployment',\n  'providers.test/statefulibizaengines': 'VLCentral Help',\n  'wandisco.fusion/fusiongroups': 'LiveData Planes',\n  'wandisco.fusion/fusiongroups/azurezones': 'Azure Zones',\n  'wandisco.fusion/fusiongroups/azurezones/plugins': 'Plugins',\n  'wandisco.fusion/fusiongroups/hivereplicationrules': 'Hive Replication Rules',\n  'wandisco.fusion/fusiongroups/managedonpremzones': 'On-premises Zones',\n  'wandisco.fusion/fusiongroups/replicationrules': 'Replication Rules',\n  'wandisco.fusion/migrators': 'LiveData Migrators',\n  'wandisco.fusion/migrators/exclusiontemplates': 'Exclusions',\n  'wandisco.fusion/migrators/livedatamigrations': 'Migrations',\n  'wandisco.fusion/migrators/metadatamigrations': 'Metadata Migrations',\n  'wandisco.fusion/migrators/metadatatargets': 'Metadata Targets',\n  'wandisco.fusion/migrators/pathmappings': 'Path Mappings',\n  'wandisco.fusion/migrators/targets': 'Targets',\n  'microsoft.security/insights/classification': 'Data Sensitivity Security Insights (Preview)',\n  'microsoft.security/locations/alerts': 'Security Alerts',\n};\n\n// This list has been manually written using the Azure Portal as the source.\n// Visit https://portal.azure.com/#view/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/~/metrics\n// and go to Select a scope > Resource types > Multi-resource compatible (preview)\nexport const multiResourceCompatibleTypes: { [ns: string]: boolean } = {\n  'microsoft.cache/redis': true, // 'Azure Cache for Redis'\n  'microsoft.dbforpostgresql/flexibleservers': true, // 'Azure Database for PostgreSQL flexible servers'\n  'microsoft.storagecache/amlfilesystems': true, // 'Lustre File Systems'\n  'microsoft.databoxedge/databoxedgedevices': true, // 'Azure Stack Edge / Data Box Gateway'\n  'microsoft.dataprotection/backupvaults': true, // 'Backup vaults'\n  'microsoft.netapp/netappaccounts/capacitypools': true, // 'Capacity pools'\n  'microsoft.network/networkwatchers/connectionmonitors': true, // 'Connection Monitors'\n  'microsoft.keyvault/vaults': true, // 'Key vaults'\n  'microsoft.recoveryservices/vaults': true, // 'Recovery Services vaults'\n  'microsoft.sql/servers/databases': true, // 'SQL databases'\n  'microsoft.sql/servers/elasticpools': true, // 'SQL elastic pools'\n  'microsoft.compute/virtualmachinescalesets': true, // 'Virtual machine scale sets'\n  'microsoft.compute/virtualmachines': true, // 'Virtual machines'\n  'microsoft.signalrservice/webpubsub': true, // 'Web PubSub Service'\n};\n","/**\nThis list is obtained parsing https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-categories\nTo programatically get the list, execute in the browser console:\n \n const i = [];\n document.querySelectorAll('*[id]').forEach((el) => { \n  if(el.textContent.match(/^(microsoft|Microsoft|Wandisco)/)) {\n    i.push(el.textContent.toLowerCase())\n  }});\n  i;\n \nNote: Validate that the output makes sense, the format of the page may change.\n \nThat list is not complete so we should merge it with the one below. You can do with a node console:\n \n  const u = require('lodash')\n  const new = [list from above]\n  const logsResourceTypes = [this list]\n  console.dir(u.uniq(logsResourceTypes.concat(new)).sort(), {'maxArrayLength': null})\n \n */\n\nexport const logsResourceTypes = [\n  'microsoft.aad/domainservices',\n  'microsoft.aadiam/azureadmetrics',\n  'microsoft.aadiam/tenants',\n  'microsoft.agfoodplatform/farmbeats',\n  'microsoft.analysisservices/servers',\n  'microsoft.apimanagement/service',\n  'microsoft.appconfiguration/configurationstores',\n  'microsoft.appplatform/spring',\n  'microsoft.attestation/attestationproviders',\n  'microsoft.automation/automationaccounts',\n  'microsoft.autonomousdevelopmentplatform/accounts',\n  'microsoft.autonomousdevelopmentplatform/datapools',\n  'microsoft.autonomousdevelopmentplatform/workspaces',\n  'microsoft.avs/privateclouds',\n  'microsoft.azurestackresourcemonitor/storageaccountmonitor',\n  'microsoft.batch/batchaccounts',\n  'microsoft.batchai/workspaces',\n  'microsoft.blockchain/blockchainmembers',\n  'microsoft.blockchain/cordamembers',\n  'microsoft.botservice/botservices',\n  'microsoft.cache/redis',\n  'microsoft.cache/redisenterprise',\n  'microsoft.cdn/cdnwebapplicationfirewallpolicies',\n  'microsoft.cdn/profiles',\n  'microsoft.cdn/profiles/endpoints',\n  'microsoft.classiccompute/domainnames',\n  'microsoft.classiccompute/virtualmachines',\n  'microsoft.classicnetwork/networksecuritygroups',\n  'microsoft.classicstorage/storageaccounts',\n  'microsoft.cognitiveservices/accounts',\n  'microsoft.communication/communicationservices',\n  'microsoft.compute/disks',\n  'microsoft.compute/virtualmachines',\n  'microsoft.compute/virtualmachinescalesets',\n  'microsoft.connectedcache/cachenodes',\n  'microsoft.connectedvehicle/platformaccounts',\n  'microsoft.containerinstance/containergroups',\n  'microsoft.containerregistry/registries',\n  'microsoft.containerservice/managedclusters',\n  'microsoft.customerinsights/hubs',\n  'microsoft.customproviders/resourceproviders',\n  'microsoft.d365customerinsights/instances',\n  'microsoft.dashboard/grafana',\n  'microsoft.databoxedge/databoxedgedevices',\n  'microsoft.databricks/workspaces',\n  'microsoft.datacollaboration/workspaces',\n  'microsoft.datafactory/datafactories',\n  'microsoft.datafactory/factories',\n  'microsoft.datalakeanalytics/accounts',\n  'microsoft.datalakestore/accounts',\n  'microsoft.datashare/accounts',\n  'microsoft.dbformariadb/servers',\n  'microsoft.dbformysql/flexibleservers',\n  'microsoft.dbformysql/servers',\n  'microsoft.dbforpostgresql/flexibleservers',\n  'microsoft.dbforpostgresql/servergroupsv2',\n  'microsoft.dbforpostgresql/servers',\n  'microsoft.dbforpostgresql/serversv2',\n  'microsoft.desktopvirtualization/applicationgroups',\n  'microsoft.desktopvirtualization/hostpools',\n  'microsoft.desktopvirtualization/scalingplans',\n  'microsoft.desktopvirtualization/workspaces',\n  'microsoft.devices/elasticpools/iothubtenants',\n  'microsoft.devices/iothubs',\n  'microsoft.devices/provisioningservices',\n  'microsoft.digitaltwins/digitaltwinsinstances',\n  'microsoft.documentdb/cassandraclusters',\n  'microsoft.documentdb/databaseaccounts',\n  'microsoft.eventgrid/domains',\n  'microsoft.eventgrid/partnernamespaces',\n  'microsoft.eventgrid/partnertopics',\n  'microsoft.eventgrid/systemtopics',\n  'microsoft.eventgrid/topics',\n  'microsoft.eventhub/clusters',\n  'microsoft.eventhub/namespaces',\n  'microsoft.experimentation/experimentworkspaces',\n  'microsoft.fabric.admin/fabriclocations',\n  'microsoft.hdinsight/clusters',\n  'microsoft.healthcareapis/services',\n  'microsoft.healthcareapis/workspaces/dicomservices',\n  'microsoft.healthcareapis/workspaces/fhirservices',\n  'microsoft.insights/autoscalesettings',\n  'microsoft.insights/components',\n  'microsoft.insights/qos',\n  'microsoft.iotcentral/iotapps',\n  'microsoft.keyvault/managedhsms',\n  'microsoft.keyvault/vaults',\n  'microsoft.kubernetes/connectedclusters',\n  'microsoft.kusto/clusters',\n  'microsoft.loadtestservice/loadtests',\n  'microsoft.logic/integrationaccounts',\n  'microsoft.logic/integrationserviceenvironments',\n  'microsoft.logic/workflows',\n  'microsoft.machinelearningservices/workspaces',\n  'microsoft.media/mediaservices',\n  'microsoft.media/mediaservices/liveevents',\n  'microsoft.media/mediaservices/streamingendpoints',\n  'microsoft.media/videoanalyzers',\n  'microsoft.netapp/netappaccounts/capacitypools',\n  'microsoft.netapp/netappaccounts/capacitypools/volumes',\n  'microsoft.network/applicationgateways',\n  'microsoft.network/azurefirewalls',\n  'microsoft.network/bastionhosts',\n  'microsoft.network/connections',\n  'microsoft.network/dnszones',\n  'microsoft.network/expressroutecircuits',\n  'microsoft.network/expressroutegateways',\n  'microsoft.network/expressrouteports',\n  'microsoft.network/frontdoors',\n  'microsoft.network/loadbalancers',\n  'microsoft.network/natgateways',\n  'microsoft.network/networkinterfaces',\n  'microsoft.network/networksecuritygroups',\n  'microsoft.network/networksecurityperimeters',\n  'microsoft.network/networkvirtualappliances',\n  'microsoft.network/networkwatchers',\n  'microsoft.network/networkwatchers/connectionmonitors',\n  'microsoft.network/p2svpngateways',\n  'microsoft.network/privateendpoints',\n  'microsoft.network/privatelinkservices',\n  'microsoft.network/publicipaddresses',\n  'microsoft.network/trafficmanagerprofiles',\n  'microsoft.network/virtualnetworkgateways',\n  'microsoft.network/virtualnetworks',\n  'microsoft.network/vpngateways',\n  'microsoft.networkfunction/azuretrafficcollectors',\n  'microsoft.notificationhubs/namespaces',\n  'microsoft.notificationhubs/namespaces/notificationhubs',\n  'microsoft.openlogisticsplatform/workspaces',\n  'microsoft.operationalinsights/workspaces',\n  'microsoft.operationsmanagement/solutions',\n  'microsoft.peering/peeringservices',\n  'microsoft.powerbi/tenants',\n  'microsoft.powerbi/tenants/workspaces',\n  'microsoft.powerbidedicated/capacities',\n  'microsoft.purview/accounts',\n  'microsoft.recoveryservices/vaults',\n  'microsoft.relay/namespaces',\n  'microsoft.resources/subscriptions',\n  'microsoft.resources/subscriptions/resourcegroups',\n  'microsoft.search/searchservices',\n  'microsoft.security/antimalwaresettings',\n  'microsoft.securityinsights/settings',\n  'microsoft.servicebus/namespaces',\n  'microsoft.signalrservice/signalr',\n  'microsoft.signalrservice/webpubsub',\n  'microsoft.singularity/accounts',\n  'microsoft.sql/managedinstances',\n  'microsoft.sql/managedinstances/databases',\n  'microsoft.sql/servers/databases',\n  'microsoft.sql/servers/elasticpools',\n  'microsoft.storage/storageaccounts',\n  'microsoft.storage/storageaccounts/blobservices',\n  'microsoft.storage/storageaccounts/fileservices',\n  'microsoft.storage/storageaccounts/queueservices',\n  'microsoft.storage/storageaccounts/tableservices',\n  'microsoft.storagecache/caches',\n  'microsoft.storagesync/storagesyncservices',\n  'microsoft.streamanalytics/streamingjobs',\n  'microsoft.synapse/workspaces',\n  'microsoft.synapse/workspaces/bigdatapools',\n  'microsoft.synapse/workspaces/kustopools',\n  'microsoft.synapse/workspaces/scopepools',\n  'microsoft.synapse/workspaces/sqlpools',\n  'microsoft.timeseriesinsights/environments',\n  'microsoft.timeseriesinsights/environments/eventsources',\n  'microsoft.videoindexer/accounts',\n  'microsoft.vmwarecloudsimple/virtualmachines',\n  'microsoft.web/hostingenvironments',\n  'microsoft.web/hostingenvironments/workerpools',\n  'microsoft.web/serverfarms',\n  'microsoft.web/sites',\n  'microsoft.web/sites/slots',\n];\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { Input, Label, InlineField, Button, useStyles2 } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureMetricResource } from '../../types';\n\nexport interface ResourcePickerProps<T> {\n  resources: T[];\n  onChange: (resources: T[]) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resourceList: css({ display: 'flex', columnGap: theme.spacing(1), flexWrap: 'wrap', marginBottom: theme.spacing(1) }),\n  resource: css({ flex: '0 0 auto' }),\n  resourceLabel: css({ padding: theme.spacing(1) }),\n  resourceGroupAndName: css({ display: 'flex', columnGap: theme.spacing(0.5) }),\n});\n\nconst AdvancedResourcePicker = ({ resources, onChange }: ResourcePickerProps<AzureMetricResource>) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Ensure there is at least one resource\n    if (resources.length === 0) {\n      onChange([{}]);\n    }\n  }, [resources, onChange]);\n\n  const onResourceChange = (index: number, resource: AzureMetricResource) => {\n    const newResources = [...resources];\n    newResources[index] = resource;\n    onChange(newResources);\n  };\n\n  const removeResource = (index: number) => {\n    const newResources = [...resources];\n    newResources.splice(index, 1);\n    onChange(newResources);\n  };\n\n  const addResource = () => {\n    onChange(\n      resources.concat({\n        subscription: resources[0]?.subscription,\n        metricNamespace: resources[0]?.metricNamespace,\n        resourceGroup: '',\n        resourceName: '',\n      })\n    );\n  };\n\n  const onCommonPropChange = (r: Partial<AzureMetricResource>) => {\n    onChange(resources.map((resource) => ({ ...resource, ...r })));\n  };\n\n  return (\n    <>\n      <InlineField\n        label=\"Subscription\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-subscription`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.subscription.input}\n      >\n        <Input\n          id={`input-advanced-resource-picker-subscription`}\n          value={resources[0]?.subscription ?? ''}\n          onChange={(event) => onCommonPropChange({ subscription: event.currentTarget.value })}\n          placeholder=\"aaaaaaaa-bbbb-cccc-dddd-eeeeeeee\"\n        />\n      </InlineField>\n      <InlineField\n        label=\"Namespace\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-metricNamespace`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.namespace.input}\n      >\n        <Input\n          id={`input-advanced-resource-picker-metricNamespace`}\n          value={resources[0]?.metricNamespace ?? ''}\n          onChange={(event) => onCommonPropChange({ metricNamespace: event.currentTarget.value })}\n          placeholder=\"Microsoft.Insights/metricNamespaces\"\n        />\n      </InlineField>\n      <InlineField\n        label=\"Region\"\n        grow\n        transparent\n        htmlFor={`input-advanced-resource-picker-region`}\n        labelWidth={15}\n        data-testid={selectors.components.queryEditor.resourcePicker.advanced.region.input}\n        tooltip=\"The code region of the resource. Optional for one resource but mandatory when selecting multiple ones.\"\n      >\n        <Input\n          id={`input-advanced-resource-picker-region`}\n          value={resources[0]?.region ?? ''}\n          onChange={(event) => onCommonPropChange({ region: event.currentTarget.value })}\n          placeholder=\"northeurope\"\n        />\n      </InlineField>\n      <div className={styles.resourceList}>\n        {resources.map((resource, index) => (\n          <div key={`resource-${index + 1}`} className={styles.resource}>\n            {resources.length !== 1 && <Label className={styles.resourceLabel}>Resource {index + 1}</Label>}\n            <InlineField\n              label=\"Resource Group\"\n              transparent\n              htmlFor={`input-advanced-resource-picker-resourceGroup-${index + 1}`}\n              labelWidth={15}\n              data-testid={selectors.components.queryEditor.resourcePicker.advanced.resourceGroup.input}\n            >\n              <div className={styles.resourceGroupAndName}>\n                <Input\n                  id={`input-advanced-resource-picker-resourceGroup-${index + 1}`}\n                  value={resource?.resourceGroup ?? ''}\n                  onChange={(event) =>\n                    onResourceChange(index, { ...resource, resourceGroup: event.currentTarget.value })\n                  }\n                  placeholder=\"resource-group\"\n                />\n                <AccessoryButton\n                  aria-label=\"remove\"\n                  icon=\"times\"\n                  variant=\"secondary\"\n                  onClick={() => removeResource(index)}\n                  hidden={resources.length === 1}\n                  data-testid={'remove-resource'}\n                />\n              </div>\n            </InlineField>\n\n            <InlineField\n              label=\"Resource Name\"\n              transparent\n              htmlFor={`input-advanced-resource-picker-resourceName-${index + 1}`}\n              labelWidth={15}\n              data-testid={selectors.components.queryEditor.resourcePicker.advanced.resource.input}\n            >\n              <Input\n                id={`input-advanced-resource-picker-resourceName-${index + 1}`}\n                value={resource?.resourceName ?? ''}\n                onChange={(event) => onResourceChange(index, { ...resource, resourceName: event.currentTarget.value })}\n                placeholder=\"name\"\n              />\n            </InlineField>\n          </div>\n        ))}\n      </div>\n      <Button aria-label=\"Add\" icon=\"plus\" variant=\"secondary\" onClick={addResource} type=\"button\">\n        Add resource\n      </Button>\n    </>\n  );\n};\n\nexport default AdvancedResourcePicker;\n","import { AzureMetricDimension, AzureMonitorQuery } from '../../types';\n\nexport function setCustomNamespace(query: AzureMonitorQuery, selection: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.customNamespace === selection) {\n    return query;\n  }\n\n  if (selection?.toLowerCase().startsWith('microsoft.storage/storageaccounts/')) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: selection,\n        metricName: undefined,\n        aggregation: undefined,\n        timeGrain: '',\n        dimensionFilters: [],\n      },\n    };\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      customNamespace: selection,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setMetricName(query: AzureMonitorQuery, metricName: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricName === metricName) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricName: metricName,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setAggregation(query: AzureMonitorQuery, aggregation: string): AzureMonitorQuery {\n  if (query.azureMonitor?.aggregation === aggregation) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      aggregation: aggregation,\n    },\n  };\n}\n\nexport function setTimeGrain(query: AzureMonitorQuery, timeGrain: string): AzureMonitorQuery {\n  if (query.azureMonitor?.timeGrain === timeGrain) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      timeGrain: timeGrain,\n    },\n  };\n}\n\nexport function setDimensionFilters(query: AzureMonitorQuery, dimensions: AzureMetricDimension[]): AzureMonitorQuery {\n  if (query.azureMonitor?.dimensionFilters === dimensions) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      dimensionFilters: dimensions,\n    },\n  };\n}\n\nexport function appendDimensionFilter(\n  query: AzureMonitorQuery,\n  dimension = '',\n  operator = 'eq',\n  filters: string[] = []\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n\n  return setDimensionFilters(query, [\n    ...existingFilters,\n    {\n      dimension,\n      operator,\n      filters,\n    },\n  ]);\n}\n\nexport function removeDimensionFilter(query: AzureMonitorQuery, indexToRemove: number): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  newFilters.splice(indexToRemove, 1);\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setDimensionFilterValue<Key extends keyof AzureMetricDimension>(\n  query: AzureMonitorQuery,\n  index: number,\n  fieldName: Key,\n  value: AzureMetricDimension[Key]\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  const newFilter = newFilters[index];\n  newFilter[fieldName] = value;\n  if (fieldName === 'dimension' || fieldName === 'operator') {\n    newFilter.filters = [];\n  }\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setTop(query: AzureMonitorQuery, top: string): AzureMonitorQuery {\n  if (query.azureMonitor?.top === top) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      top: top,\n    },\n  };\n}\n\nexport function setLegendAlias(query: AzureMonitorQuery, alias: string): AzureMonitorQuery {\n  if (query.azureMonitor?.alias === alias) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      alias: alias,\n    },\n  };\n}\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setAggregation } from './setQueryValue';\n\ninterface AggregationFieldProps extends AzureQueryEditorFieldProps {\n  aggregationOptions: AzureMonitorOption[];\n  isLoading: boolean;\n}\n\nconst AggregationField: React.FC<AggregationFieldProps> = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  aggregationOptions,\n  isLoading,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setAggregation(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = addValueToOptions(aggregationOptions, variableOptionGroup, query.azureMonitor?.aggregation);\n\n  return (\n    <Field label=\"Aggregation\">\n      <Select\n        inputId=\"azure-monitor-metrics-aggregation-field\"\n        value={query.azureMonitor?.aggregation || null}\n        onChange={handleChange}\n        options={options}\n        isLoading={isLoading}\n      />\n    </Field>\n  );\n};\n\nexport default AggregationField;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, DataFrame, PanelData, Labels } from '@grafana/data';\nimport { EditorList, AccessoryButton } from '@grafana/experimental';\nimport { Select, HorizontalGroup, MultiSelect } from '@grafana/ui';\n\nimport { AzureMetricDimension, AzureMonitorOption, AzureMonitorQuery, AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setDimensionFilters } from './setQueryValue';\n\ninterface DimensionFieldsProps extends AzureQueryEditorFieldProps {\n  dimensionOptions: AzureMonitorOption[];\n}\n\ninterface DimensionLabels {\n  [key: string]: Set<string>;\n}\n\nconst useDimensionLabels = (data: PanelData | undefined, query: AzureMonitorQuery) => {\n  const [dimensionLabels, setDimensionLabels] = useState<DimensionLabels>({});\n  useEffect(() => {\n    let labelsObj: DimensionLabels = {};\n    if (data?.series?.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series: DataFrame[] = data.series.flat().filter((series) => series.refId === query.refId);\n      const fields = series.flatMap((series) => series.fields);\n      // Retrieve labels for series fields\n      const labels = fields\n        .map((fields) => fields.labels)\n        .flat()\n        .filter((item): item is Labels => item !== null && item !== undefined);\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        for (const [dimension, value] of Object.entries(label)) {\n          if (labelsObj[dimension]) {\n            labelsObj[dimension].add(value);\n          } else {\n            labelsObj[dimension] = new Set([value]);\n          }\n        }\n      }\n    }\n    setDimensionLabels((prevLabels) => {\n      const newLabels: DimensionLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n      return newLabels;\n    });\n  }, [data?.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst DimensionFields: React.FC<DimensionFieldsProps> = ({ data, query, dimensionOptions, onQueryChange }) => {\n  const dimensionFilters = useMemo(\n    () => query.azureMonitor?.dimensionFilters ?? [],\n    [query.azureMonitor?.dimensionFilters]\n  );\n\n  const dimensionLabels = useDimensionLabels(data, query);\n\n  const dimensionOperators: Array<SelectableValue<string>> = [\n    { label: '==', value: 'eq' },\n    { label: '!=', value: 'ne' },\n    { label: 'starts with', value: 'sw' },\n  ];\n\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(\n        (val) => !dimensionFilters.some((dimensionFilter) => dimensionFilter.dimension === val.value)\n      );\n    }\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const onFieldChange = <Key extends keyof AzureMetricDimension>(\n    fieldName: Key,\n    item: Partial<AzureMetricDimension>,\n    value: AzureMetricDimension[Key],\n    onChange: (item: Partial<AzureMetricDimension>) => void\n  ) => {\n    item[fieldName] = value;\n    onChange(item);\n  };\n\n  const getValidDimensionOptions = (selectedDimension: string) => {\n    return validDimensionOptions.concat(dimensionOptions.filter((item) => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter: string | undefined, dimension: string) => {\n    const dimensionFilters = Array.from(dimensionLabels[dimension.toLowerCase()] ?? []);\n    if (dimensionFilters.find((filter) => filter === selectedFilter)) {\n      return dimensionFilters.map((filter) => ({ value: filter, label: filter }));\n    }\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map((item) => ({\n      value: item,\n      label: item,\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters: string[] | undefined, dimension: string) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find((label) => label.value === filter)) {\n          labelOptions.push({ value: filter, label: filter });\n        }\n      }\n    }\n    return labelOptions;\n  };\n  const getValidOperators = (selectedOperator: string) => {\n    if (dimensionOperators.find((operator: SelectableValue) => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n    return [...dimensionOperators, ...(selectedOperator ? [{ label: selectedOperator, value: selectedOperator }] : [])];\n  };\n\n  const changedFunc = (changed: Array<Partial<AzureMetricDimension>>) => {\n    const properData: AzureMetricDimension[] = changed.map((x) => {\n      return {\n        dimension: x.dimension ?? '',\n        operator: x.operator ?? 'eq',\n        filters: x.filters ?? [],\n      };\n    });\n    onQueryChange(setDimensionFilters(query, properData));\n  };\n\n  const renderFilters = (\n    item: Partial<AzureMetricDimension>,\n    onChange: (item: Partial<AzureMetricDimension>) => void,\n    onDelete: () => void\n  ) => {\n    return (\n      <HorizontalGroup spacing=\"none\">\n        <Select\n          menuShouldPortal\n          placeholder=\"Field\"\n          value={item.dimension}\n          options={getValidDimensionOptions(item.dimension || '')}\n          onChange={(e) => onFieldChange('dimension', item, e.value ?? '', onChange)}\n        />\n        <Select\n          menuShouldPortal\n          placeholder=\"Operation\"\n          value={item.operator}\n          options={getValidOperators(item.operator || 'eq')}\n          onChange={(e) => onFieldChange('operator', item, e.value ?? '', onChange)}\n          allowCustomValue\n        />\n        {item.operator === 'eq' || item.operator === 'ne' ? (\n          <MultiSelect\n            menuShouldPortal\n            placeholder=\"Select value(s)\"\n            value={item.filters}\n            options={getValidMultiSelectOptions(item.filters, item.dimension ?? '')}\n            onChange={(e) =>\n              onFieldChange(\n                'filters',\n                item,\n                e.map((x) => x.value ?? ''),\n                onChange\n              )\n            }\n            aria-label={'dimension-labels-select'}\n            allowCustomValue\n          />\n        ) : (\n          // The API does not currently allow for multiple \"starts with\" clauses to be used.\n          <Select\n            menuShouldPortal\n            placeholder=\"Select value\"\n            value={item.filters ? item.filters[0] : ''}\n            allowCustomValue\n            options={getValidFilterOptions(item.filters ? item.filters[0] : '', item.dimension ?? '')}\n            onChange={(e) => onFieldChange('filters', item, [e?.value ?? ''], onChange)}\n            isClearable\n          />\n        )}\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <Field label=\"Dimensions\">\n      <EditorList items={dimensionFilters} onChange={changedFunc} renderItem={renderFilters} />\n    </Field>\n  );\n};\n\nexport default DimensionFields;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setLegendAlias } from './setQueryValue';\n\nconst LegendFormatField: React.FC<AzureQueryEditorFieldProps> = ({ onQueryChange, query }) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.alias ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setLegendAlias(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Legend format\">\n      <Input\n        id=\"azure-monitor-metrics-legend-field\"\n        placeholder=\"Alias patterns\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default LegendFormatField;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { selectors } from '../../e2e/selectors';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setMetricName } from './setQueryValue';\n\ninterface MetricNameProps extends AzureQueryEditorFieldProps {\n  metricNames: AzureMonitorOption[];\n}\n\nconst MetricNameField: React.FC<MetricNameProps> = ({ metricNames, query, variableOptionGroup, onQueryChange }) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricName(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = addValueToOptions(metricNames, variableOptionGroup, query.azureMonitor?.metricName);\n\n  return (\n    <Field label=\"Metric\" data-testid={selectors.components.queryEditor.metricsQueryEditor.metricName.input}>\n      <Select\n        inputId=\"azure-monitor-metrics-metric-field\"\n        value={query.azureMonitor?.metricName ?? null}\n        onChange={handleChange}\n        options={options}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNameField;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setCustomNamespace } from './setQueryValue';\n\ninterface MetricNamespaceFieldProps extends AzureQueryEditorFieldProps {\n  metricNamespaces: AzureMonitorOption[];\n}\n\nconst MetricNamespaceField: React.FC<MetricNamespaceFieldProps> = ({\n  metricNamespaces,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setCustomNamespace(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const value = query.azureMonitor?.customNamespace || query.azureMonitor?.metricNamespace;\n  const options = addValueToOptions(metricNamespaces, variableOptionGroup, value);\n\n  return (\n    <Field label=\"Metric namespace\">\n      <Select\n        inputId=\"azure-monitor-metrics-metric-namespace-field\"\n        value={value || null}\n        onChange={handleChange}\n        options={options}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNamespaceField;\n","import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { addValueToOptions } from '../../utils/common';\nimport { Field } from '../Field';\n\nimport { setTimeGrain } from './setQueryValue';\n\ninterface TimeGrainFieldProps extends AzureQueryEditorFieldProps {\n  timeGrainOptions: AzureMonitorOption[];\n}\n\nconst TimeGrainField: React.FC<TimeGrainFieldProps> = ({\n  query,\n  timeGrainOptions,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setTimeGrain(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const timeGrains = useMemo(() => {\n    const autoInterval = TimegrainConverter.findClosestTimeGrain(\n      '1m',\n      timeGrainOptions.map((o) => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n        '1m',\n        '5m',\n        '15m',\n        '30m',\n        '1h',\n        '6h',\n        '12h',\n        '1d',\n      ]\n    );\n\n    const baseTimeGrains = timeGrainOptions.map((v) => (v.value === 'auto' ? { ...v, description: autoInterval } : v));\n\n    const options = addValueToOptions(baseTimeGrains, variableOptionGroup, query.azureMonitor?.timeGrain);\n\n    return options;\n  }, [timeGrainOptions, variableOptionGroup, query.azureMonitor?.timeGrain]);\n\n  return (\n    <Field label=\"Time grain\">\n      <Select\n        inputId=\"azure-monitor-metrics-time-grain-field\"\n        value={query.azureMonitor?.timeGrain}\n        onChange={handleChange}\n        options={timeGrains}\n      />\n    </Field>\n  );\n};\n\nexport default TimeGrainField;\n","import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setTop } from './setQueryValue';\n\nconst TopField: React.FC<AzureQueryEditorFieldProps> = ({ onQueryChange, query }) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.top ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setTop(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Top\">\n      <Input\n        id=\"azure-monitor-metrics-top-field\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={16}\n      />\n    </Field>\n  );\n};\n\nexport default TopField;\n","import { useEffect, useMemo, useState } from 'react';\n\nexport function useAsyncState<T>(asyncFn: () => Promise<T>, setError: Function, dependencies: unknown[]) {\n  // Use the lazy initial state functionality of useState to assign a random ID to the API call\n  // to track where errors come from. See useLastError.\n  const [errorSource] = useState(() => Math.random());\n  const [value, setValue] = useState<T>();\n\n  const finalValue = useMemo(() => value ?? [], [value]);\n\n  useEffect(() => {\n    asyncFn()\n      .then((results) => {\n        setValue(results);\n        setError(errorSource, undefined);\n      })\n      .catch((err) => {\n        setError(errorSource, err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return finalValue;\n}\n","import { useEffect, useState } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport Datasource from '../../datasource';\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery, AzureMonitorResource } from '../../types';\nimport { toOption } from '../../utils/common';\nimport { useAsyncState } from '../../utils/useAsyncState';\n\nimport { setCustomNamespace } from './setQueryValue';\n\ntype SetErrorFn = (source: string, error: AzureMonitorErrorish | undefined) => void;\n\nexport type DataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn,\n  setError: SetErrorFn\n) => AzureMonitorOption[];\n\nexport type MetricsMetadataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn\n) => MetricMetadata;\n\nexport interface MetricMetadata {\n  aggOptions: AzureMonitorOption[];\n  timeGrains: AzureMonitorOption[];\n  dimensions: AzureMonitorOption[];\n  isLoading: boolean;\n\n  // These two properties are only used within the hook, and not elsewhere\n  supportedAggTypes: string[];\n  primaryAggType: string | undefined;\n}\n\ntype OnChangeFn = (newQuery: AzureMonitorQuery) => void;\n\nconst getResourceGroupAndName = (resources?: AzureMonitorResource[]) => {\n  if (!resources || !resources.length) {\n    return { resourceGroup: '', resourceName: '' };\n  }\n  return {\n    resourceGroup: resources[0].resourceGroup ?? '',\n    resourceName: resources[0].resourceName ?? '',\n  };\n};\n\nexport const useMetricNamespaces: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { metricNamespace, resources } = query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n\n  const metricNamespaces = useAsyncState(\n    async () => {\n      if (!subscription || !resourceGroup || !resourceName) {\n        return;\n      }\n\n      const results = await datasource.azureMonitorDatasource.getMetricNamespaces(\n        {\n          subscription,\n          metricNamespace,\n          resourceGroup,\n          resourceName,\n        },\n        false\n      );\n      const options = formatOptions(results, metricNamespace);\n\n      // Do some cleanup of the query state if need be\n      if (!metricNamespace && options.length) {\n        onChange(setCustomNamespace(query, options[0].value));\n      }\n\n      return options;\n    },\n    setError,\n    [subscription, metricNamespace, resourceGroup, resourceName]\n  );\n\n  return metricNamespaces;\n};\n\nexport const useMetricNames: DataHook = (query, datasource, onChange, setError) => {\n  const { subscription } = query;\n  const { metricNamespace, metricName, resources, customNamespace } = query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n\n  return useAsyncState(\n    async () => {\n      if (!subscription || !metricNamespace || !resourceGroup || !resourceName) {\n        return;\n      }\n      const results = await datasource.azureMonitorDatasource.getMetricNames({\n        subscription,\n        resourceGroup,\n        resourceName,\n        metricNamespace,\n        customNamespace,\n      });\n      const options = formatOptions(results, metricName);\n\n      return options;\n    },\n    setError,\n    [subscription, resourceGroup, resourceName, metricNamespace, customNamespace]\n  );\n};\n\nconst defaultMetricMetadata: MetricMetadata = {\n  aggOptions: [],\n  timeGrains: [],\n  dimensions: [],\n  isLoading: false,\n  supportedAggTypes: [],\n  primaryAggType: undefined,\n};\n\nexport const useMetricMetadata = (query: AzureMonitorQuery, datasource: Datasource, onChange: OnChangeFn) => {\n  const [metricMetadata, setMetricMetadata] = useState<MetricMetadata>(defaultMetricMetadata);\n  const { subscription } = query;\n  const { resources, metricNamespace, metricName, aggregation, timeGrain, customNamespace } = query.azureMonitor ?? {};\n  const { resourceGroup, resourceName } = getResourceGroupAndName(resources);\n\n  // Fetch new metric metadata when the fields change\n  useEffect(() => {\n    if (!subscription || !resourceGroup || !resourceName || !metricNamespace || !metricName) {\n      setMetricMetadata(defaultMetricMetadata);\n      return;\n    }\n\n    datasource.azureMonitorDatasource\n      .getMetricMetadata({ subscription, resourceGroup, resourceName, metricNamespace, metricName, customNamespace })\n      .then((metadata) => {\n        // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`\n        const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map((v) => ({\n          label: v,\n          value: v,\n        }));\n\n        setMetricMetadata({\n          aggOptions: aggregations,\n          timeGrains: metadata.supportedTimeGrains,\n          dimensions: metadata.dimensions,\n          isLoading: false,\n          supportedAggTypes: metadata.supportedAggTypes ?? [],\n          primaryAggType: metadata.primaryAggType,\n        });\n      });\n  }, [datasource, subscription, resourceGroup, resourceName, metricNamespace, metricName, customNamespace]);\n\n  // Update the query state in response to the meta data changing\n  useEffect(() => {\n    const newAggregation = aggregation || metricMetadata.primaryAggType;\n    const newTimeGrain = timeGrain || 'auto';\n\n    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {\n      onChange({\n        ...query,\n        azureMonitor: {\n          ...query.azureMonitor,\n          aggregation: newAggregation,\n          timeGrain: newTimeGrain,\n          allowedTimeGrainsMs: metricMetadata.timeGrains\n            .filter((timeGrain) => timeGrain.value !== 'auto')\n            .map((timeGrain) =>\n              rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(timeGrain.value))\n            ),\n        },\n      });\n    }\n  }, [onChange, metricMetadata, aggregation, timeGrain, query]);\n\n  return metricMetadata;\n};\n\nfunction formatOptions(\n  rawResults: Array<{\n    text: string;\n    value: string;\n  }>,\n  selectedValue?: string\n) {\n  const options = rawResults.map(toOption);\n\n  // account for custom values that might have been set in json file like ones crafted with a template variable (ex: \"cloud-datasource-resource-$Environment\")\n  if (selectedValue && !options.find((option) => option.value === selectedValue.toLowerCase())) {\n    options.push({ label: selectedValue, value: selectedValue });\n  }\n\n  return options;\n}\n","import React from 'react';\n\nimport { PanelData } from '@grafana/data/src/types';\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\n\nimport { multiResourceCompatibleTypes } from '../../azureMetadata';\nimport type Datasource from '../../datasource';\nimport type { AzureMonitorQuery, AzureMonitorOption, AzureMonitorErrorish, AzureMetricResource } from '../../types';\nimport ResourceField from '../ResourceField';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceDetails } from '../ResourcePicker/utils';\n\nimport AdvancedResourcePicker from './AdvancedResourcePicker';\nimport AggregationField from './AggregationField';\nimport DimensionFields from './DimensionFields';\nimport LegendFormatField from './LegendFormatField';\nimport MetricNameField from './MetricNameField';\nimport MetricNamespaceField from './MetricNamespaceField';\nimport TimeGrainField from './TimeGrainField';\nimport TopField from './TopField';\nimport { useMetricNames, useMetricNamespaces, useMetricMetadata } from './dataHooks';\n\ninterface MetricsQueryEditorProps {\n  data: PanelData | undefined;\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst MetricsQueryEditor: React.FC<MetricsQueryEditorProps> = ({\n  data,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  const metricsMetadata = useMetricMetadata(query, datasource, onChange);\n  const metricNamespaces = useMetricNamespaces(query, datasource, onChange, setError);\n  const metricNames = useMetricNames(query, datasource, onChange, setError);\n  const resources =\n    query.azureMonitor?.resources?.map((r) => ({\n      subscription: query.subscription,\n      resourceGroup: r.resourceGroup,\n      metricNamespace: query.azureMonitor?.metricNamespace,\n      resourceName: r.resourceName,\n      region: query.azureMonitor?.region,\n    })) ?? [];\n\n  const supportMultipleResource = (namespace?: string) => {\n    return multiResourceCompatibleTypes[namespace?.toLocaleLowerCase() ?? ''] ?? false;\n  };\n\n  const disableRow = (row: ResourceRow, selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      // Only if there is some resource(s) selected we should disable rows\n      return false;\n    }\n\n    const rowResource = parseResourceDetails(row.uri, row.location);\n    const selectedRowSample = parseResourceDetails(selectedRows[0].uri, selectedRows[0].location);\n    // Only resources:\n    // - in the same subscription\n    // - in the same region\n    // - with the same metric namespace\n    // - with a metric namespace that is compatible with multi-resource queries\n    return (\n      rowResource.subscription !== selectedRowSample.subscription ||\n      rowResource.region !== selectedRowSample.region ||\n      rowResource.metricNamespace?.toLocaleLowerCase() !== selectedRowSample.metricNamespace?.toLocaleLowerCase() ||\n      !supportMultipleResource(rowResource.metricNamespace)\n    );\n  };\n\n  const selectionNotice = (selectedRows: ResourceRowGroup) => {\n    if (selectedRows.length === 0) {\n      return '';\n    }\n    const selectedRowSample = parseResourceDetails(selectedRows[0].uri, selectedRows[0].location);\n    return supportMultipleResource(selectedRowSample.metricNamespace)\n      ? 'You can select items of the same resource type and location. To select resources of a different resource type or location, please first uncheck your current selection.'\n      : '';\n  };\n\n  return (\n    <span data-testid=\"azure-monitor-metrics-query-editor-with-experimental-ui\">\n      <EditorRows>\n        <EditorRow>\n          <EditorFieldGroup>\n            <ResourceField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              selectableEntryTypes={[ResourceRowType.Resource]}\n              resources={resources ?? []}\n              queryType={'metrics'}\n              disableRow={disableRow}\n              renderAdvanced={(resources, onChange) => (\n                // It's required to cast resources because the resource picker\n                // specifies the type to string | AzureMetricResource.\n                // eslint-disable-next-line\n                <AdvancedResourcePicker resources={resources as AzureMetricResource[]} onChange={onChange} />\n              )}\n              selectionNotice={selectionNotice}\n            />\n            <MetricNamespaceField\n              metricNamespaces={metricNamespaces}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <MetricNameField\n              metricNames={metricNames}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <AggregationField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              aggregationOptions={metricsMetadata?.aggOptions ?? []}\n              isLoading={metricsMetadata.isLoading}\n            />\n            <TimeGrainField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              timeGrainOptions={metricsMetadata?.timeGrains ?? []}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <DimensionFields\n              data={data}\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n              dimensionOptions={metricsMetadata?.dimensions ?? []}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n        <EditorRow>\n          <EditorFieldGroup>\n            <TopField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n            <LegendFormatField\n              query={query}\n              datasource={datasource}\n              variableOptionGroup={variableOptionGroup}\n              onQueryChange={onChange}\n              setError={setError}\n            />\n          </EditorFieldGroup>\n        </EditorRow>\n      </EditorRows>\n    </span>\n  );\n};\n\nexport default MetricsQueryEditor;\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\n\nimport { selectors } from '../e2e/selectors';\nimport { AzureMonitorQuery, AzureQueryType } from '../types';\n\ninterface QueryTypeFieldProps {\n  query: AzureMonitorQuery;\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n}\n\nexport const QueryHeader: React.FC<QueryTypeFieldProps> = ({ query, onQueryChange }) => {\n  const queryTypes: Array<{ value: AzureQueryType; label: string }> = [\n    { value: AzureQueryType.AzureMonitor, label: 'Metrics' },\n    { value: AzureQueryType.LogAnalytics, label: 'Logs' },\n    { value: AzureQueryType.AzureResourceGraph, label: 'Azure Resource Graph' },\n  ];\n\n  const handleChange = useCallback(\n    (change: SelectableValue<AzureQueryType>) => {\n      change.value &&\n        onQueryChange({\n          ...query,\n          queryType: change.value,\n        });\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <span data-testid={selectors.components.queryEditor.header.select}>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Service\"\n          value={query.queryType}\n          placeholder=\"Service...\"\n          allowCustomValue\n          options={queryTypes}\n          onChange={handleChange}\n        />\n      </EditorHeader>\n    </span>\n  );\n};\n","import { setKustoQuery } from '../components/LogsQueryEditor/setQueryValue';\nimport {\n  appendDimensionFilter,\n  setTimeGrain as setMetricsTimeGrain,\n} from '../components/MetricsQueryEditor/setQueryValue';\nimport { parseResourceDetails } from '../components/ResourcePicker/utils';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMetricDimension, AzureMonitorQuery, AzureQueryType } from '../types';\n\nconst OLD_DEFAULT_DROPDOWN_VALUE = 'select';\n\nexport default function migrateQuery(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (!workingQuery.queryType) {\n    workingQuery = {\n      ...workingQuery,\n      queryType: AzureQueryType.AzureMonitor,\n    };\n  }\n\n  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);\n  if (workingQuery.queryType === AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {\n    workingQuery = migrateTimeGrains(workingQuery);\n    workingQuery = migrateToDefaultNamespace(workingQuery);\n    workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n    workingQuery = migrateDimensionFilterToArray(workingQuery);\n    workingQuery = migrateDimensionToResourceObj(workingQuery);\n  }\n\n  if (workingQuery.azureMonitor?.resourceGroup || workingQuery.azureMonitor?.resourceName) {\n    workingQuery = migrateResourceGroupAndName(workingQuery);\n  }\n\n  if (workingQuery.azureLogAnalytics?.resource) {\n    workingQuery = migrateLogsResource(workingQuery);\n  }\n\n  return workingQuery;\n}\n\nfunction migrateTimeGrains(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor?.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {\n    const newTimeGrain = TimegrainConverter.createISO8601Duration(\n      workingQuery.azureMonitor.timeGrain ?? 'auto',\n      workingQuery.azureMonitor.timeGrainUnit\n    );\n    workingQuery = setMetricsTimeGrain(workingQuery, newTimeGrain);\n\n    delete workingQuery.azureMonitor?.timeGrainUnit;\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogAnalyticsToFromTimes(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__from\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ')\n    );\n  }\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__to\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ')\n    );\n  }\n\n  return workingQuery;\n}\n\nfunction migrateToDefaultNamespace(query: AzureMonitorQuery): AzureMonitorQuery {\n  const haveMetricNamespace =\n    query.azureMonitor?.metricNamespace && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;\n\n  if (!haveMetricNamespace && query.azureMonitor?.metricDefinition) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: query.azureMonitor.metricDefinition,\n        metricDefinition: undefined,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateDimensionToDimensionFilter(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  const oldDimension = workingQuery.azureMonitor?.dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    workingQuery = appendDimensionFilter(workingQuery, oldDimension, 'eq', [\n      workingQuery.azureMonitor?.dimensionFilter || '',\n    ]);\n  }\n\n  delete workingQuery.azureMonitor?.dimension;\n  delete workingQuery.azureMonitor?.dimensionFilter;\n\n  return workingQuery;\n}\n\nfunction migrateDimensionFilterToArray(query: AzureMonitorQuery): AzureMonitorQuery {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery) {\n    return query;\n  }\n\n  const newFilters: AzureMetricDimension[] = [];\n  const dimensionFilters = azureMonitorQuery.dimensionFilters;\n  if (dimensionFilters && dimensionFilters.length > 0) {\n    dimensionFilters.forEach((filter) => {\n      const staticProps = { dimension: filter.dimension, operator: filter.operator };\n      if (!filter.filters && filter.filter) {\n        newFilters.push({ ...staticProps, filters: [filter.filter] });\n      } else {\n        let hasFilter = false;\n        if (filter.filters && filter.filter) {\n          for (const oldFilter of filter.filters) {\n            if (filter.filter === oldFilter) {\n              hasFilter = true;\n              break;\n            }\n          }\n          if (!hasFilter && filter.filter !== '*') {\n            filter.filters.push(filter.filter);\n          }\n          newFilters.push({ ...staticProps, filters: filter.filters });\n        }\n      }\n    });\n    if (newFilters.length > 0) {\n      return { ...query, azureMonitor: { ...azureMonitorQuery, dimensionFilters: newFilters } };\n    }\n  }\n  return query;\n}\n\nfunction migrateDimensionToResourceObj(query: AzureMonitorQuery): AzureMonitorQuery {\n  if (query.azureMonitor?.resourceUri && !query.azureMonitor.resourceUri.startsWith('$')) {\n    const details = parseResourceDetails(query.azureMonitor.resourceUri);\n    const isWellFormedUri = details?.subscription && details?.resourceGroup && details?.resourceName;\n    return {\n      ...query,\n      subscription: details?.subscription,\n      azureMonitor: {\n        ...query.azureMonitor,\n        resources: [{ resourceGroup: details?.resourceGroup, resourceName: details?.resourceName }],\n        metricNamespace: details?.metricNamespace,\n        resourceUri: isWellFormedUri ? undefined : query.azureMonitor.resourceUri,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateResourceGroupAndName(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor) {\n    workingQuery.azureMonitor.resources = [\n      { resourceGroup: workingQuery.azureMonitor.resourceGroup, resourceName: workingQuery.azureMonitor.resourceName },\n    ];\n\n    delete workingQuery.azureMonitor.resourceGroup;\n    delete workingQuery.azureMonitor.resourceName;\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogsResource(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureLogAnalytics && workingQuery.azureLogAnalytics.resource) {\n    workingQuery.azureLogAnalytics.resources = [workingQuery.azureLogAnalytics.resource];\n\n    delete workingQuery.azureLogAnalytics.resource;\n  }\n\n  return workingQuery;\n}\n","import deepEqual from 'fast-deep-equal';\nimport { defaults } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport migrateQuery from '../../utils/migrateQuery';\n\nconst DEFAULT_QUERY = {\n  queryType: AzureQueryType.AzureMonitor,\n};\n\nconst prepareQuery = (query: AzureMonitorQuery) => {\n  // Note: _.defaults does not apply default values deeply.\n  const withDefaults = defaults({}, query, DEFAULT_QUERY);\n  const migratedQuery = migrateQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedQuery = (query: AzureMonitorQuery, onChangeQuery: (newQuery: AzureMonitorQuery) => void) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedQuery;\n","import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport AzureMonitorDatasource from '../../datasource';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorErrorish,\n  AzureMonitorOption,\n  AzureMonitorQuery,\n  AzureQueryType,\n} from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport NewMetricsQueryEditor from '../MetricsQueryEditor/MetricsQueryEditor';\nimport { QueryHeader } from '../QueryHeader';\nimport { Space } from '../Space';\n\nimport usePreparedQuery from './usePreparedQuery';\n\nexport type AzureMonitorQueryEditorProps = QueryEditorProps<\n  AzureMonitorDatasource,\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n>;\n\nconst QueryEditor: React.FC<AzureMonitorQueryEditorProps> = ({\n  query: baseQuery,\n  datasource,\n  onChange,\n  onRunQuery: baseOnRunQuery,\n  data,\n}) => {\n  const [errorMessage, setError] = useLastError();\n  const onRunQuery = useMemo(() => debounce(baseOnRunQuery, 500), [baseOnRunQuery]);\n\n  const onQueryChange = useCallback(\n    (newQuery: AzureMonitorQuery) => {\n      onChange(newQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const query = usePreparedQuery(baseQuery, onQueryChange);\n\n  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map((v) => ({ label: v, value: v })),\n  };\n\n  return (\n    <div data-testid=\"azure-monitor-query-editor\">\n      <QueryHeader query={query} onQueryChange={onQueryChange} />\n\n      <EditorForQueryType\n        data={data}\n        subscriptionId={subscriptionId}\n        query={query}\n        datasource={datasource}\n        onChange={onQueryChange}\n        variableOptionGroup={variableOptionGroup}\n        setError={setError}\n      />\n\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n            {errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\ninterface EditorForQueryTypeProps extends Omit<AzureMonitorQueryEditorProps, 'onRunQuery'> {\n  subscriptionId?: string;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst EditorForQueryType: React.FC<EditorForQueryTypeProps> = ({\n  data,\n  subscriptionId,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return (\n        <NewMetricsQueryEditor\n          data={data}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.LogAnalytics:\n      return (\n        <LogsQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.AzureResourceGraph:\n      return (\n        <ArgQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    default:\n      const type = query.queryType as unknown;\n      return (\n        <Alert title=\"Unknown query type\">\n          {(type === 'Application Insights' || type === 'Insights Analytics') && (\n            <>\n              {type} was deprecated in Grafana 9. See the{' '}\n              <a\n                href=\"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                deprecation notice\n              </a>{' '}\n              to get more information about how to migrate your queries. This is the current query definition:\n              <CodeEditor height=\"200px\" readOnly language=\"json\" value={JSON.stringify(query, null, 4)} />\n            </>\n          )}\n        </Alert>\n      );\n  }\n};\n\nexport default QueryEditor;\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^()]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw?.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw?.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { concat, find, flattenDeep, forEach, get, map } from 'lodash';\n\nimport { AnnotationEvent, dateTime, TimeSeries, VariableModel } from '@grafana/data';\n\nimport { AzureLogsTableData, AzureLogsVariable } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\nexport default class ResponseParser {\n  declare columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.tables[0].columns;\n      const rows = this.results[i].result.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    forEach(rows, (row) => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: map(columns, (col) => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    forEach(queryResult, (result) => {\n      forEach(flattenDeep(result.rows), (row) => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    forEach(queryResult, (result) => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      forEach(result.rows, (row) => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(\n  sourceSchema: AzureLogAnalyticsMetadata,\n  nameOrIdOrSomething: string,\n  templateVariables: VariableModel[]\n) {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  // Adding macros as known functions\n  database.functions.push(\n    {\n      name: '$__timeFilter',\n      body: '{ true }',\n      inputParameters: [\n        {\n          name: 'timeColumn',\n          type: 'System.String',\n          defaultValue: '\"\"',\n          cslDefaultValue: '\"\"',\n        },\n      ],\n    },\n    {\n      name: '$__timeFrom',\n      body: '{ datetime(2018-06-05T18:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__timeTo',\n      body: '{ datetime(2018-06-05T20:09:58.907Z) }',\n      inputParameters: [],\n    },\n    {\n      name: '$__escapeMulti',\n      body: `{ @'\\\\grafana-vm\\Network(eth0)\\Total', @'\\\\hello!'}`,\n      inputParameters: [\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    },\n    {\n      name: '$__contains',\n      body: `{ colName in ('value1','value2') }`,\n      inputParameters: [\n        {\n          name: 'colName',\n          type: 'System.String',\n          defaultValue: 'colName',\n          cslDefaultValue: 'colName',\n        },\n        {\n          name: '$myVar',\n          type: 'System.String',\n          defaultValue: '$myVar',\n          cslDefaultValue: '$myVar',\n        },\n      ],\n    }\n  );\n\n  // Adding macros as global parameters\n  const globalParameters = templateVariables.map((v) => {\n    return {\n      name: `$${v.name}`,\n      type: 'dynamic',\n    };\n  });\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n    globalParameters,\n  };\n}\n","import { map } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport {\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport { interpolateVariable, routeNames } from '../utils/common';\n\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\n\ninterface AdhocQuery {\n  datasource: DataSourceRef;\n  path: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return (\n      item.hide !== true &&\n      !!item.azureLogAnalytics?.query &&\n      (!!item.azureLogAnalytics.resources?.length || !!item.azureLogAnalytics.workspace)\n    );\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: any) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const templateSrv = getTemplateSrv();\n    const interpolatedUri = templateSrv.replace(resourceUri, {}, interpolateVariable);\n    const metadata = await this.getMetadata(interpolatedUri);\n    return transformMetadataToKustoSchema(metadata, interpolatedUri, templateSrv.getVariables());\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureLogAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resources = item.resources?.map((r) => templateSrv.replace(r, scopedVars));\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resources && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      ...target,\n      queryType: AzureQueryType.LogAnalytics,\n\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resources,\n\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const resource = encodeURIComponent(customMeta.resource);\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22${resource}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /*\n    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.\n    This has been deprecated, however is still used by a few legacy template queries.\n  */\n  getDeprecatedDefaultWorkSpace() {\n    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace)\n      ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasource: this.getRef(),\n        path: path,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.getResource(query.path)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { find, startsWith } from 'lodash';\n\nimport { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorMetricNamespacesResponse,\n  AzureMonitorMetricNamesResponse,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorQuery,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  DatasourceValidationResult,\n  GetMetricNamespacesQuery,\n  GetMetricNamesQuery,\n  GetMetricMetadataQuery,\n  AzureMetricQuery,\n  AzureMonitorLocations,\n  AzureMonitorProvidersResponse,\n  AzureMonitorLocationsResponse,\n  AzureGetResourceNamesQuery,\n} from '../types';\nimport { routeNames } from '../utils/common';\nimport migrateQuery from '../utils/migrateQuery';\n\nimport ResponseParser from './response_parser';\nimport UrlBuilder from './url_builder';\n\nconst defaultDropdownValue = 'select';\n\nfunction hasValue(item?: string) {\n  return !!(item && item !== defaultDropdownValue);\n}\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  listByResourceGroupApiVersion = '2021-04-01';\n  providerApiVersion = '2021-04-01';\n  locationsApiVersion = '2020-01-01';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n  timeSrv: TimeSrv;\n  templateSrv: TemplateSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.templateSrv = getTemplateSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = routeNames.azureMonitor;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    const hasResource =\n      item?.azureMonitor?.resources &&\n      item.azureMonitor.resources.length > 0 &&\n      item.azureMonitor.resources.every((r) => hasValue(r.resourceGroup) && hasValue(r.resourceName)) &&\n      hasValue(item?.azureMonitor?.metricDefinition || item?.azureMonitor?.metricNamespace);\n    const hasResourceUri = hasValue(item.azureMonitor?.resourceUri);\n\n    return !!(\n      item.hide !== true &&\n      (hasResource || hasResourceUri) &&\n      hasValue(item?.azureMonitor?.metricName) &&\n      hasValue(item?.azureMonitor?.aggregation)\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resources = item.resources?.map((r) => this.replaceTemplateVariables(r, scopedVars)).flat();\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const customNamespace = templateSrv.replace(item.customNamespace, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = (item.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filters = f.filters?.map((filter) => templateSrv.replace(filter ?? '', scopedVars));\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filters: filters || [],\n        };\n      });\n\n    const azMonitorQuery: AzureMetricQuery = {\n      ...item,\n      resources,\n      metricNamespace,\n      customNamespace,\n      timeGrain,\n      allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n      metricName: templateSrv.replace(item.metricName, scopedVars),\n      region: templateSrv.replace(item.region, scopedVars),\n      aggregation: aggregation,\n      dimensionFilters,\n      top: top || '10',\n      alias: item.alias,\n    };\n    if (item.metricDefinition) {\n      azMonitorQuery.metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    }\n    if (item.resourceUri) {\n      azMonitorQuery.resourceUri = templateSrv.replace(item.resourceUri, scopedVars);\n    }\n\n    return migrateQuery({\n      ...target,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: azMonitorQuery,\n    });\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}/subscriptions?api-version=2019-03-01`).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`\n    ).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  async getResourceNames(query: AzureGetResourceNamesQuery, skipToken?: string) {\n    const promises = this.replaceTemplateVariables(query).map(\n      ({ metricNamespace, subscriptionId, resourceGroup, region }) => {\n        const validMetricNamespace = startsWith(metricNamespace?.toLowerCase(), 'microsoft.storage/storageaccounts/')\n          ? 'microsoft.storage/storageaccounts'\n          : metricNamespace;\n        let url = `${this.resourcePath}/subscriptions/${subscriptionId}`;\n        if (resourceGroup) {\n          url += `/resourceGroups/${resourceGroup}`;\n        }\n        url += `/resources?api-version=${this.listByResourceGroupApiVersion}`;\n        const filters: string[] = [];\n        if (validMetricNamespace) {\n          filters.push(`resourceType eq '${validMetricNamespace}'`);\n        }\n        if (region) {\n          filters.push(`location eq '${region}'`);\n        }\n        if (filters.length > 0) {\n          url += `&$filter=${filters.join(' and ')}`;\n        }\n        if (skipToken) {\n          url += `&$skiptoken=${skipToken}`;\n        }\n        return this.getResource(url).then(async (result: any) => {\n          let list: Array<{ text: string; value: string }> = [];\n          if (startsWith(metricNamespace?.toLowerCase(), 'microsoft.storage/storageaccounts/')) {\n            list = ResponseParser.parseResourceNames(result, 'microsoft.storage/storageaccounts');\n            for (let i = 0; i < list.length; i++) {\n              list[i].text += '/default';\n              list[i].value += '/default';\n            }\n          } else {\n            list = ResponseParser.parseResourceNames(result, metricNamespace);\n          }\n\n          if (result.nextLink) {\n            // If there is a nextLink, we should request more pages\n            const nextURL = new URL(result.nextLink);\n            const nextToken = nextURL.searchParams.get('$skiptoken');\n            if (!nextToken) {\n              throw Error('unable to request the next page of resources');\n            }\n            const nextPage = await this.getResourceNames({ metricNamespace, subscriptionId, resourceGroup }, nextToken);\n            list = list.concat(nextPage);\n          }\n\n          return list;\n        });\n      }\n    );\n    return (await Promise.all(promises)).flat();\n  }\n\n  getMetricNamespaces(query: GetMetricNamespacesQuery, globalRegion: boolean) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      this.apiPreviewVersion,\n      // Only use the first query, as the metric namespaces should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      globalRegion,\n      this.templateSrv\n    );\n    return this.getResource(url)\n      .then((result: AzureMonitorMetricNamespacesResponse) => {\n        return ResponseParser.parseResponseValues(\n          result,\n          'properties.metricNamespaceName',\n          'properties.metricNamespaceName'\n        );\n      })\n      .then((result) => {\n        if (url.toLowerCase().includes('microsoft.storage/storageaccounts')) {\n          const storageNamespaces = [\n            'microsoft.storage/storageaccounts',\n            'microsoft.storage/storageaccounts/blobservices',\n            'microsoft.storage/storageaccounts/fileservices',\n            'microsoft.storage/storageaccounts/tableservices',\n            'microsoft.storage/storageaccounts/queueservices',\n          ];\n          for (const namespace of storageNamespaces) {\n            if (!find(result, ['value', namespace.toLowerCase()])) {\n              result.push({ value: namespace, text: namespace });\n            }\n          }\n        }\n        return result;\n      });\n  }\n\n  getMetricNames(query: GetMetricNamesQuery) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      this.apiVersion,\n      // Only use the first query, as the metric names should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      this.templateSrv\n    );\n    return this.getResource(url).then((result: AzureMonitorMetricNamesResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(query: GetMetricMetadataQuery) {\n    const { metricName } = query;\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      this.apiVersion,\n      // Only use the first query, as the metric metadata should be the same for all queries\n      this.replaceSingleTemplateVariables(query),\n      this.templateSrv\n    );\n    return this.getResource(url).then((result: AzureMonitorMetricsMetadataResponse) => {\n      return ResponseParser.parseMetadata(result, this.templateSrv.replace(metricName));\n    });\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  private replaceSingleTemplateVariables<T extends { [K in keyof T]: string }>(query: T, scopedVars?: ScopedVars) {\n    // This method evaluates template variables supporting multiple values but only returns the first value.\n    // This will work as far as the the first combination of variables is valid.\n    // For example if 'rg1' contains 'res1' and 'rg2' contains 'res2' then\n    // { resourceGroup: ['rg1', 'rg2'], resourceName: ['res1', 'res2'] } would return\n    // { resourceGroup: 'rg1', resourceName: 'res1' } which is valid but\n    // { resourceGroup: ['rg1', 'rg2'], resourceName: ['res2'] } would result in\n    // { resourceGroup: 'rg1', resourceName: 'res2' } which is not.\n    return this.replaceTemplateVariables(query, scopedVars)[0];\n  }\n\n  private replaceTemplateVariables<T extends { [K in keyof T]: string }>(query: T, scopedVars?: ScopedVars) {\n    const workingQueries: Array<{ [K in keyof T]: string }> = [{ ...query }];\n    const keys = Object.keys(query) as Array<keyof T>;\n    keys.forEach((key) => {\n      const replaced = this.templateSrv.replace(workingQueries[0][key], scopedVars, 'raw');\n      if (replaced.includes(',')) {\n        const multiple = replaced.split(',');\n        const currentQueries = [...workingQueries];\n        multiple.forEach((value, i) => {\n          currentQueries.forEach((q) => {\n            if (i === 0) {\n              q[key] = value;\n            } else {\n              workingQueries.push({ ...q, [key]: value });\n            }\n          });\n        });\n      } else {\n        workingQueries.forEach((q) => {\n          q[key] = replaced;\n        });\n      }\n    });\n\n    return workingQueries;\n  }\n\n  async getProvider(providerName: string) {\n    return await this.getResource<AzureMonitorProvidersResponse>(\n      `${routeNames.azureMonitor}/providers/${providerName}?api-version=${this.providerApiVersion}`\n    );\n  }\n\n  async getLocations(subscriptions: string[]) {\n    const locationMap = new Map<string, AzureMonitorLocations>();\n    for (const subscription of subscriptions) {\n      const subLocations = ResponseParser.parseLocations(\n        await this.getResource<AzureMonitorLocationsResponse>(\n          `${routeNames.azureMonitor}/subscriptions/${this.templateSrv.replace(subscription)}/locations?api-version=${\n            this.locationsApiVersion\n          }`\n        )\n      );\n      for (const location of subLocations) {\n        locationMap.set(location.name, location);\n      }\n    }\n\n    return locationMap;\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\n\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { interpolateVariable } from '../utils/common';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureResourceGraph;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const variableNames = templateSrv.getVariables().map((v) => `$${v.name}`);\n    const subscriptionVar = _.find(target.subscriptions, (sub) => _.includes(variableNames, sub));\n    const interpolatedSubscriptions = templateSrv\n      .replace(subscriptionVar, scopedVars, (v: any) => v)\n      .split(',')\n      .filter((v) => v.length > 0);\n    const subscriptions = [\n      ...interpolatedSubscriptions,\n      ..._.filter(target.subscriptions, (sub) => !_.includes(variableNames, sub)),\n    ];\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      ...target,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n}\n","import { uniq } from 'lodash';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { logsResourceTypes, resourceTypeDisplayNames } from '../azureMetadata';\nimport AzureMonitorDatasource from '../azure_monitor/azure_monitor_datasource';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from '../components/ResourcePicker/types';\nimport {\n  addResources,\n  findRow,\n  parseMultipleResourceDetails,\n  parseResourceDetails,\n  parseResourceURI,\n  resourceToString,\n} from '../components/ResourcePicker/utils';\nimport {\n  AzureDataSourceJsonData,\n  AzureGraphResponse,\n  AzureMetricResource,\n  AzureMonitorLocations,\n  AzureMonitorQuery,\n  AzureResourceGraphOptions,\n  AzureResourceSummaryItem,\n  RawAzureResourceGroupItem,\n  RawAzureResourceItem,\n  RawAzureSubscriptionItem,\n} from '../types';\nimport { routeNames } from '../utils/common';\n\nconst RESOURCE_GRAPH_URL = '/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01';\n\nconst logsSupportedResourceTypesKusto = logsResourceTypes.map((v) => `\"${v}\"`).join(',');\n\nexport type ResourcePickerQueryType = 'logs' | 'metrics';\n\nexport default class ResourcePickerData extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  private resourcePath: string;\n  resultLimit = 200;\n  azureMonitorDatasource;\n  supportedMetricNamespaces = '';\n  logLocationsMap: Map<string, AzureMonitorLocations> = new Map();\n  logLocations: string[] = [];\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    azureMonitorDatasource: AzureMonitorDatasource\n  ) {\n    super(instanceSettings);\n    this.resourcePath = `${routeNames.resourceGraph}`;\n    this.azureMonitorDatasource = azureMonitorDatasource;\n  }\n\n  async fetchInitialRows(\n    type: ResourcePickerQueryType,\n    currentSelection?: AzureMetricResource[]\n  ): Promise<ResourceRowGroup> {\n    const subscriptions = await this.getSubscriptions();\n\n    if (this.logLocationsMap.size === 0) {\n      this.logLocationsMap = await this.getLogsLocations(subscriptions);\n      this.logLocations = Array.from(this.logLocationsMap.values()).map((location) => `\"${location.name}\"`);\n    }\n\n    if (!currentSelection) {\n      return subscriptions;\n    }\n\n    let resources = subscriptions;\n    const promises = currentSelection.map((selection) => async () => {\n      if (selection.subscription) {\n        const resourceGroupURI = `/subscriptions/${selection.subscription}/resourceGroups/${selection.resourceGroup}`;\n\n        if (selection.resourceGroup && !findRow(resources, resourceGroupURI)) {\n          const resourceGroups = await this.getResourceGroupsBySubscriptionId(selection.subscription, type);\n          resources = addResources(resources, `/subscriptions/${selection.subscription}`, resourceGroups);\n        }\n\n        const resourceURI = resourceToString(selection);\n        if (selection.resourceName && !findRow(resources, resourceURI)) {\n          const resourcesForResourceGroup = await this.getResourcesForResourceGroup(resourceGroupURI, type);\n          resources = addResources(resources, resourceGroupURI, resourcesForResourceGroup);\n        }\n      }\n    });\n\n    for (const promise of promises) {\n      // Fetch resources one by one, avoiding re-fetching the same resource\n      // and race conditions updating the resources array\n      await promise();\n    }\n\n    return resources;\n  }\n\n  async fetchAndAppendNestedRow(\n    rows: ResourceRowGroup,\n    parentRow: ResourceRow,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    const nestedRows =\n      parentRow.type === ResourceRowType.Subscription\n        ? await this.getResourceGroupsBySubscriptionId(parentRow.id, type)\n        : await this.getResourcesForResourceGroup(parentRow.id, type);\n\n    return addResources(rows, parentRow.uri, nestedRows);\n  }\n\n  search = async (searchPhrase: string, searchType: ResourcePickerQueryType): Promise<ResourceRowGroup> => {\n    let searchQuery = 'resources';\n    if (searchType === 'logs') {\n      searchQuery += `\n      | union resourcecontainers`;\n    }\n    searchQuery += `\n        | where id contains \"${searchPhrase}\"\n        ${await this.filterByType(searchType)}\n        | order by tolower(name) asc\n        | limit ${this.resultLimit}\n      `;\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(searchQuery);\n    return response.map((item) => {\n      const parsedUri = parseResourceURI(item.id);\n      if (!parsedUri || !(parsedUri.resourceName || parsedUri.resourceGroup || parsedUri.subscription)) {\n        throw new Error('unable to fetch resource details');\n      }\n      let id = parsedUri.subscription ?? '';\n      let type = ResourceRowType.Subscription;\n      if (parsedUri.resourceName) {\n        id = parsedUri.resourceName;\n        type = ResourceRowType.Resource;\n      } else if (parsedUri.resourceGroup) {\n        id = parsedUri.resourceGroup;\n        type = ResourceRowType.ResourceGroup;\n      }\n      return {\n        name: item.name,\n        id,\n        uri: item.id,\n        resourceGroupName: item.resourceGroup,\n        type,\n        typeLabel: resourceTypeDisplayNames[item.type] || item.type,\n        location: this.logLocationsMap.get(item.location)?.displayName || item.location,\n      };\n    });\n  };\n\n  // private\n  async getSubscriptions(): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n    | join kind=inner (\n              ResourceContainers\n                | where type == 'microsoft.resources/subscriptions'\n                | project subscriptionName=name, subscriptionURI=id, subscriptionId\n              ) on subscriptionId\n    | summarize count() by subscriptionName, subscriptionURI, subscriptionId\n    | order by subscriptionName desc\n  `;\n\n    let resources: RawAzureSubscriptionItem[] = [];\n\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureSubscriptionItem[]>(query, 1, options);\n      if (!resourceResponse.data.length) {\n        throw new Error('No subscriptions were found');\n      }\n      resources = resources.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resources.map((subscription) => ({\n      name: subscription.subscriptionName,\n      id: subscription.subscriptionId,\n      uri: `/subscriptions/${subscription.subscriptionId}`,\n      typeLabel: 'Subscription',\n      type: ResourceRowType.Subscription,\n      children: [],\n    }));\n  }\n\n  async getResourceGroupsBySubscriptionId(\n    subscriptionId: string,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    const query = `\n    resources\n     | join kind=inner (\n       ResourceContainers\n       | where type == 'microsoft.resources/subscriptions/resourcegroups'\n       | project resourceGroupURI=id, resourceGroupName=name, resourceGroup, subscriptionId\n     ) on resourceGroup, subscriptionId\n\n     ${await this.filterByType(type)}\n     | where subscriptionId == '${subscriptionId}'\n     | summarize count() by resourceGroupName, resourceGroupURI\n     | order by resourceGroupURI asc`;\n\n    let resourceGroups: RawAzureResourceGroupItem[] = [];\n    let allFetched = false;\n    let $skipToken = undefined;\n    while (!allFetched) {\n      // The response may include several pages\n      let options: Partial<AzureResourceGraphOptions> = {};\n      if ($skipToken) {\n        options = {\n          $skipToken,\n        };\n      }\n      const resourceResponse = await this.makeResourceGraphRequest<RawAzureResourceGroupItem[]>(query, 1, options);\n      resourceGroups = resourceGroups.concat(resourceResponse.data);\n      $skipToken = resourceResponse.$skipToken;\n      allFetched = !$skipToken;\n    }\n\n    return resourceGroups.map((r) => {\n      const parsedUri = parseResourceURI(r.resourceGroupURI);\n      if (!parsedUri || !parsedUri.resourceGroup) {\n        throw new Error('unable to fetch resource groups');\n      }\n      return {\n        name: r.resourceGroupName,\n        uri: r.resourceGroupURI,\n        id: parsedUri.resourceGroup,\n        type: ResourceRowType.ResourceGroup,\n        typeLabel: 'Resource Group',\n        children: [],\n      };\n    });\n  }\n\n  async getResourcesForResourceGroup(\n    resourceGroupId: string,\n    type: ResourcePickerQueryType\n  ): Promise<ResourceRowGroup> {\n    if (!this.logLocations) {\n      return [];\n    }\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where id hasprefix \"${resourceGroupId}\"\n      ${await this.filterByType(type)} and location in (${this.logLocations})\n    `);\n\n    return response.map((item) => {\n      const parsedUri = parseResourceURI(item.id);\n      if (!parsedUri || !parsedUri.resourceName) {\n        throw new Error('unable to fetch resource details');\n      }\n      return {\n        name: item.name,\n        id: parsedUri.resourceName,\n        uri: item.id,\n        resourceGroupName: item.resourceGroup,\n        type: ResourceRowType.Resource,\n        typeLabel: resourceTypeDisplayNames[item.type] || item.type,\n        locationDisplayName: this.logLocationsMap.get(item.location)?.displayName || item.location,\n        location: item.location,\n      };\n    });\n  }\n\n  // used to make the select resource button that launches the resource picker show a nicer file path to users\n  async getResourceURIDisplayProperties(resourceURI: string): Promise<AzureMetricResource> {\n    const { subscription, resourceGroup, resourceName } = parseResourceDetails(resourceURI) ?? {};\n\n    if (!subscription) {\n      throw new Error('Invalid resource URI passed');\n    }\n\n    // resourceGroupURI and resourceURI could be invalid values, but that's okay because the join\n    // will just silently fail as expected\n    const subscriptionURI = `/subscriptions/${subscription}`;\n    const resourceGroupURI = `${subscriptionURI}/resourceGroups/${resourceGroup}`;\n\n    const query = `\n    resourcecontainers\n    | where type == \"microsoft.resources/subscriptions\"\n    | where id =~ \"${subscriptionURI}\"\n    | project subscriptionName=name, subscriptionId\n\n    | join kind=leftouter (\n      resourcecontainers            \n            | where type == \"microsoft.resources/subscriptions/resourcegroups\"\n            | where id =~ \"${resourceGroupURI}\"\n            | project resourceGroupName=name, resourceGroup, subscriptionId\n        ) on subscriptionId\n\n        | join kind=leftouter (\n          resources\n            | where id =~ \"${resourceURI}\"\n            | project resourceName=name, subscriptionId\n        ) on subscriptionId\n\n        | project subscriptionName, resourceGroupName, resourceName\n    `;\n\n    const { data: response } = await this.makeResourceGraphRequest<AzureResourceSummaryItem[]>(query);\n\n    if (!response.length) {\n      throw new Error('unable to fetch resource details');\n    }\n\n    const { subscriptionName, resourceGroupName, resourceName: responseResourceName } = response[0];\n    // if the name is undefined it could be because the id is undefined or because we are using a template variable.\n    // Either way we can use it as a fallback. We don't really want to interpolate these variables because we want\n    // to show the user when they are using template variables `$sub/$rg/$resource`\n    return {\n      subscription: subscriptionName || subscription,\n      resourceGroup: resourceGroupName || resourceGroup,\n      resourceName: responseResourceName || resourceName,\n    };\n  }\n\n  async getResourceURIFromWorkspace(workspace: string) {\n    const { data: response } = await this.makeResourceGraphRequest<RawAzureResourceItem[]>(`\n      resources\n      | where properties['customerId'] == \"${workspace}\"\n      | project id\n    `);\n\n    if (!response.length) {\n      throw new Error('unable to find resource for workspace ' + workspace);\n    }\n\n    return response[0].id;\n  }\n\n  async makeResourceGraphRequest<T = unknown>(\n    query: string,\n    maxRetries = 1,\n    reqOptions?: Partial<AzureResourceGraphOptions>\n  ): Promise<AzureGraphResponse<T>> {\n    try {\n      return await this.postResource(this.resourcePath + RESOURCE_GRAPH_URL, {\n        query: query,\n        options: {\n          resultFormat: 'objectArray',\n          ...reqOptions,\n        },\n      });\n    } catch (error) {\n      if (maxRetries > 0) {\n        return this.makeResourceGraphRequest(query, maxRetries - 1);\n      }\n\n      throw error;\n    }\n  }\n\n  private filterByType = async (t: ResourcePickerQueryType) => {\n    if (this.supportedMetricNamespaces === '' && t !== 'logs') {\n      await this.fetchAllNamespaces();\n    }\n    return t === 'logs'\n      ? `| where type in (${logsSupportedResourceTypesKusto})`\n      : `| where type in (${this.supportedMetricNamespaces})`;\n  };\n\n  private async fetchAllNamespaces() {\n    const subscriptions = await this.getSubscriptions();\n    let supportedMetricNamespaces: string[] = [];\n    for await (const subscription of subscriptions) {\n      const namespaces = await this.azureMonitorDatasource.getMetricNamespaces(\n        {\n          resourceUri: `/subscriptions/${subscription.id}`,\n        },\n        true\n      );\n      if (namespaces) {\n        const namespaceVals = namespaces.map((namespace) => `\"${namespace.value.toLocaleLowerCase()}\"`);\n        supportedMetricNamespaces = supportedMetricNamespaces.concat(namespaceVals);\n      }\n    }\n\n    if (supportedMetricNamespaces.length === 0) {\n      throw new Error(\n        'Unable to resolve a list of valid metric namespaces. Validate the datasource configuration is correct and required permissions have been granted for all subscriptions. Grafana requires at least the Reader role to be assigned.'\n      );\n    }\n    this.supportedMetricNamespaces = uniq(supportedMetricNamespaces).join(',');\n  }\n\n  async getLogsLocations(subscriptions: ResourceRowGroup): Promise<Map<string, AzureMonitorLocations>> {\n    const subscriptionIds = subscriptions.map((sub) => sub.id);\n    const locations = await this.azureMonitorDatasource.getLocations(subscriptionIds);\n    const insightsProvider = await this.azureMonitorDatasource.getProvider('Microsoft.Insights');\n    const logsProvider = insightsProvider?.resourceTypes.find((provider) => provider.resourceType === 'logs');\n\n    if (!logsProvider) {\n      return locations;\n    }\n\n    const logsLocations = logsProvider.locations.map((location) => ({\n      displayName: location,\n      name: '',\n      supportsLogs: true,\n    }));\n\n    const logLocationsMap = new Map<string, AzureMonitorLocations>();\n\n    for (const logLocation of logsLocations) {\n      const name =\n        Array.from(locations.values()).find((location) => logLocation.displayName === location.displayName)?.name || '';\n\n      if (name !== '') {\n        logLocationsMap.set(name, { ...logLocation, name });\n      }\n    }\n\n    return logLocationsMap;\n  }\n\n  parseRows(resources: Array<string | AzureMetricResource>): ResourceRow[] {\n    const resourceObjs = parseMultipleResourceDetails(resources);\n    const newSelectedRows: ResourceRow[] = [];\n    resourceObjs.forEach((resource, i) => {\n      let id = resource.resourceName;\n      let name = resource.resourceName;\n      let rtype = ResourceRowType.Resource;\n      if (!id) {\n        id = resource.resourceGroup;\n        name = resource.resourceGroup;\n        rtype = ResourceRowType.ResourceGroup;\n        if (!id) {\n          id = resource.subscription;\n          name = resource.subscription;\n          rtype = ResourceRowType.Subscription;\n        }\n      }\n      newSelectedRows.push({\n        id: id ?? '',\n        name: name ?? '',\n        type: rtype,\n        uri: resourceToString(resource),\n        typeLabel:\n          resourceTypeDisplayNames[resource.metricNamespace?.toLowerCase() ?? ''] ?? resource.metricNamespace ?? '',\n        locationDisplayName: this.logLocationsMap.get(resource.region ?? '')?.displayName || resource.region,\n        location: resource.region,\n      });\n    });\n    return newSelectedRows;\n  }\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../types';\n\n// The old Angular annotations editor put some properties (rawQuery, workspace, subscription)\n// on the root annotation object, rather than down in the 'targets' query value\n// This migration moves them to a Log Analytics query compatible with the React query editor\n// The old Angular annotations editor did not support any other query types.\nexport default function migrateAnnotation(annotation: AnnotationQuery<AzureMonitorQuery>) {\n  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;\n  const oldWorkspace = typeof annotation.workspace === 'string' ? annotation.workspace : null;\n\n  if (!(oldQuery && oldWorkspace && !annotation.target?.azureLogAnalytics?.query)) {\n    return annotation;\n  }\n\n  const newQuery: AzureMonitorQuery = {\n    ...(annotation.target ?? {}),\n    refId: annotation.target?.refId ?? 'Anno',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: oldQuery,\n      resources: [oldWorkspace],\n    },\n  };\n\n  return {\n    ...annotation,\n    rawQuery: undefined,\n    workspace: undefined,\n    subscription: undefined,\n    queryType: undefined,\n    target: newQuery,\n  };\n}\n","import { config } from '@grafana/runtime';\n\nimport { isGUIDish } from './components/ResourcePicker/utils';\nimport DataSource from './datasource';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport {\n  AppInsightsGroupByQuery,\n  AppInsightsMetricNameQuery,\n  GrafanaTemplateVariableQuery,\n  MetricNamespaceQuery,\n  MetricNamesQuery,\n  ResourceGroupsQuery,\n  ResourceNamesQuery,\n  SubscriptionsQuery,\n  WorkspacesQuery,\n} from './types/templateVariables';\n\n/* \n  Grafana Template Variable Functions\n  ex: Subscriptions()\n\n  These are helper functions we have created and exposed to users to make the writing of template variables easier. \n  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function \n  or if it's a KQL-type query\n*/\n\nexport const grafanaTemplateVariableFnMatches = (query: string) => {\n  return {\n    subscriptions: query.match(/^Subscriptions\\(\\)/i),\n    resourceGroups: query.match(/^ResourceGroups\\(\\)/i),\n    resourceGroupsWithSub: query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    namespaces: query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    namespacesWithSub: query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNames: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNamesWithSub: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    metricNamespace: query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamespaceWithSub: query.match(/^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNames: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamesWithSub: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\\(\\)/i),\n    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    workspacesQuery: query.match(/^workspaces\\(\\)/i),\n    workspacesQueryWithSub: query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i),\n  };\n};\n\nconst isGrafanaTemplateVariableFnQuery = (query: string) => {\n  const matches: Record<string, RegExpMatchArray | null> = grafanaTemplateVariableFnMatches(query);\n  return Object.keys(matches).some((key) => !!matches[key]);\n};\n\nconst createGrafanaTemplateVariableQuery = (rawQuery: string, datasource: DataSource): AzureMonitorQuery => {\n  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const createGrafanaTemplateVariableDetails = (): GrafanaTemplateVariableQuery => {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (matchesForQuery.appInsightsMetricNameQuery) {\n      const queryDetails: AppInsightsMetricNameQuery = { rawQuery, kind: 'AppInsightsMetricNameQuery' };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.appInsightsGroupByQuery) {\n      const queryDetails: AppInsightsGroupByQuery = {\n        kind: 'AppInsightsGroupByQuery',\n        rawQuery,\n        metricName: matchesForQuery.appInsightsGroupByQuery[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.subscriptions) {\n      const queryDetails: SubscriptionsQuery = {\n        kind: 'SubscriptionsQuery',\n        rawQuery,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroupsWithSub) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceGroupsWithSub[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.namespacesWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.namespacesWithSub[1],\n        resourceGroup: matchesForQuery.namespacesWithSub[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.namespaces && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.namespaces[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNamesWithSub) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceNamesWithSub[1],\n        resourceGroup: matchesForQuery.resourceNamesWithSub[2],\n        metricNamespace: matchesForQuery.resourceNamesWithSub[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNames && defaultSubscriptionId) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.resourceNames[1],\n        metricNamespace: matchesForQuery.resourceNames[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespaceWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamespaceWithSub[1],\n        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],\n        metricNamespace: matchesForQuery.metricNamespaceWithSub[3],\n        resourceName: matchesForQuery.metricNamespaceWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricNamespace[1],\n        metricNamespace: matchesForQuery.metricNamespace[2],\n        resourceName: matchesForQuery.metricNamespace[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNames && defaultSubscriptionId) {\n      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {\n        const queryDetails: MetricNamesQuery = {\n          kind: 'MetricNamesQuery',\n          rawQuery,\n          subscription: defaultSubscriptionId,\n          resourceGroup: matchesForQuery.metricNames[1],\n          metricNamespace: matchesForQuery.metricNames[2],\n          resourceName: matchesForQuery.metricNames[3],\n        };\n        return queryDetails;\n      }\n    }\n\n    if (matchesForQuery.metricNamesWithSub) {\n      const queryDetails: MetricNamesQuery = {\n        kind: 'MetricNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamesWithSub[1],\n        resourceGroup: matchesForQuery.metricNamesWithSub[2],\n        metricNamespace: matchesForQuery.metricNamesWithSub[3],\n        resourceName: matchesForQuery.metricNamesWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQueryWithSub) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim(),\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    // fallback\n    const queryDetails: SubscriptionsQuery = { kind: 'SubscriptionsQuery', rawQuery };\n    return queryDetails;\n  };\n\n  const query: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),\n    subscription: defaultSubscriptionId,\n  };\n  return query;\n};\n\nconst createLogAnalyticsTemplateVariableQuery = async (\n  rawQuery: string,\n  datasource: DataSource\n): Promise<AzureMonitorQuery> => {\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  let resource = '';\n  // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace\n  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land\n  if (rawQuery) {\n    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();\n    if (defaultWorkspaceId) {\n      const isWorkspaceGUID = isGUIDish(defaultWorkspaceId);\n      if (isWorkspaceGUID) {\n        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);\n      } else {\n        resource = defaultWorkspaceId;\n      }\n    } else {\n      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();\n      resource = maybeFirstWorkspace || '';\n    }\n  }\n\n  return {\n    refId: 'A',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: rawQuery,\n      resources: resource ? [resource] : [],\n    },\n    subscription: defaultSubscriptionId,\n  };\n};\n\nconst migrateGrafanaTemplateVariableFn = (query: AzureMonitorQuery) => {\n  const { queryType, grafanaTemplateVariableFn } = query;\n  if (queryType !== AzureQueryType.GrafanaTemplateVariableFn || !grafanaTemplateVariableFn) {\n    return query;\n  }\n\n  const migratedQuery: AzureMonitorQuery = {\n    ...query,\n  };\n  if ('subscription' in grafanaTemplateVariableFn) {\n    migratedQuery.subscription = grafanaTemplateVariableFn.subscription;\n  }\n  if ('resourceGroup' in grafanaTemplateVariableFn) {\n    migratedQuery.resourceGroup = grafanaTemplateVariableFn.resourceGroup;\n  }\n  if ('metricNamespace' in grafanaTemplateVariableFn) {\n    migratedQuery.namespace = grafanaTemplateVariableFn.metricNamespace;\n  }\n  if ('resourceName' in grafanaTemplateVariableFn) {\n    migratedQuery.resource = grafanaTemplateVariableFn.resourceName;\n  }\n\n  switch (grafanaTemplateVariableFn.kind) {\n    case 'SubscriptionsQuery':\n      migratedQuery.queryType = AzureQueryType.SubscriptionsQuery;\n      break;\n    case 'ResourceGroupsQuery':\n      migratedQuery.queryType = AzureQueryType.ResourceGroupsQuery;\n      break;\n    case 'ResourceNamesQuery':\n      migratedQuery.queryType = AzureQueryType.ResourceNamesQuery;\n      break;\n    case 'MetricNamespaceQuery':\n      migratedQuery.queryType = AzureQueryType.NamespacesQuery;\n      break;\n    case 'MetricDefinitionsQuery':\n      migratedQuery.queryType = AzureQueryType.NamespacesQuery;\n      break;\n    case 'MetricNamesQuery':\n      migratedQuery.queryType = AzureQueryType.MetricNamesQuery;\n      break;\n    case 'WorkspacesQuery':\n      migratedQuery.queryType = AzureQueryType.WorkspacesQuery;\n      break;\n  }\n\n  return migratedQuery;\n};\n\nexport const migrateStringQueriesToObjectQueries = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  // no need to migrate already migrated queries\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  return isGrafanaTemplateVariableFnQuery(rawQuery)\n    ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource)\n    : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);\n};\n\nexport const migrateQuery = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  let query = await migrateStringQueriesToObjectQueries(rawQuery, options);\n\n  if (\n    !config.featureToggles.azLegacyTemplateVariables &&\n    query.queryType === AzureQueryType.GrafanaTemplateVariableFn\n  ) {\n    query = migrateGrafanaTemplateVariableFn(query);\n  }\n\n  return query;\n};\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\n\nimport DataSource from '../../datasource';\nimport { migrateStringQueriesToObjectQueries } from '../../grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\n\nconst GrafanaTemplateVariableFnInput = ({\n  query,\n  updateQuery,\n  datasource,\n}: {\n  query: AzureMonitorQuery;\n  updateQuery: (val: AzureMonitorQuery) => void;\n  datasource: DataSource;\n}) => {\n  const [inputVal, setInputVal] = useState('');\n\n  useEffect(() => {\n    setInputVal(query.grafanaTemplateVariableFn?.rawQuery || '');\n  }, [query.grafanaTemplateVariableFn?.rawQuery]);\n\n  const onRunQuery = useCallback(\n    (newQuery: string) => {\n      migrateStringQueriesToObjectQueries(newQuery, { datasource }).then((updatedQuery) => {\n        if (updatedQuery.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n          updateQuery(updatedQuery);\n        } else {\n          updateQuery({\n            ...query,\n            grafanaTemplateVariableFn: {\n              kind: 'UnknownQuery',\n              rawQuery: newQuery,\n            },\n          });\n        }\n      });\n    },\n    [datasource, query, updateQuery]\n  );\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputVal(event.target.value);\n  };\n\n  return (\n    <InlineField label=\"Grafana template variable function\">\n      <Input\n        placeholder={'type a grafana template variable function, ex: Subscriptions()'}\n        value={inputVal}\n        onChange={onChange}\n        onBlur={() => onRunQuery(inputVal)}\n      />\n    </InlineField>\n  );\n};\n\nexport default GrafanaTemplateVariableFnInput;\n","import { get, isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Alert, InlineField, Select } from '@grafana/ui';\n\nimport DataSource from '../../datasource';\nimport { selectors } from '../../e2e/selectors';\nimport { migrateQuery } from '../../grafanaTemplateVariableFns';\nimport { AzureMonitorOption, AzureMonitorQuery, AzureQueryType } from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport { Space } from '../Space';\n\nimport GrafanaTemplateVariableFnInput from './GrafanaTemplateVariableFn';\n\ntype Props = {\n  query: AzureMonitorQuery | string;\n  onChange: (query: AzureMonitorQuery) => void;\n  datasource: DataSource;\n};\n\nconst removeOption: SelectableValue = { label: '-', value: '' };\n\nconst VariableEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [\n    { label: 'Subscriptions', value: AzureQueryType.SubscriptionsQuery },\n    { label: 'Resource Groups', value: AzureQueryType.ResourceGroupsQuery },\n    { label: 'Namespaces', value: AzureQueryType.NamespacesQuery },\n    { label: 'Regions', value: AzureQueryType.LocationsQuery },\n    { label: 'Resource Names', value: AzureQueryType.ResourceNamesQuery },\n    { label: 'Metric Names', value: AzureQueryType.MetricNamesQuery },\n    { label: 'Workspaces', value: AzureQueryType.WorkspacesQuery },\n    { label: 'Resource Graph', value: AzureQueryType.AzureResourceGraph },\n    { label: 'Logs', value: AzureQueryType.LogAnalytics },\n  ];\n  if (typeof props.query === 'object' && props.query.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n    // Add the option for the GrafanaTemplateVariableFn only if it's already in use\n    AZURE_QUERY_VARIABLE_TYPE_OPTIONS.push({\n      label: 'Grafana Query Function',\n      value: AzureQueryType.GrafanaTemplateVariableFn,\n    });\n  }\n  const [variableOptionGroup, setVariableOptionGroup] = useState<{ label: string; options: AzureMonitorOption[] }>({\n    label: 'Template Variables',\n    options: [],\n  });\n  const [requireSubscription, setRequireSubscription] = useState(false);\n  const [hasResourceGroup, setHasResourceGroup] = useState(false);\n  const [hasNamespace, setHasNamespace] = useState(false);\n  const [hasRegion, setHasRegion] = useState(false);\n  const [requireResourceGroup, setRequireResourceGroup] = useState(false);\n  const [requireNamespace, setRequireNamespace] = useState(false);\n  const [requireResource, setRequireResource] = useState(false);\n  const [subscriptions, setSubscriptions] = useState<SelectableValue[]>([]);\n  const [resourceGroups, setResourceGroups] = useState<SelectableValue[]>([]);\n  const [namespaces, setNamespaces] = useState<SelectableValue[]>([]);\n  const [resources, setResources] = useState<SelectableValue[]>([]);\n  const [regions, setRegions] = useState<SelectableValue[]>([]);\n  const [errorMessage, setError] = useLastError();\n  const queryType = typeof query === 'string' ? '' : query.queryType;\n\n  useEffect(() => {\n    migrateQuery(query, { datasource: datasource }).then((migratedQuery) => {\n      if (!isEqual(query, migratedQuery)) {\n        onChange(migratedQuery);\n      }\n    });\n  }, [query, datasource, onChange]);\n\n  useEffect(() => {\n    setRequireSubscription(false);\n    setHasResourceGroup(false);\n    setHasNamespace(false);\n    setRequireResourceGroup(false);\n    setRequireNamespace(false);\n    setRequireResource(false);\n    switch (queryType) {\n      case AzureQueryType.ResourceGroupsQuery:\n      case AzureQueryType.WorkspacesQuery:\n        setRequireSubscription(true);\n        break;\n      case AzureQueryType.NamespacesQuery:\n        setRequireSubscription(true);\n        setHasResourceGroup(true);\n        break;\n      case AzureQueryType.ResourceNamesQuery:\n        setRequireSubscription(true);\n        setHasResourceGroup(true);\n        setHasNamespace(true);\n        setHasRegion(true);\n        break;\n      case AzureQueryType.MetricNamesQuery:\n        setRequireSubscription(true);\n        setRequireResourceGroup(true);\n        setRequireNamespace(true);\n        setRequireResource(true);\n        break;\n      case AzureQueryType.LocationsQuery:\n        setRequireSubscription(true);\n        break;\n    }\n  }, [queryType]);\n\n  useEffect(() => {\n    const options: AzureMonitorOption[] = [];\n    datasource.getVariablesRaw().forEach((v) => {\n      if (get(v, 'query.queryType') !== queryType) {\n        options.push({ label: v.label || v.name, value: `$${v.name}` });\n      }\n    });\n    setVariableOptionGroup({\n      label: 'Template Variables',\n      options,\n    });\n  }, [datasource, queryType]);\n\n  useEffectOnce(() => {\n    datasource.getSubscriptions().then((subs) => {\n      setSubscriptions(subs.map((s) => ({ label: s.text, value: s.value })));\n    });\n  });\n\n  const subscription = typeof query === 'object' && query.subscription;\n  useEffect(() => {\n    if (subscription) {\n      datasource.getResourceGroups(subscription).then((rgs) => {\n        setResourceGroups(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription]);\n\n  const resourceGroup = (typeof query === 'object' && query.resourceGroup) || '';\n  useEffect(() => {\n    if (subscription) {\n      datasource.getMetricNamespaces(subscription, resourceGroup).then((rgs) => {\n        setNamespaces(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription, resourceGroup]);\n\n  useEffect(() => {\n    if (subscription) {\n      datasource.azureMonitorDatasource.getLocations([subscription]).then((rgs) => {\n        const regions: SelectableValue[] = [];\n        rgs.forEach((r) => regions.push({ label: r.displayName, value: r.name }));\n        setRegions(regions);\n      });\n    }\n  }, [datasource, subscription, resourceGroup]);\n\n  const namespace = (typeof query === 'object' && query.namespace) || '';\n  useEffect(() => {\n    if (subscription) {\n      datasource.getResourceNames(subscription, resourceGroup, namespace).then((rgs) => {\n        setResources(rgs.map((s) => ({ label: s.text, value: s.value })));\n      });\n    }\n  }, [datasource, subscription, resourceGroup, namespace]);\n\n  if (typeof query === 'string') {\n    // still migrating the query\n    return null;\n  }\n\n  const onQueryTypeChange = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      onChange({\n        ...query,\n        queryType: selectableValue.value,\n        subscription: undefined,\n        resourceGroup: undefined,\n        namespace: undefined,\n        resource: undefined,\n      });\n    }\n  };\n\n  const onChangeSubscription = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      onChange({\n        ...query,\n        subscription: selectableValue.value,\n        resourceGroup: undefined,\n        namespace: undefined,\n        resource: undefined,\n      });\n    }\n  };\n\n  const onChangeResourceGroup = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      resourceGroup: selectableValue.value,\n      namespace: undefined,\n      resource: undefined,\n    });\n  };\n\n  const onChangeNamespace = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      namespace: selectableValue.value,\n      resource: undefined,\n    });\n  };\n\n  const onChangeRegion = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      region: selectableValue.value,\n    });\n  };\n\n  const onChangeResource = (selectableValue: SelectableValue) => {\n    onChange({\n      ...query,\n      resource: selectableValue.value,\n    });\n  };\n\n  const onQueryChange = (queryChange: AzureMonitorQuery) => {\n    onChange(queryChange);\n  };\n\n  return (\n    <>\n      <InlineField\n        label=\"Select query type\"\n        labelWidth={20}\n        data-testid={selectors.components.variableEditor.queryType.input}\n      >\n        <Select\n          aria-label=\"select query type\"\n          onChange={onQueryTypeChange}\n          options={AZURE_QUERY_VARIABLE_TYPE_OPTIONS}\n          width={25}\n          value={queryType}\n        />\n      </InlineField>\n      {query.queryType === AzureQueryType.LogAnalytics && (\n        <>\n          <LogsQueryEditor\n            subscriptionId={query.subscription}\n            query={query}\n            datasource={datasource}\n            onChange={onQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n            hideFormatAs={true}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n      {query.queryType === AzureQueryType.GrafanaTemplateVariableFn && (\n        <GrafanaTemplateVariableFnInput query={query} updateQuery={props.onChange} datasource={datasource} />\n      )}\n      {requireSubscription && (\n        <InlineField\n          label=\"Select subscription\"\n          labelWidth={20}\n          data-testid={selectors.components.variableEditor.subscription.input}\n        >\n          <Select\n            aria-label=\"select subscription\"\n            onChange={onChangeSubscription}\n            options={subscriptions.concat(variableOptionGroup)}\n            width={25}\n            value={query.subscription || null}\n          />\n        </InlineField>\n      )}\n      {(requireResourceGroup || hasResourceGroup) && (\n        <InlineField\n          label=\"Select resource group\"\n          labelWidth={20}\n          data-testid={selectors.components.variableEditor.resourceGroup.input}\n        >\n          <Select\n            aria-label=\"select resource group\"\n            onChange={onChangeResourceGroup}\n            options={\n              requireResourceGroup\n                ? resourceGroups.concat(variableOptionGroup)\n                : resourceGroups.concat(variableOptionGroup, removeOption)\n            }\n            width={25}\n            value={query.resourceGroup || null}\n            placeholder={requireResourceGroup ? undefined : 'Optional'}\n          />\n        </InlineField>\n      )}\n      {(requireNamespace || hasNamespace) && (\n        <InlineField\n          label=\"Select namespace\"\n          labelWidth={20}\n          data-testid={selectors.components.variableEditor.namespace.input}\n        >\n          <Select\n            aria-label=\"select namespace\"\n            onChange={onChangeNamespace}\n            options={\n              requireNamespace\n                ? namespaces.concat(variableOptionGroup)\n                : namespaces.concat(variableOptionGroup, removeOption)\n            }\n            width={25}\n            value={query.namespace || null}\n            placeholder={requireNamespace ? undefined : 'Optional'}\n          />\n        </InlineField>\n      )}\n      {hasRegion && (\n        <InlineField\n          label=\"Select region\"\n          labelWidth={20}\n          data-testid={selectors.components.variableEditor.region.input}\n        >\n          <Select\n            aria-label=\"select region\"\n            onChange={onChangeRegion}\n            options={regions.concat(variableOptionGroup)}\n            width={25}\n            value={query.region || null}\n            placeholder=\"Optional\"\n          />\n        </InlineField>\n      )}\n      {requireResource && (\n        <InlineField\n          label=\"Select resource\"\n          labelWidth={20}\n          data-testid={selectors.components.variableEditor.resource.input}\n        >\n          <Select\n            aria-label=\"select resource\"\n            onChange={onChangeResource}\n            options={resources.concat(variableOptionGroup)}\n            width={25}\n            value={query.resource || null}\n          />\n        </InlineField>\n      )}\n      {query.queryType === AzureQueryType.AzureResourceGraph && (\n        <>\n          <ArgQueryEditor\n            subscriptionId={datasource.azureLogAnalyticsDatasource.defaultSubscriptionId}\n            query={query}\n            datasource={datasource}\n            onChange={onQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VariableEditor;\n","import { from, lastValueFrom, Observable } from 'rxjs';\n\nimport {\n  CustomVariableSupport,\n  DataQueryRequest,\n  DataQueryResponse,\n  MetricFindValue,\n  toDataFrame,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport VariableEditor from './components/VariableEditor/VariableEditor';\nimport DataSource from './datasource';\nimport { migrateQuery } from './grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport { GrafanaTemplateVariableQuery } from './types/templateVariables';\nimport messageFromError from './utils/messageFromError';\n\nexport class VariableSupport extends CustomVariableSupport<DataSource, AzureMonitorQuery> {\n  templateSrv = getTemplateSrv();\n\n  constructor(private readonly datasource: DataSource) {\n    super();\n    this.datasource = datasource;\n    this.query = this.query.bind(this);\n    this.templateSrv = getTemplateSrv();\n  }\n\n  editor = VariableEditor;\n\n  hasValue(...values: string[]) {\n    return values.every((v) => !!this.templateSrv.replace(v));\n  }\n\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const promisedResults = async () => {\n      const queryObj = await migrateQuery(request.targets[0], { datasource: this.datasource });\n\n      try {\n        switch (queryObj.queryType) {\n          case AzureQueryType.SubscriptionsQuery:\n            const res = await this.datasource.getSubscriptions();\n            return {\n              data: res?.length ? [toDataFrame(res)] : [],\n            };\n          case AzureQueryType.ResourceGroupsQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getResourceGroups(queryObj.subscription);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.NamespacesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getMetricNamespaces(queryObj.subscription, queryObj.resourceGroup);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.ResourceNamesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getResourceNames(\n                queryObj.subscription,\n                queryObj.resourceGroup,\n                queryObj.namespace,\n                queryObj.region\n              );\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.MetricNamesQuery:\n            if (\n              queryObj.subscription &&\n              queryObj.resourceGroup &&\n              queryObj.namespace &&\n              queryObj.resource &&\n              this.hasValue(queryObj.subscription, queryObj.resourceGroup, queryObj.namespace, queryObj.resource)\n            ) {\n              const rgs = await this.datasource.getMetricNames(\n                queryObj.subscription,\n                queryObj.resourceGroup,\n                queryObj.namespace,\n                queryObj.resource\n              );\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.WorkspacesQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const rgs = await this.datasource.getAzureLogAnalyticsWorkspaces(queryObj.subscription);\n              return {\n                data: rgs?.length ? [toDataFrame(rgs)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.GrafanaTemplateVariableFn:\n            if (queryObj.grafanaTemplateVariableFn) {\n              const templateVariablesResults = await this.callGrafanaTemplateVariableFn(\n                queryObj.grafanaTemplateVariableFn\n              );\n              return {\n                data: templateVariablesResults?.length ? [toDataFrame(templateVariablesResults)] : [],\n              };\n            }\n            return { data: [] };\n          case AzureQueryType.LocationsQuery:\n            if (queryObj.subscription && this.hasValue(queryObj.subscription)) {\n              const locationMap = await this.datasource.azureMonitorDatasource.getLocations([queryObj.subscription]);\n              const res: Array<{ text: string; value: string }> = [];\n              locationMap.forEach((loc) => {\n                res.push({ text: loc.displayName, value: loc.name });\n              });\n              return {\n                data: res?.length ? [toDataFrame(res)] : [],\n              };\n            }\n          default:\n            request.targets[0] = queryObj;\n            const queryResp = await lastValueFrom(this.datasource.query(request));\n            return {\n              data: queryResp.data,\n              error: queryResp.error ? new Error(messageFromError(queryResp.error)) : undefined,\n            };\n        }\n      } catch (err) {\n        return { data: [], error: new Error(messageFromError(err)) };\n      }\n    };\n\n    return from(promisedResults());\n  }\n\n  // Deprecated\n  callGrafanaTemplateVariableFn(query: GrafanaTemplateVariableQuery): Promise<MetricFindValue[]> | null {\n    if (query.kind === 'SubscriptionsQuery') {\n      return this.datasource.getSubscriptions();\n    }\n\n    if (query.kind === 'ResourceGroupsQuery') {\n      return this.datasource.getResourceGroups(this.replaceVariable(query.subscription));\n    }\n\n    if (query.kind === 'ResourceNamesQuery') {\n      return this.datasource.getResourceNames(\n        this.replaceVariable(query.subscription),\n        this.replaceVariable(query.resourceGroup),\n        this.replaceVariable(query.metricNamespace)\n      );\n    }\n\n    if (query.kind === 'MetricNamespaceQuery') {\n      return this.datasource.azureMonitorDatasource.getMetricNamespaces(query, true);\n    }\n\n    if (query.kind === 'MetricNamesQuery') {\n      return this.datasource.azureMonitorDatasource.getMetricNames(query);\n    }\n\n    if (query.kind === 'WorkspacesQuery') {\n      return this.datasource.azureLogAnalyticsDatasource.getWorkspaces(this.replaceVariable(query.subscription));\n    }\n\n    return null;\n  }\n\n  replaceVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from './types';\nimport migrateAnnotation from './utils/migrateAnnotation';\nimport migrateQuery from './utils/migrateQuery';\nimport { VariableSupport } from './variables';\n\nexport default class Datasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  annotations = {\n    prepareAnnotation: migrateAnnotation,\n  };\n\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType]?: AzureMonitorDatasource | AzureLogAnalyticsDatasource | AzureResourceGraphDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings, this.azureMonitorDatasource);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    this.variables = new VariableSupport(this);\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    if (!item.queryType) {\n      return false;\n    }\n    const ds = this.pseudoDatasource[item.queryType];\n    return ds?.filterQuery?.(item) ?? true;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = migrateQuery(baseTarget);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  targetContainsTemplate(query: AzureMonitorQuery) {\n    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {\n      return true;\n    }\n\n    let subQuery;\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      subQuery = JSON.stringify(query.azureMonitor);\n    } else if (query.queryType === AzureQueryType.LogAnalytics) {\n      subQuery = JSON.stringify(query.azureLogAnalytics);\n    } else if (query.queryType === AzureQueryType.AzureResourceGraph) {\n      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);\n    }\n\n    return !!subQuery && this.templateSrv.containsTemplate(subQuery);\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.templateSrv.replace(subscriptionId));\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup?: string) {\n    let url = `/subscriptions/${subscriptionId}`;\n    if (resourceGroup) {\n      url += `/resourceGroups/${resourceGroup};`;\n    }\n    return this.azureMonitorDatasource.getMetricNamespaces({ resourceUri: url }, true);\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup?: string, metricNamespace?: string, region?: string) {\n    return this.azureMonitorDatasource.getResourceNames({ subscriptionId, resourceGroup, metricNamespace, region });\n  }\n\n  getMetricNames(subscriptionId: string, resourceGroup: string, metricNamespace: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNames({\n      subscription: subscriptionId,\n      resourceGroup,\n      metricNamespace,\n      resourceName,\n    });\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return {\n        datasource: ds?.getRef(),\n        ...(ds?.applyTemplateVariables(query, scopedVars) ?? query),\n      };\n    });\n\n    return mapped;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getVariablesRaw() {\n    return this.templateSrv.getVariables();\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.GrafanaTemplateVariableFn:\n      return !!query.grafanaTemplateVariableFn;\n\n    default:\n      return false;\n  }\n}\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Loaded the first time a dashboard containing azure queries is loaded (not on every render)\n * Note: The queries used here are the ones pre-migration and pre-filterQuery\n *\n * This allows answering questions about:\n * - the adoption of the three query types (Azure Monitor, Azure Logs Analytics and Azure Resource Graph)\n * - stats about number of azure dashboards loaded, number of users\n * - stats about the grafana and plugins versions used by our users\n *\n * Dashboard: https://ops.grafana.net/d/Ad0pti0N/data-sources-adoption-tracking?orgId=1\n * Changelog:\n * - v9.1.0 : list of queries logged\n * - v9.1.2 : list removed in favour of stats, user_id removed\n */\nexport const trackAzureMonitorDashboardLoaded = (props: AzureMonitorDashboardLoadedProps) => {\n  reportInteraction('grafana_ds_azuremonitor_dashboard_loaded', props);\n};\n\nexport type AzureMonitorDashboardLoadedProps = {\n  grafana_version?: string;\n  dashboard_id: string;\n  org_id?: number;\n  /** number of non hidden queries of type Azure Monitor if any  */\n  azure_monitor_queries: number;\n  /** number of non hidden queries of type Azure Logs Analytics if any  */\n  azure_log_analytics_queries: number;\n  /** number of non hidden queries of type Azure Resource Graph if any  */\n  azure_resource_graph_queries: number;\n  /** number of hidden queries (not executed) of type Azure Monitor if any  */\n  azure_monitor_queries_hidden: number;\n  /** number of hidden queries (not executed) of type Azure Logs Analytics if any  */\n  azure_log_analytics_queries_hidden: number;\n  /** number of hidden queries (not executed) of type Azure Resource Graph if any  */\n  azure_resource_graph_queries_hidden: number;\n};\n","import { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport AzureMonitorQueryEditor from './components/QueryEditor';\nimport Datasource from './datasource';\nimport pluginJson from './plugin.json';\nimport { trackAzureMonitorDashboardLoaded } from './tracking';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(AzureMonitorQueryEditor);\n\n// Track dashboard loads to RudderStack\ngetAppEvents().subscribe<DashboardLoadedEvent<AzureMonitorQuery>>(\n  DashboardLoadedEvent,\n  ({ payload: { dashboardId, orgId, userId, grafanaVersion, queries } }) => {\n    const azureQueries = queries[pluginJson.id];\n    let stats = {\n      [AzureQueryType.AzureMonitor]: {\n        hidden: 0,\n        visible: 0,\n      },\n      [AzureQueryType.LogAnalytics]: {\n        hidden: 0,\n        visible: 0,\n      },\n      [AzureQueryType.AzureResourceGraph]: {\n        hidden: 0,\n        visible: 0,\n      },\n    };\n    azureQueries.forEach((query) => {\n      if (\n        query.queryType === AzureQueryType.AzureMonitor ||\n        query.queryType === AzureQueryType.LogAnalytics ||\n        query.queryType === AzureQueryType.AzureResourceGraph\n      ) {\n        stats[query.queryType][query.hide ? 'hidden' : 'visible']++;\n      }\n    });\n\n    if (azureQueries && azureQueries.length > 0) {\n      trackAzureMonitorDashboardLoaded({\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId,\n        azure_monitor_queries: stats[AzureQueryType.AzureMonitor].visible,\n        azure_log_analytics_queries: stats[AzureQueryType.LogAnalytics].visible,\n        azure_resource_graph_queries: stats[AzureQueryType.AzureResourceGraph].visible,\n        azure_monitor_queries_hidden: stats[AzureQueryType.AzureMonitor].hidden,\n        azure_log_analytics_queries_hidden: stats[AzureQueryType.LogAnalytics].hidden,\n        azure_resource_graph_queries_hidden: stats[AzureQueryType.AzureResourceGraph].hidden,\n      });\n    }\n  }\n);\n"],"names":["TimeGrainConverter","timeGrain","timeGrainUnit","timeIntervals","interval","unit","toMinutes","allowedTimeGrains","timeGrains","o","closest","intervalMs","i","duration","offset","value","text","ResponseParser","result","textFieldName","valueFieldName","list","metricNamespace","metricName","defaultAggTypes","metricData","v","metricAvailabilities","avail","metadataDimensions","dimension","locations","location","hasOption","options","findOptions","values","set","accum","item","option","toOption","addValueToOptions","variableOptionGroup","optionValues","m","p","convertTimeGrainsToMs","allowedTimeGrainsMs","tg","routeNames","interpolateVariable","variable","val","AzureQueryType","AzureCloud","concealed","getAuthType","config","getDefaultAzureCloud","getAzurePortalUrl","azureCloud","getAzureCloud","getSecret","secret","isCredentialsComplete","credentials","getCredentials","updateCredentials","selectors","Input","authTypeOptions","LABEL_WIDTH","AzureCredentialsForm","props","azureCloudOptions","onCredentialsChange","disabled","managedIdentityEnabled","onAuthTypeChange","selected","updated","onAzureCloudChange","onTenantIdChange","event","onClientIdChange","onClientSecretChange","onClientSecretReset","InlineField","Select","opt","Button","DefaultSubscription","subscriptions","getSubscriptions","onSubscriptionChange","onSubscriptionsChange","hasRequiredFields","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","onChange","azureClouds","MonitorConfig","updateOptions","setSubscriptions","subscriptionId","receivedSubscriptions","ConfigEditor","optionsFunc","query","err","error","Alert","messageFromElement","messageFromError","maybeAMessage","useLastError","errors","setErrors","addError","errorSource","errorsCopy","index","vSource","recentError","DEFAULT_LABEL_WIDTH","Field","labelWidth","inlineField","remainingProps","onQueryChange","multiSelect","handleChange","change","newQuery","c","CodeEditor","ERROR_SOURCE","selectSubscriptions","fetchedSubscriptions","currentSubscriptions","currentSubscription","querySubscriptions","commonSubscriptions","datasource","setError","results","Space","theme","styles","getStyles","stylesFactory","resources","renderAdvanced","isAdvancedOpen","setIsAdvancedOpen","Collapse","ResourceRowType","EntryIcon","isOpen","type","Icon","NestedEntry","entry","isSelected","isDisabled","isSelectable","level","scrollIntoView","onToggleCollapse","onSelectedChange","hasChildren","handleToggleCollapse","handleSelectedChanged","ev","checkboxId","IconButton","Checkbox","UrlBuilder","templateSrv","resource","urlArray","subscription","resourceGroup","resourceName","metricNamespaceProcessed","metricNamespaceArray","resourceNameProcessed","resourceNameArray","provider","parentResource","baseUrl","apiVersion","globalRegion","resourceUri","customNamespace","url","RESOURCE_URI_REGEX","parseNamespaceAndName","metricNamespaceAndName","stringArray","namespaceArray","nextElem","parseResourceURI","resourceURI","groups","metricNamespaceAndResource","parseMultipleResourceDetails","parseResourceDetails","res","resourcesToStrings","resourceToString","isGUIDish","input","compareNamespaceAndName","rowNamespace","rowName","resourceNamespace","matchURI","rowURI","targetParams","rowParams","findRows","rows","uris","uri","row","findRow","addResources","targetParentId","newResources","draftState","draftRow","setResources","parsedResource","NestedRow","selectedRows","requestNestedRows","onRowSelectedChange","selectableEntryTypes","disableRow","rowStatus","setRowStatus","onRowToggleCollapse","selectedRow","childRow","FadeTransition","LoadingPlaceholder","searchFn","searchFilter","setSearchFilter","debouncedSearch","searchPhrase","resourcePickerData","onApply","onCancel","queryType","selectionNotice","isLoading","setIsLoading","setRows","setSelectedRows","internalSelected","setInternalSelected","errorMessage","setErrorMessage","shouldShowLimitFlag","setShouldShowLimitFlag","selectionNoticeText","loadInitialData","useEffectOnce","isValid","r","sanitized","found","parentRow","nestedRows","handleSelectionChanged","newRes","newSelected","newInternalSelected","handleApply","handleSearch","searchWord","searchResults","ResourceField","pickerIsOpen","setPickerIsOpen","handleOpenPicker","closePicker","Modal","ResourceLabel","resourcesComponents","setResourcesComponents","FormattedResource","icon","items","onResourceChange","removeResource","addResource","Label","Tooltip","setKustoQuery","kustoQuery","setFormatAs","formatAs","FORMAT_OPTIONS","Deferred","resolve","reject","monacoPromiseRef","getPromise","promises","schema","monaco","editor","kusto","model","worker","handleEditorMount","migrateWorkspaceQueryToResourceQuery","isWorkspaceGUID","useMigrations","migrationError","setMigrationError","hideFormatAs","rowResourceNS","selectedRowSampleNs","resourceTypeDisplayNames","multiResourceCompatibleTypes","logsResourceTypes","onCommonPropChange","setCustomNamespace","selection","setMetricName","setAggregation","aggregation","setTimeGrain","setDimensionFilters","dimensions","appendDimensionFilter","operator","filters","existingFilters","removeDimensionFilter","indexToRemove","newFilters","setDimensionFilterValue","fieldName","newFilter","setTop","top","setLegendAlias","alias","aggregationOptions","useDimensionLabels","data","dimensionLabels","setDimensionLabels","labelsObj","labels","series","fields","label","prevLabels","newLabels","currentLabels","dimensionOptions","dimensionFilters","dimensionOperators","validDimensionOptions","t","dimensionFilter","onFieldChange","getValidDimensionOptions","selectedDimension","getValidFilterOptions","selectedFilter","filter","getValidMultiSelectOptions","selectedFilters","labelOptions","getValidOperators","selectedOperator","changedFunc","changed","properData","x","renderFilters","onDelete","e","setValue","handleBlur","metricNames","metricNamespaces","timeGrainOptions","autoInterval","baseTimeGrains","useAsyncState","asyncFn","dependencies","finalValue","getResourceGroupAndName","useMetricNamespaces","formatOptions","useMetricNames","defaultMetricMetadata","useMetricMetadata","metricMetadata","setMetricMetadata","metadata","aggregations","newAggregation","newTimeGrain","rawResults","selectedValue","metricsMetadata","supportMultipleResource","namespace","rowResource","selectedRowSample","QueryHeader","queryTypes","OLD_DEFAULT_DROPDOWN_VALUE","migrateQuery","workingQuery","migrateLogAnalyticsToFromTimes","migrateTimeGrains","migrateToDefaultNamespace","migrateDimensionToDimensionFilter","migrateDimensionFilterToArray","migrateDimensionToResourceObj","migrateResourceGroupAndName","migrateLogsResource","oldDimension","azureMonitorQuery","staticProps","hasFilter","oldFilter","details","isWellFormedUri","DEFAULT_QUERY","prepareQuery","withDefaults","migratedQuery","onChangeQuery","preparedQuery","QueryEditor","baseQuery","baseOnRunQuery","onRunQuery","EditorForQueryType","LogAnalyticsQuerystringBuilder","rawQueryString","defaultTimeField","queryString","macroRegexp","match","p1","p2","rawQuery","from","now","until","timeFieldArg","timeField","inputs","firstCommaIndex","field","templateVar","columns","timeIndex","metricIndex","valueIndex","epoch","bucket","col","queryResult","variables","textIndex","tagsIndex","target","dataTarget","dateTimeValue","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","fn","params","arg","name","defaultValue","transformMetadataToKustoSchema","nameOrIdOrSomething","templateVariables","database","globalParameters","AzureLogAnalyticsDatasource","DataSourceWithBackend","instanceSettings","cloud","path","response","workspaceListUrl","interpolatedUri","scopedVars","workspace","request","mergeMap","df","encodedQuery","customMeta","base64Enc","workspaceId","querystring","queries","defaultDropdownValue","hasValue","AzureMonitorDatasource","hasResource","hasResourceUri","f","azMonitorQuery","skipToken","region","validMetricNamespace","nextToken","nextPage","storageNamespaces","workingQueries","key","replaced","multiple","currentQueries","q","providerName","locationMap","subLocations","AzureResourceGraphDatasource","variableNames","subscriptionVar","sub","RESOURCE_GRAPH_URL","logsSupportedResourceTypesKusto","ResourcePickerData","azureMonitorDatasource","searchType","searchQuery","parsedUri","id","currentSelection","resourceGroupURI","resourceGroups","resourcesForResourceGroup","promise","allFetched","$skipToken","resourceResponse","resourceGroupId","subscriptionURI","subscriptionName","resourceGroupName","responseResourceName","maxRetries","reqOptions","supportedMetricNamespaces","namespaces","namespaceVals","subscriptionIds","logsProvider","logsLocations","logLocationsMap","logLocation","resourceObjs","newSelectedRows","rtype","migrateAnnotation","annotation","oldQuery","oldWorkspace","grafanaTemplateVariableFnMatches","isGrafanaTemplateVariableFnQuery","matches","createGrafanaTemplateVariableQuery","matchesForQuery","defaultSubscriptionId","createGrafanaTemplateVariableDetails","createLogAnalyticsTemplateVariableQuery","defaultWorkspaceId","migrateGrafanaTemplateVariableFn","grafanaTemplateVariableFn","migrateStringQueriesToObjectQueries","updateQuery","inputVal","setInputVal","updatedQuery","removeOption","AZURE_QUERY_VARIABLE_TYPE_OPTIONS","setVariableOptionGroup","requireSubscription","setRequireSubscription","hasResourceGroup","setHasResourceGroup","hasNamespace","setHasNamespace","hasRegion","setHasRegion","requireResourceGroup","setRequireResourceGroup","requireNamespace","setRequireNamespace","requireResource","setRequireResource","setResourceGroups","setNamespaces","regions","setRegions","subs","s","rgs","onQueryTypeChange","selectableValue","onChangeSubscription","onChangeResourceGroup","onChangeNamespace","onChangeRegion","onChangeResource","queryChange","GrafanaTemplateVariableFn","VariableSupport","promisedResults","queryObj","templateVariablesResults","loc","queryResp","lastValueFrom","metric","Datasource","byType","baseTarget","hasQueryForType","queryForType","observables","req","ds","forkJoin","map","frame","of","subQuery","trackAzureMonitorDashboardLoaded","dashboardId","orgId","userId","grafanaVersion","azureQueries","stats"],"sourceRoot":""}